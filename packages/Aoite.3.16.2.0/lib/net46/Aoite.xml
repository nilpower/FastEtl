<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aoite</name>
    </assembly>
    <members>
        <member name="T:Aoite.AoiteInfo">
            <summary>
            Aoite 框架的程序集描述。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.SnkKeyFile">
            <summary>
            获取包含密钥对的文件的路径。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Version">
            <summary> 
            获取简写化的版本号。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Company">
            <summary>
            公司。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Copyright">
            <summary> 
            版权。
            </summary>
        </member>
        <member name="T:Aoite.AoiteInfo.Core">
            <summary> 
            Aoite 核心套件。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Core.Product">
            <summary> 
            程序集的产品名称。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Core.AssemblyVersion">
            <summary> 
            程序集详细的版本。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Core.Description">
            <summary> 
            程序集的简单描述。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Core.Guid">
            <summary> 
            程序集的唯一标识。
            </summary>
        </member>
        <member name="T:Aoite.AoiteInfo.Windows">
            <summary> 
            Aoite Windows Forms 套件。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Windows.Product">
            <summary>
            程序集的产品名称。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Windows.Guid">
            <summary>
            程序集的唯一标识。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Windows.AssemblyVersion">
            <summary> 
            程序集详细的版本。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Windows.Description">
            <summary>
            程序集的简单描述。
            </summary>
        </member>
        <member name="T:Aoite.AoiteInfo.Mvc">
            <summary> 
            Aoite ASP.NET MVC 套件。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Mvc.Product">
            <summary>
            程序集的产品名称。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Mvc.Guid">
            <summary>
            程序集的唯一标识。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Mvc.AssemblyVersion">
            <summary> 
            程序集详细的版本。
            </summary>
        </member>
        <member name="F:Aoite.AoiteInfo.Mvc.Description">
            <summary>
            程序集的简单描述。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.BindingExecutorAttribute">
            <summary>
            表示一个命令模型具有指定执行器类型的特性。
            <para>备注：若执行命令是一个泛型，执行器类型必须也是一个泛型。</para>
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.BindingExecutorAttribute.Type">
            <summary>
            获取执行器类型。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.BindingExecutorAttribute.#ctor(System.Type)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.BindingExecutorAttribute"/> 类的新实例。
            </summary>
            <param name="type">执行器类型。</param>
        </member>
        <member name="T:Aoite.CommandModel.CacheAttribute">
            <summary>
            表示一个命令模型执行器具有缓存的特性。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CacheAttribute.Group">
            <summary>
            获取或设置缓存的分组。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CacheAttribute.#ctor(System.String)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.CacheAttribute"/> 类的新实例。
            </summary>
            <param name="group">缓存的分组。</param>
        </member>
        <member name="T:Aoite.CommandModel.CommandBus">
            <summary>
            表示一个命令模型的总线。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandBus.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.CommandBus"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandBus.CreateContext``1(``0)">
            <summary>
            创建一个命令模型的上下文。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <returns>命令模型的上下文。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandBus.Execute``1(``0,Aoite.CommandModel.CommandExecutingHandler{``0},Aoite.CommandModel.CommandExecutedHandler{``0})">
            <summary>
            执行一个命令模型。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>命令模型。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandBus.ExecuteAsync``1(``0,Aoite.CommandModel.CommandExecutingHandler{``0},Aoite.CommandModel.CommandExecutedHandler{``0})">
            <summary>
            以异步的方式执行一个命令模型。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>异步操作。</returns>
        </member>
        <member name="P:Aoite.CommandModel.CommandBus.IsPipeCreated">
            <summary>
            获取一个值，指示当前命令总线的上下文管道是否已创建。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandBus.Pipe">
            <summary>
            获取一个命令总线的上下文管道。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandBus.PipeTransaction">
            <summary>
            获取一个命令总线的上下文管道，并开始事务模式。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.CommandModelServiceBase">
            <summary>
            表示一个命令模型的基础服务。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.CommandModelServiceBase"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.#ctor(System.IIocContainer)">
            <summary>
            指定服务容器，初始化一个 <see cref="T:Aoite.CommandModel.CommandModelServiceBase"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="P:Aoite.CommandModel.CommandModelServiceBase.User">
            <summary>
            获取执行命令模型的用户。该属性可能返回 null 值。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandModelServiceBase.Bus">
            <summary>
            获取命令总线。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.BeginPipe">
            <summary>
            创建命令总线的上下文管道。
            </summary>
            <returns>命令总线的上下文管道。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.BeginPipeTransaction">
            <summary>
            创建事务型命令总线的上下文管道。
            </summary>
            <returns>命令总线的上下文管道。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.Execute``1(``0,Aoite.CommandModel.CommandExecutingHandler{``0},Aoite.CommandModel.CommandExecutedHandler{``0})">
            <summary>
            执行一个命令模型。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>命令模型。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.ExecuteAsync``1(``0,Aoite.CommandModel.CommandExecutingHandler{``0},Aoite.CommandModel.CommandExecutedHandler{``0})">
            <summary>
            以异步的方式执行一个命令模型。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>异步操作。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.AcquireLock``1(System.Nullable{System.TimeSpan})">
            <summary>
            获取一个全局锁的功能，如果获取锁超时将会抛出异常。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="timeout">获取锁的超时设定。</param>
            <returns>可释放的锁实例。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.AcquireLock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            获取一个全局锁的功能，如果获取锁超时将会抛出异常。
            </summary>
            <param name="key">锁的键。</param>
            <param name="timeout">获取锁的超时设定。</param>
            <returns>可释放的锁实例。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.Increment``1(System.Int64)">
            <summary>
            获取指定数据类型键的原子递增序列。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="increment">递增量。</param>
            <returns>递增的序列。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.Increment(System.String,System.Int64)">
            <summary>
            获取指定键的原子递增序列。
            </summary>
            <param name="key">序列的键。</param>
            <param name="increment">递增量。</param>
            <returns>递增的序列。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.GenerateEntityCacheKey(System.Type,System.Object)">
            <summary>
            获取指定实体数据类型的缓存键。
            </summary>
            <param name="type">实体的数据类型。</param>
            <param name="keyValue">实体的主键。</param>
            <returns>非 null 值的字符串。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.Set(System.String,System.Object)">
            <summary>
            设置缓存。
            </summary>
            <param name="key">缓存键。</param>
            <param name="value">缓存值。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.SetEntity``1(System.Object,``0)">
            <summary>
            设置基于实体的缓存。
            </summary>
            <typeparam name="T">实体的数据类型。</typeparam>
            <param name="keyValue">实体的主键。</param>
            <param name="value">实体的值。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.Get(System.String,System.Func{System.Object})">
            <summary>
            获取缓存。
            </summary>
            <param name="key">缓存键。</param>
            <param name="valueFactory">若找不到缓存时的延迟设置回调方法。</param>
            <returns>缓存值，或一个 null 值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.Get``1(System.String,System.Func{``0})">
            <summary>
            获取缓存。
            </summary>
            <typeparam name="T">缓存的数据类型。</typeparam>
            <param name="key">缓存键。</param>
            <param name="valueFactory">若找不到缓存时的延迟设置回调方法。</param>
            <returns>缓存值，或一个 <typeparamref name="T"/> 的默认值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.GetEntity``1(System.Object,System.Func{``0})">
            <summary>
            获取基于实体的缓存。
            </summary>
            <typeparam name="T">缓存的数据类型。</typeparam>
            <param name="keyValue">实体的主键。</param>
            <param name="valueFactory">若找不到缓存时的延迟设置回调方法。</param>
            <returns>缓存值，或一个 <typeparamref name="T"/> 的默认值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.Exstis(System.String)">
            <summary>
            检测指定的缓存键是否存在。
            </summary>
            <param name="key">缓存键。</param>
            <returns>存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelServiceBase.ExstisEntity``1(System.Object)">
            <summary>
            检测基于实体指定的缓存键是否存在。
            </summary>
            <typeparam name="T">缓存的数据类型。</typeparam>
            <param name="keyValue">实体的主键。</param>
            <returns>存在返回 true，否则返回 false。</returns>
        </member>
        <member name="T:Aoite.CommandModel.Context">
            <summary>
            表示一个执行命令模型的上下文。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.Context.Command">
            <summary>
            获取正在执行的命令模型。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.Context.User">
            <summary>
            获取执行命令模型的用户。该属性可能返回 null 值。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.Context.Data">
            <summary>
            获取执行命令模型的其他参数，参数名称若为字符串则不区分大小写的序号字符串比较。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.Context.Engine">
            <summary>
            获取上下文中的 <see cref="T:Aoite.Data.IDbEngine"/> 实例。
            <para>* 不应在执行器中开启事务。</para>
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.Context.#ctor(System.IIocContainer,Aoite.CommandModel.ICommand,System.Lazy{System.Collections.Specialized.HybridDictionary},System.Lazy{Aoite.Data.IDbEngine})">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.Context"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
            <param name="command">命令模型。</param>
            <param name="lazyData">延迟模式的命令模型的其他参数。</param>
            <param name="lazyEngine">延迟模式的上下文中的 <see cref="T:Aoite.Data.IDbEngine"/> 实例。</param>
        </member>
        <member name="P:Aoite.CommandModel.Context.Item(System.Object)">
            <summary>
            获取或设置键的值。
            </summary>
            <param name="key">键。</param>
            <returns>给定键的值。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ContextFactory">
            <summary>
            表示一个命令模型上下文的工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ContextFactory.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.ContextFactory"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.ContextFactory.Create``1(``0,System.Lazy{System.Collections.Specialized.HybridDictionary},System.Lazy{Aoite.Data.IDbEngine})">
            <summary>
            创建一个命令模型的上下文。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="lazyData">延迟模式的命令模型的其他参数。</param>
            <param name="lazyEngine">延迟模式的上下文中的 <see cref="T:Aoite.Data.IDbEngine"/> 实例。</param>
            <returns>命令模型的上下文。</returns>
        </member>
        <member name="T:Aoite.CommandModel.EventStore">
            <summary>
            表示一个命令模型事件的仓库。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.EventStore.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.EventStore"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.EventStore.Register(System.Type,Aoite.CommandModel.IEvent)">
            <summary>
            注册一个事件到指定的命令模型类型。
            </summary>
            <param name="commandType">命令模型类型。</param>
            <param name="event">事件。</param>
        </member>
        <member name="M:Aoite.CommandModel.EventStore.Unregister(System.Type,Aoite.CommandModel.IEvent)">
            <summary>
            注销指定命令模型类型的一个事件。
            </summary>
            <param name="commandType">命令模型类型。</param>
            <param name="event">事件。</param>
        </member>
        <member name="M:Aoite.CommandModel.EventStore.UnregisterAll(System.Type)">
            <summary>
            注销指定命令模型类型的所有事件。
            </summary>
            <param name="commandType">命令模型类型。</param>
        </member>
        <member name="M:Aoite.CommandModel.EventStore.RaiseExecuting``1(Aoite.CommandModel.IContext,``0)">
            <summary>
            命令模型执行前发生的方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <returns>指示是否继续执行命令。</returns>
        </member>
        <member name="M:Aoite.CommandModel.EventStore.RaiseExecuted``1(Aoite.CommandModel.IContext,``0,System.Exception)">
            <summary>
            命令模型执行后发生的方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <param name="exception">抛出的异常。</param>
        </member>
        <member name="T:Aoite.CommandModel.Event`1">
            <summary>
            表示一个命令模型的事件。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="E:Aoite.CommandModel.Event`1.Executing">
            <summary>
            命令模型执行前发生的事件。事件在顺序广播时，遇到返回 false 则会中断广播。
            </summary>
        </member>
        <member name="E:Aoite.CommandModel.Event`1.Executed">
            <summary>
            命令模型执行后发生的事件。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.Event`1.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.Event`1"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.Event`1.RaiseExecuting(Aoite.CommandModel.IContext,`0)">
            <summary>
            命令模型执行前发生的方法。
            </summary>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
        </member>
        <member name="M:Aoite.CommandModel.Event`1.RaiseExecuted(Aoite.CommandModel.IContext,`0,System.Exception)">
            <summary>
            命令模型执行后发生的方法。
            </summary>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <param name="exception">抛出的异常。</param>
        </member>
        <member name="T:Aoite.CommandModel.ExecutorFactory">
            <summary>
            表示一个命令模型的执行器工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorFactory.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.ExecutorFactory"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorFactory.Create``1(``0)">
            <summary>
            创建一个命令模型的执行器元数据。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <returns>命令模型的执行器元数据。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ExecutorMetadata`1">
            <summary>
            表示一个命令模型执行器的元数据。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorMetadata`1.#ctor(Aoite.CommandModel.IExecutor{`0})">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.ExecutorMetadata`1"/> 类的新实例。
            </summary>
            <param name="executor">命令模型的执行器。</param>
        </member>
        <member name="T:Aoite.CommandModel.ICommand`1">
            <summary>
            表示一个包含返回值的命令模型。
            </summary>
            <typeparam name="TResult">返回值的数据类型。</typeparam>
        </member>
        <member name="P:Aoite.CommandModel.ICommand`1.Result">
            <summary>
            获取或设置命令模型的执行后的返回值。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.CommandBase`1">
            <summary>
            表示一个包含返回值的命令模型基类。
            </summary>
            <typeparam name="TResult">返回值的数据类型。</typeparam>
        </member>
        <member name="P:Aoite.CommandModel.CommandBase`1.Result">
            <summary>
            获取或设置命令模型的执行后的返回值。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandBase`1.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.CommandBase`1"/> 类的新实例。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.IEvent`1">
            <summary>
            定义一个命令模型的事件。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="T:Aoite.CommandModel.IExecutorAsync">
            <summary>
            定义一个异步命令模型的执行器。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.IExecutorAsync`1">
            <summary>
            定义一个异步命令模型的执行器。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.CommandModel.IExecutorAsync`1.ExecuteAsync(Aoite.CommandModel.IContext,`0)">
            <summary>
            异步执行一个命令模型。
            </summary>
            <param name="context">命令模型的上下文。</param>
            <param name="command">命令模型。</param>
            <returns>异步操作。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ExecutorAsyncBase`2">
            <summary>
            表示一个异步命令模型的执行器的基类。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <typeparam name="TResult">返回值的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorAsyncBase`2.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.ExecutorAsyncBase`2"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorAsyncBase`2.ExecuteAsync(Aoite.CommandModel.IContext,`0)">
            <summary>
            异步执行一个命令模型。
            </summary>
            <param name="context">命令模型的上下文。</param>
            <param name="command">命令模型。</param>
            <returns>异步操作。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorAsyncBase`2.ExecuteResult(Aoite.CommandModel.IContext,`0)">
            <summary>
            执行一个命令模型。
            </summary>
            <param name="context">命令模型的上下文。</param>
            <param name="command">命令模型。</param>
            <returns>执行的结果值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorAsyncBase`2.ExecuteResultAsync(Aoite.CommandModel.IContext,`0)">
            <summary>
            异步执行一个命令模型。
            </summary>
            <param name="context">命令模型的上下文。</param>
            <param name="command">命令模型。</param>
            <returns>异步操作。</returns>
        </member>
        <member name="T:Aoite.CommandModel.IExecutorAttribute">
            <summary>
            定义一个命令的处理程序。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.CommandModelContainerProviderBase">
            <summary>
            表示一个包含服务容器的命令模型基类。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandModelContainerProviderBase.Container">
            <summary>
            获取或设置命令模型的服务容器。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelContainerProviderBase.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.CommandModelContainerProviderBase"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="T:Aoite.CommandModel.CommandExecuteHandler`1">
            <summary>
            命令模型执行的方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
        </member>
        <member name="T:Aoite.CommandModel.CommandExecutingHandler`1">
            <summary>
            命令模型执行前发生的方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <returns>指示是否继续执行命令。</returns>
        </member>
        <member name="T:Aoite.CommandModel.CommandExecutedHandler`1">
            <summary>
            命令模型执行后发生的方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <param name="exception">抛出的异常。</param>
        </member>
        <member name="T:Aoite.CommandModel.ICommand">
            <summary>
            定义一个命令模型。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.ICommandBus">
            <summary>
            定义一个命令总线。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ICommandBus.Execute``1(``0,Aoite.CommandModel.CommandExecutingHandler{``0},Aoite.CommandModel.CommandExecutedHandler{``0})">
            <summary>
            执行一个命令模型。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>命令模型。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ICommandBus.ExecuteAsync``1(``0,Aoite.CommandModel.CommandExecutingHandler{``0},Aoite.CommandModel.CommandExecutedHandler{``0})">
            <summary>
            以异步的方式执行一个命令模型。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>异步操作。</returns>
        </member>
        <member name="P:Aoite.CommandModel.ICommandBus.Pipe">
            <summary>
            获取一个命令总线的上下文管道。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.ICommandBus.PipeTransaction">
            <summary>
            获取一个命令总线的上下文管道，并开始事务模式。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.ICommandBus.IsPipeCreated">
            <summary>
            获取一个值，指示当前命令总线的上下文管道是否已创建。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.ICommandBusPipe">
            <summary>
            定义一个命令模型总线的管道。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ICommandBusPipe.UseTransaction(System.Data.IsolationLevel)">
            <summary>
            指定事务的隔离级别，并打开数据源连接（如果没有打开）。
            </summary>
            <param name="isolationLevel">指定事务的隔离级别。</param>
            <returns>总线管道。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ICommandBusPipe.Commit">
            <summary>
            提交数据库事务。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ICommandBusPipe.Rollback">
            <summary>
            从挂起状态回滚事务。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.ICommandModelService">
            <summary>
            定义一个命令模型的基础服务。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.ICommandModelService.User">
            <summary>
            获取执行命令模型的用户。该属性可能返回 null 值。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.IContext">
            <summary>
            定义一个执行命令模型的上下文。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.IContext.User">
            <summary>
            获取执行命令模型的用户。该属性可能返回 null 值。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.IContext.Data">
            <summary>
            获取执行命令模型的其他参数，参数名称若为字符串则不区分大小写的序号字符串比较。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.IContext.Command">
            <summary>
            获取正在执行的命令模型。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.IContext.Item(System.Object)">
            <summary>
            获取或设置键的值。
            </summary>
            <param name="key">键。</param>
            <returns>给定键的值。</returns>
        </member>
        <member name="P:Aoite.CommandModel.IContext.Engine">
            <summary>
            获取上下文中的 <see cref="T:Aoite.Data.IDbEngine"/> 实例。该实例应不为 null 值，且线程唯一。
            <para>* 不应在执行器中开启事务。</para>
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.IContextFactory">
            <summary>
            定义一个命令模型上下文的工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.IContextFactory.Create``1(``0,System.Lazy{System.Collections.Specialized.HybridDictionary},System.Lazy{Aoite.Data.IDbEngine})">
            <summary>
            创建一个命令模型的上下文。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <param name="lazyData">延迟模式的命令模型的其他参数。</param>
            <param name="lazyEngine">延迟模式的上下文中的 <see cref="T:Aoite.Data.IDbEngine"/> 实例。</param>
            <returns>命令模型的上下文。</returns>
        </member>
        <member name="T:Aoite.CommandModel.IEvent">
            <summary>
            定义一个命令模型的事件。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.IExecutorFactory">
            <summary>
            定义一个命令模型的执行器工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.IExecutorFactory.Create``1(``0)">
            <summary>
            创建一个命令模型的执行器元数据。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="command">命令模型。</param>
            <returns>命令模型的执行器元数据。</returns>
        </member>
        <member name="T:Aoite.CommandModel.IExecutorMetadata">
            <summary>
            定义一个命令模型执行器的元数据。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.IExecutorMetadata.Executor">
            <summary>
            获取命令模型的执行器。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.ICommandCache">
            <summary>
            定义一个支持缓存的命令模型。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ICommandCache.CreateStrategy(Aoite.CommandModel.IContext)">
            <summary>
            提供执行的上下文，获取缓存策略。
            </summary>
            <param name="context">执行的上下文。</param>
            <returns>缓存策略。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ICommandCache.SetCacheValue(System.Object)">
            <summary>
            设置缓存的值。
            </summary>
            <param name="value">缓存值。</param>
            <returns>表示缓存值是否有效的赋值。返回 false 表示缓存值无效。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ICommandCache.GetCacheValue">
            <summary>
            获取需缓存的值。
            </summary>
            <returns>缓存值。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ICommandHandler`1">
            <summary>
            定义一个命令的处理程序。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.CommandModel.ICommandHandler`1.RaiseExecuting(Aoite.CommandModel.IContext,`0)">
            <summary>
            命令模型执行前发生的方法。
            </summary>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <returns>指示是否继续执行命令。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ICommandHandler`1.RaiseExecuted(Aoite.CommandModel.IContext,`0,System.Exception)">
            <summary>
            命令模型执行后发生的方法。
            </summary>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <param name="exception">抛出的异常。</param>
        </member>
        <member name="T:Aoite.CommandModel.IEventStore">
            <summary>
            定义一个命令模型事件的仓库。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.IEventStore.Register(System.Type,Aoite.CommandModel.IEvent)">
            <summary>
            注册一个事件到指定的命令模型类型。
            </summary>
            <param name="commandType">命令模型类型。</param>
            <param name="event">事件。</param>
        </member>
        <member name="M:Aoite.CommandModel.IEventStore.Unregister(System.Type,Aoite.CommandModel.IEvent)">
            <summary>
            注销指定命令模型类型的一个事件。
            </summary>
            <param name="commandType">命令模型类型。</param>
            <param name="event">事件。</param>
        </member>
        <member name="M:Aoite.CommandModel.IEventStore.UnregisterAll(System.Type)">
            <summary>
            注销指定命令模型类型的所有事件。
            </summary>
            <param name="commandType">命令模型类型。</param>
        </member>
        <member name="M:Aoite.CommandModel.IEventStore.RaiseExecuting``1(Aoite.CommandModel.IContext,``0)">
            <summary>
            命令模型执行前发生的方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <returns>指示是否继续执行命令。</returns>
        </member>
        <member name="M:Aoite.CommandModel.IEventStore.RaiseExecuted``1(Aoite.CommandModel.IContext,``0,System.Exception)">
            <summary>
            命令模型执行后发生的方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <param name="exception">抛出的异常。</param>
        </member>
        <member name="T:Aoite.CommandModel.IExecutor">
            <summary>
            定义一个命令模型的执行器。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.IExecutorMetadata`1">
            <summary>
            定义一个命令模型执行器的元数据。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="P:Aoite.CommandModel.IExecutorMetadata`1.Executor">
            <summary>
            获取命令模型的执行器。
            </summary>
        </member>
        <member name="T:Aoite.CommandModel.IExecutor`1">
            <summary>
            定义一个命令模型的执行器。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.CommandModel.IExecutor`1.Execute(Aoite.CommandModel.IContext,`0)">
            <summary>
            执行一个命令模型。
            </summary>
            <param name="context">命令模型的上下文。</param>
            <param name="command">命令模型。</param>
        </member>
        <member name="T:Aoite.CommandModel.ExecutorBase`2">
            <summary>
            表示一个命令模型的执行器的基类。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <typeparam name="TResult">返回值的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorBase`2.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.ExecutorBase`2"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorBase`2.Execute(Aoite.CommandModel.IContext,`0)">
            <summary>
            执行一个命令模型。
            </summary>
            <param name="context">命令模型的上下文。</param>
            <param name="command">命令模型。</param>
        </member>
        <member name="M:Aoite.CommandModel.ExecutorBase`2.ExecuteResult(Aoite.CommandModel.IContext,`0)">
            <summary>
            执行一个命令模型。
            </summary>
            <param name="context">命令模型的上下文。</param>
            <param name="command">命令模型。</param>
            <returns>执行的结果值。</returns>
        </member>
        <member name="T:Aoite.CommandModel.IUserFactory">
            <summary>
            定义一个执行命令模型的用户工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.IUserFactory.GetUser(System.IIocContainer)">
            <summary>
            获取执行命令模型的用户。
            </summary>
            <param name="container">服务容器。</param>
            <returns>客户端唯一标识，或一个 null 值。</returns>
        </member>
        <member name="T:Aoite.CommandModel.MockContext">
            <summary>
            表示一个模拟执行的命令模型的上下文。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.MockContext.User">
            <summary>
            获取执行命令模型的用户。该属性可能返回 null 值。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.MockContext.#ctor(System.Object,System.IIocContainer,Aoite.CommandModel.ICommand,System.Lazy{Aoite.Data.IDbEngine})">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.Context"/> 类的新实例。
            </summary>
            <param name="user">模拟的用户。</param>
            <param name="command">命令模型。</param>
            <param name="container">服务容器。</param>
            <param name="lazyEngine">延迟模式的上下文中的 <see cref="T:Aoite.Data.IDbEngine"/> 实例。</param>
        </member>
        <member name="T:Aoite.CommandModel.MockEvent`1">
            <summary>
            表示一个模拟命令模型的事件。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.CommandModel.MockEvent`1.#ctor(Aoite.CommandModel.CommandExecutingHandler{`0},Aoite.CommandModel.CommandExecutedHandler{`0})">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.MockEvent`1"/> 类的新实例。
            </summary>
            <param name="executing">命令模型执行前发生的方法。可以为 null 值。</param>
            <param name="executed">命令模型执行后发生的方法。可以为 null 值。</param>
        </member>
        <member name="M:Aoite.CommandModel.MockEvent`1.RaiseExecuting(Aoite.CommandModel.IContext,`0)">
            <summary>
            命令模型执行前发生的方法。
            </summary>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
        </member>
        <member name="M:Aoite.CommandModel.MockEvent`1.RaiseExecuted(Aoite.CommandModel.IContext,`0,System.Exception)">
            <summary>
            命令模型执行后发生的方法。
            </summary>
            <param name="context">执行的上下文。</param>
            <param name="command">执行的命令模型。</param>
            <param name="exception">抛出的异常。</param>
        </member>
        <member name="T:Aoite.CommandModel.MockExecutorFactory">
            <summary>
            表示一个模拟的命令模型执行器工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.MockExecutorFactory.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.MockExecutorFactory"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.MockExecutorFactory.Mock``1(Aoite.CommandModel.CommandExecuteHandler{``0})">
            <summary>
            模拟指定命令模型的执行方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="mockHandler">模拟的执行器。</param>
            <returns>当前执行器工厂。</returns>
        </member>
        <member name="M:Aoite.CommandModel.MockExecutorFactory.Enqueue(System.Func{Aoite.CommandModel.ICommand,System.Object})">
            <summary>
            添加一个按顺序先进先出的模拟的模型执行方法。
            </summary>
            <param name="mockHandler">模拟的执行器。</param>
            <returns>当前执行器工厂。</returns>
        </member>
        <member name="M:Aoite.CommandModel.MockExecutorFactory.Mock(System.Func{Aoite.CommandModel.ICommand,System.Object})">
            <summary>
            弱类型命令模型，添加一个按顺序先进先出的模拟的模型执行方法。
            </summary>
            <param name="mockHandler">模拟的执行器。</param>
            <returns>当前执行器工厂。</returns>
        </member>
        <member name="M:Aoite.CommandModel.MockExecutorFactory.Mock(System.Action{Aoite.CommandModel.ICommand})">
            <summary>
            弱类型命令模型，添加一个按顺序先进先出的模拟的模型执行方法。
            </summary>
            <param name="mockHandler">模拟的执行器。</param>
            <returns>当前执行器工厂。</returns>
        </member>
        <member name="M:Aoite.CommandModel.MockExecutorFactory.Mock``1(System.Func{``0,System.Object})">
            <summary>
            强类型命令模型，添加一个按顺序先进先出的模拟的模型执行方法。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="mockHandler">模拟的执行器。</param>
            <returns>当前执行器工厂。</returns>
        </member>
        <member name="T:Aoite.CommandModel.UserFactory">
            <summary>
            定义一个执行命令模型的用户工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.UserFactory.#ctor(System.Func{System.IIocContainer,System.Object})">
            <summary>
            指定一个委托，初始化一个 <see cref="T:Aoite.CommandModel.UserFactory"/> 类的新实例。
            </summary>
            <param name="getUserCallback">获取用户的委托。</param>
        </member>
        <member name="M:Aoite.CommandModel.UserFactory.GetUser(System.IIocContainer)">
            <summary>
            获取执行命令模型的用户。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="T:Aoite.CommandModel.CommandModelExtensions">
            <summary>
            表示命令模型的扩展方法。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelExtensions.Register``1(Aoite.CommandModel.IEventStore,Aoite.CommandModel.IEvent{``0})">
            <summary>
            注册一个事件到指定的命令模型类型。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="eventStore">事件的仓库。</param>
            <param name="event">事件。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelExtensions.Unregister``1(Aoite.CommandModel.IEventStore,Aoite.CommandModel.IEvent{``0})">
            <summary>
            注销指定命令模型类型的一个事件。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="eventStore">事件的仓库。</param>
            <param name="event">事件。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelExtensions.UnregisterAll``1(Aoite.CommandModel.IEventStore)">
            <summary>
            注销指定命令模型类型的所有事件。
            </summary>
            <typeparam name="TCommand">命令模型的数据类型。</typeparam>
            <param name="eventStore">事件的仓库。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelExtensions.MultipleLock(Aoite.CommandModel.ILockProvider,System.String[])">
            <summary>
            提供批量锁的功能。
            </summary>
            <param name="provider">缓存提供程序。</param>
            <param name="keys">锁的键名列表。</param>
            <returns>批量锁。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandModelExtensions.MultipleLock(Aoite.CommandModel.ILockProvider,System.TimeSpan,System.String[])">
            <summary>
            提供批量锁的功能。
            </summary>
            <param name="provider">缓存提供程序。</param>
            <param name="timeout">锁的超时设定。</param>
            <param name="keys">锁的键名列表。</param>
            <returns>批量锁。</returns>
        </member>
        <member name="T:Aoite.CommandModel.CacheProvider">
            <summary>
            表示一个提供缓存功能的提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CacheProvider.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.CacheProvider"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.CacheProvider.Set(System.String,System.Object)">
            <summary>
            设置缓存。
            </summary>
            <param name="key">缓存键。</param>
            <param name="value">缓存值。</param>
        </member>
        <member name="M:Aoite.CommandModel.CacheProvider.Get(System.String,System.Func{System.Object})">
            <summary>
            获取缓存。
            </summary>
            <param name="key">缓存键。</param>
            <param name="valueFactory">若找不到缓存时的延迟设置回调方法。</param>
            <returns>缓存值，或一个 null 值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CacheProvider.Exists(System.String)">
            <summary>
            检测指定的缓存键是否存在。
            </summary>
            <param name="key">缓存键。</param>
            <returns>存在返回 true，否则返回 false。</returns>
        </member>
        <member name="T:Aoite.CommandModel.CommandCacheStrategy">
            <summary>
            表示一个命令模型的缓存策略。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandCacheStrategy.Key">
            <summary>
            获取缓存项的键。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandCacheStrategy.Command">
            <summary>
            获取执行的命令模型。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandCacheStrategy.Context">
            <summary>
            获取执行的上下文。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandCacheStrategy.SlidingExpiration">
            <summary>
            获取一个值，该值指示如果某个缓存项在给定时段内未被访问，是否应被逐出。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandCacheStrategy.HasSlidingExpiration">
            <summary>
            获取一个值，表示 <seealso cref="P:Aoite.CommandModel.CommandCacheStrategy.SlidingExpiration"/> 是否具有有效值。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandCacheStrategy.AbsoluteExpiration">
            <summary>
            获取一个值，该值指示是否应在指定持续时间过后逐出某个缓存项。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.CommandCacheStrategy.HasAbsoluteExpiration">
            <summary>
            获取一个值，表示 <seealso cref="P:Aoite.CommandModel.CommandCacheStrategy.AbsoluteExpiration"/> 是否具有有效值。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CommandCacheStrategy.#ctor(System.String,System.TimeSpan,Aoite.CommandModel.ICommand,Aoite.CommandModel.IContext)">
            <summary>
            以滑动间隔过期方式，初始化一个 <see cref="T:Aoite.CommandModel.CommandCacheStrategy"/> 类的新实例。
            </summary>
            <param name="key">缓存项的键。</param>
            <param name="slidingExpiration">缓存项的过期间隔。</param>
            <param name="command">执行的命令模型。</param>
            <param name="context">执行的上下文。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandCacheStrategy.#ctor(System.String,System.DateTimeOffset,Aoite.CommandModel.ICommand,Aoite.CommandModel.IContext)">
            <summary>
            以绝对间隔过期方式，初始化一个 <see cref="T:Aoite.CommandModel.CommandCacheStrategy"/> 类的新实例。
            </summary>
            <param name="key">缓存项的键。</param>
            <param name="absoluteExpiration">缓存项的过期间隔。</param>
            <param name="command">执行的命令模型。</param>
            <param name="context">执行的上下文。</param>
        </member>
        <member name="M:Aoite.CommandModel.CommandCacheStrategy.GetCache(System.String)">
            <summary>
            获取缓存中的项。
            </summary>
            <param name="group">缓存键的分组。</param>
            <returns>缓存中的项，如果缓存不存在项，则返回 null 值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.CommandCacheStrategy.SetCache(System.String,System.Object)">
            <summary>
            提供缓存键的分组，设置缓存项。
            </summary>
            <param name="group">缓存键的分组。</param>
            <param name="value">缓存的值。</param>
        </member>
        <member name="T:Aoite.CommandModel.CounterProvider">
            <summary>
            表示一个计数的提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.CounterProvider.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.CounterProvider"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.CounterProvider.Increment(System.String,System.Int64)">
            <summary>
            获取指定键的原子递增序列。
            </summary>
            <param name="key">序列的键。</param>
            <param name="increment">递增量。</param>
            <returns>递增的序列。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ICacheProvider">
            <summary>
            定义一个提供缓存功能的提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ICacheProvider.Set(System.String,System.Object)">
            <summary>
            设置缓存。
            </summary>
            <param name="key">缓存键。</param>
            <param name="value">缓存值。</param>
        </member>
        <member name="M:Aoite.CommandModel.ICacheProvider.Get(System.String,System.Func{System.Object})">
            <summary>
            获取缓存。
            </summary>
            <param name="key">缓存键。</param>
            <param name="valueFactory">若找不到缓存时的延迟设置回调方法。</param>
            <returns>缓存值，或一个 null 值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ICacheProvider.Exists(System.String)">
            <summary>
            检测指定的缓存键是否存在。
            </summary>
            <param name="key">缓存键。</param>
            <returns>存在返回 true，否则返回 false。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ICommandCacheStrategy">
            <summary>
            定义一个命令模型的缓存策略。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.ICommandCacheStrategy.Key">
            <summary>
            获取缓存项的键。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.ICommandCacheStrategy.SlidingExpiration">
            <summary>
            获取一个值，该值指示如果某个缓存项在给定时段内未被访问，是否应被逐出。
            </summary>
        </member>
        <member name="P:Aoite.CommandModel.ICommandCacheStrategy.AbsoluteExpiration">
            <summary>
            获取一个值，该值指示是否应在指定持续时间过后逐出某个缓存项。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ICommandCacheStrategy.GetCache(System.String)">
            <summary>
            获取缓存中的项。
            </summary>
            <param name="group">缓存键的分组。</param>
            <returns>缓存中的项，如果缓存不存在项，则返回 null 值。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ICommandCacheStrategy.SetCache(System.String,System.Object)">
            <summary>
            提供缓存键的分组，设置缓存项。
            </summary>
            <param name="group">缓存键的分组。</param>
            <param name="value">缓存的值。</param>
        </member>
        <member name="T:Aoite.CommandModel.ICounterProvider">
            <summary>
            定义一个计数的提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ICounterProvider.Increment(System.String,System.Int64)">
            <summary>
            获取指定键的原子递增序列。
            </summary>
            <param name="key">序列的键。</param>
            <param name="increment">递增量。</param>
            <returns>递增的序列。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ILockProvider">
            <summary>
            定义一个提供锁功能的提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ILockProvider.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            提供锁的功能。
            </summary>
            <param name="key">锁的键名。</param>
            <param name="timeout">锁的超时设定。</param>
            <returns>可释放的锁实例。</returns>
        </member>
        <member name="T:Aoite.CommandModel.IRedisProvider">
            <summary>
            定义 Redis 的提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.IRedisProvider.GetRedisClient">
            <summary>
            获取一个 Redis 的客户端，在代码中无需释放此客户端。
            </summary>
            <returns>Redis 的客户端。</returns>
        </member>
        <member name="T:Aoite.CommandModel.LockProvider">
            <summary>
            表示一个提供锁功能的提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.LockProvider.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.LockProvider"/> 类的新实例。
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.LockProvider.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            提供锁的功能。
            </summary>
            <param name="key">锁的键名。</param>
            <param name="timeout">锁的超时设定。</param>
            <returns>可释放的锁实例。</returns>
        </member>
        <member name="T:Aoite.CommandModel.ServiceFactory">
            <summary>
            表示一个服务的工厂。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.ServiceFactory.CreateMockService``1(System.Action{Aoite.CommandModel.MockExecutorFactory},Aoite.CommandModel.IRedisProvider)">
            <summary>
            创建一个模拟的服务。
            </summary>
            <typeparam name="TService">服务的类型。</typeparam>
            <param name="mockFactoryCallback">模拟的执行器工厂回调函数。</param>
            <param name="redisProvider">Redis 提供程序。若为 null 值表示启用基于应用程序域各种提供程序的服务容器。</param>
            <returns>服务的实例。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ServiceFactory.CreateMockService``1(System.Object,System.Action{Aoite.CommandModel.MockExecutorFactory},Aoite.CommandModel.IRedisProvider)">
            <summary>
            创建一个模拟的服务。
            </summary>
            <typeparam name="TService">服务的类型。</typeparam>
            <param name="user">当前已授权的登录用户。</param>
            <param name="mockFactoryCallback">模拟的执行器工厂回调函数。</param>
            <param name="redisProvider">Redis 提供程序。若为 null 值表示启用基于应用程序域各种提供程序的服务容器。</param>
            <returns>服务的实例。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ServiceFactory.CreateContainer(System.Object,System.Action{Aoite.CommandModel.MockExecutorFactory},Aoite.CommandModel.IRedisProvider)">
            <summary>
            创建一个用于命令模型的服务容器。
            </summary>
            <param name="user">当前已授权的登录用户。</param>
            <param name="mockFactoryCallback">模拟的执行器工厂回调函数。</param>
            <param name="redisProvider">Redis 提供程序。若为 null 值表示启用基于应用程序域各种提供程序的服务容器。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:Aoite.CommandModel.ServiceFactory.CreateContainer(Aoite.CommandModel.IUserFactory,System.Action{Aoite.CommandModel.MockExecutorFactory},Aoite.CommandModel.IRedisProvider)">
            <summary>
            创建一个用于命令模型的服务容器。
            </summary>
            <param name="userFactory">用户工厂。</param>
            <param name="mockFactoryCallback">模拟的执行器工厂回调函数。</param>
            <param name="redisProvider">Redis 提供程序。若为 null 值表示启用基于应用程序域各种提供程序的服务容器。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="T:Aoite.CommandModel.RedisProvider">
            <summary>
            表示一个默认的 Redis 提供程序。
            </summary>
        </member>
        <member name="M:Aoite.CommandModel.RedisProvider.#ctor(System.IIocContainer)">
            <summary>
            初始化一个 <see cref="T:Aoite.CommandModel.RedisProvider"/> 类的新实例
            </summary>
            <param name="container">服务容器。</param>
        </member>
        <member name="M:Aoite.CommandModel.RedisProvider.GetRedisClient">
            <summary>
            获取一个 Redis 的客户端，在代码中无需释放此客户端。
            </summary>
            <returns>Redis 的客户端。</returns>
        </member>
        <member name="T:Aoite.Data.DbExecutor">
            <summary>
            表示一个数据源查询与交互的执行器。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ExecuteAsync``1(Aoite.Data.ExecuteType,System.Threading.CancellationToken,System.Func{System.Data.Common.DbCommand,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            异步执行数据源的查询与交互。
            </summary>
            <typeparam name="TValue">返回结果的数据类型。</typeparam>
            <param name="type">执行的命令类型。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="callback">执行时的回调方法。</param>
            <returns>执行结果。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToNonQueryAsync">
            <summary>
            异步执行查询命令，并返回受影响的行数。
            </summary>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回受影响的行数。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToScalarAsync">
            <summary>
            异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToScalarAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToScalarAsync``1">
            <summary>
            指定值的数据类型，异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <typeparam name="TValue">值的数据类型。</typeparam>
            <returns>具备强类型的结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToScalarAsync``1(System.Threading.CancellationToken)">
            <summary>
            指定值的数据类型，异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <typeparam name="TValue">值的数据类型。</typeparam>
            <returns>具备强类型的结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToDataSetAsync">
            <summary>
            异步执行查询命令，并返回数据集。
            </summary>
            <returns>数据集。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToDataSetAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回数据集。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToDataSetAsync``1">
            <summary>
            异步执行查询命令，并返回自定义的数据集。
            </summary>
            <typeparam name="TDataSet">自定义的数据集类型。</typeparam>
            <returns>具备强类型的一个数据集。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToDataSetAsync``1(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回自定义的数据集。
            </summary>
            <typeparam name="TDataSet">自定义的数据集类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>具备强类型的一个数据集。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToTableAsync">
            <summary>
            异步执行查询命令，并返回表。
            </summary>
            <returns>一张表。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToTableAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回表。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>一张表。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToTableAsync(System.Int32,System.Int32)">
            <summary>
            异步执行分页查询命令，并返回表。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToTableAsync(System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            异步执行分页查询命令，并返回表。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToReaderAsync(Aoite.Data.ExecuteReaderHandler)">
            <summary>
            异步异步执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <param name="callback">给定的读取器委托。</param>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToReaderAsync(System.Threading.CancellationToken,Aoite.Data.ExecuteReaderHandler)">
            <summary>
            异步异步执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="callback">给定的读取器委托。</param>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToReaderAsync``1(Aoite.Data.ExecuteReaderHandler{``0})">
            <summary>
            异步执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="callback">给定的读取器委托。</param>
            <returns>回调结果的值。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToReaderAsync``1(System.Threading.CancellationToken,Aoite.Data.ExecuteReaderHandler{``0})">
            <summary>
            异步执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="callback">给定的读取器委托。</param>
            <returns>回调结果的值。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntityAsync``1">
            <summary>
            异步执行查询命令，并返回实体。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntityAsync``1(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回实体。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync``1">
            <summary>
            异步执行查询，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync``1(System.Threading.CancellationToken)">
            <summary>
            异步执行查询，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync``1(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync``1(System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntityAsync">
            <summary>
            异步执行查询命令，并返回匿名实体。
            </summary>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntityAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回匿名实体。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync">
            <summary>
            异步执行查询，并返回匿名实体的集合。
            </summary>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询，并返回匿名实体的集合。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntitiesAsync(System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="P:Aoite.Data.DbExecutor.Engine">
            <summary>
            获取数据源查询与交互引擎的实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbExecutor.Command">
            <summary>
            获取执行的命令。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbExecutor.#ctor(Aoite.Data.IDbEngine,Aoite.Data.ExecuteCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.DbExecutor"/> 类的新实例。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="command">执行的命令。</param>
            <param name="connection">数据源的连接。可以为 null，表示一个新的连接。</param>
            <param name="transaction">数据源的事务上下文。可以为 null，表示当前交互行为不存在事务。</param>
            <param name="closeAfterFinally">指示当执行命令以后是否关闭连接。</param>
        </member>
        <member name="M:Aoite.Data.DbExecutor.Open">
            <summary>
            打开数据源的连接。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbExecutor.Close">
            <summary>
            关闭数据源的连接。
            </summary>
        </member>
        <member name="E:Aoite.Data.DbExecutor.Executing">
            <summary>
            在引擎执行命令时发生。
            </summary>
        </member>
        <member name="E:Aoite.Data.DbExecutor.Executed">
            <summary>
            在引擎执行命令后发生。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbExecutor.SubExecuting(Aoite.Data.ExecutingEventHandler)">
            <summary>
            订阅命令执行前的事件。
            </summary>
            <param name="callback">事件的回调函数。</param>
            <returns>当前 <see cref="T:Aoite.Data.IDbExecutor"/></returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.SubExecuted(Aoite.Data.ExecutedEventHandler)">
            <summary>
            订阅命令执行后的事件。
            </summary>
            <param name="callback">事件的回调函数。</param>
            <returns>当前 <see cref="T:Aoite.Data.IDbExecutor"/></returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.OnExecuting(Aoite.Data.ExecuteType,System.Data.Common.DbCommand)">
            <summary>
            命令执行时发生。
            </summary>
            <param name="type">执行的命令类型。</param>
            <param name="dbCommand">执行的 <see cref="T:System.Data.Common.DbCommand"/>。</param>
        </member>
        <member name="M:Aoite.Data.DbExecutor.OnExecuted(Aoite.Data.ExecuteType,System.Data.Common.DbCommand,System.Object)">
            <summary>
            命令执行后发生。
            </summary>
            <param name="type">执行的命令类型。</param>
            <param name="result">执行的返回结果。</param>
            <param name="dbCommand">执行的 <see cref="T:System.Data.Common.DbCommand"/>。</param>
        </member>
        <member name="M:Aoite.Data.DbExecutor.CreateDbCommand">
            <summary>
            创建一个关联当前执行器的 <see cref="T:System.Data.Common.DbCommand"/> 的实例。
            </summary>
            <returns>关联当前执行器的 <see cref="T:System.Data.Common.DbCommand"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.CreateDbCommand(Aoite.Data.ExecuteCommand)">
            <summary>
            指定执行命令，创建一个关联当前执行器的 <see cref="T:System.Data.Common.DbCommand"/> 的实例。
            </summary>
            <param name="command">执行的命令。</param>
            <returns>关联当前执行器的 <see cref="T:System.Data.Common.DbCommand"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.FillParameters(System.Data.Common.DbCommand,Aoite.Data.ExecuteParameterCollection)">
            <summary>
            将参数集合填充到 <see cref="T:System.Data.Common.DbCommand"/>。
            </summary>
            <param name="command">命令对象。</param>
            <param name="parameters">参数集合。</param>
        </member>
        <member name="M:Aoite.Data.DbExecutor.Execute``1(Aoite.Data.ExecuteType,System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            执行数据源的查询与交互。
            </summary>
            <typeparam name="TValue">返回结果的数据类型。</typeparam>
            <param name="type">执行的命令类型。</param>
            <param name="callback">执行时的回调方法。</param>
            <returns>执行结果。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            提供一个 <see cref="T:System.Data.Common.DbCommand"/> 的实例，创建一个关联的数据适配器。
            </summary>
            <param name="command">一个 <see cref="T:System.Data.Common.DbCommand"/> 的实例。</param>
            <returns>关联 <paramref name="command"/> 的数据适配器。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToReader(Aoite.Data.ExecuteReaderHandler)">
            <summary>
            执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <param name="callback">给定的读取器委托。</param>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToReader``1(Aoite.Data.ExecuteReaderHandler{``0})">
            <summary>
            执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="callback">给定的读取器委托。</param>
            <returns>回调结果的值。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToNonQuery">
            <summary>
            执行查询命令，并返回受影响的行数。
            </summary>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToScalar">
            <summary>
            执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToScalar``1">
            <summary>
            指定值的数据类型，执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <typeparam name="TValue">值的数据类型。</typeparam>
            <returns>具备强类型的结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToDataSet">
            <summary>
            执行查询命令，并返回数据集。
            </summary>
            <returns>数据集。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToDataSet``1">
            <summary>
            执行查询命令，并返回自定义的数据集。
            </summary>
            <typeparam name="TDataSet">自定义的数据集类型。</typeparam>
            <returns>具备强类型的一个数据集。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToTable">
            <summary>
            执行查询命令，并返回表。
            </summary>
            <returns>一张表。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToTable(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回表。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntity``1">
            <summary>
            执行查询命令，并返回实体。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntities``1">
            <summary>
            执行查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntities``1(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntity">
            <summary>
            执行查询命令，并返回匿名实体。
            </summary>
            <returns>匿名实体。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntities">
            <summary>
            执行查询命令，并返回匿名实体的集合。
            </summary>
            <returns>匿名实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.DbExecutor.ToEntities(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的匿名实体的集合。</returns>
        </member>
        <member name="T:Aoite.Data.DbValue">
            <summary>
            表示一个数据库参数的值。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbValue.Value">
            <summary>
            获取或设置参数的值。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbValue.Type">
            <summary>
            获取或设置参数的 <see cref="T:System.Data.DbType"/>。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbValue.Size">
            <summary>
            获取或设置参数的长度。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbValue.Direction">
            <summary>
            获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbValue.Precision">
            <summary>
            获取或设置一个值数值参数的精度。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbValue.Scale">
            <summary>
            数值参数的小数位数。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbValue.Fill(System.Data.IDbDataParameter)">
            <summary>
            将当前参数配置填充到指定 <see cref="T:System.Data.IDbDataParameter"/> 的实例。
            </summary>
            <param name="parameter">一个 <see cref="T:System.Data.IDbDataParameter"/> 的实例。</param>
        </member>
        <member name="M:Aoite.Data.DbValue.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.DbValue"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbValue.#ctor(System.Object)">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.DbValue"/> 类的新实例。
            </summary>
            <param name="value">参数的值。</param>
        </member>
        <member name="T:Aoite.Data.DbProvidersAttribute">
            <summary>
            表示一个数据源查询与交互引擎的提供程序名称。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbProvidersAttribute.Names">
            <summary>
            获取提供程序名称的集合。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbProvidersAttribute.Type">
            <summary>
            获取提供程序名称说明。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbProvidersAttribute.#ctor(System.String[])">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.DbProvidersAttribute"/> 类的新实例。
            </summary>
            <param name="names">提供程序名称的集合。</param>
        </member>
        <member name="T:Aoite.Data.Factories.SqlCeFactory">
            <summary>
            表示一个基于 Microsoft SQL Server Compact 数据源命令生成工厂。
            </summary>
        </member>
        <member name="F:Aoite.Data.Factories.SqlCeFactory.Instance">
            <summary>
            获取数据库命令生成工厂的唯一实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.Factories.SqlCeFactory.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.Factories.SqlCeFactory"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.Factories.SqlCeFactory.PageFormat">
            <summary>
            获取分页的字符串格式项。
            </summary>
        </member>
        <member name="M:Aoite.Data.Factories.SqlCeFactory.PageProcessCommand(System.Int32,System.Int32,System.Data.Common.DbCommand)">
            <summary>
            对指定的 <see cref="T:System.Data.Common.DbCommand"/> 进行分页处理。
            </summary>
            <param name="pageNumber">从 1 开始的页码。</param>
            <param name="pageSize">页的大小。</param>
            <param name="command">数据源查询命令</param>
        </member>
        <member name="T:Aoite.Data.Factories.SqlFactory">
            <summary>
            表示一个基于 Microsoft SQL Server 数据源命令生成工厂。
            </summary>
        </member>
        <member name="F:Aoite.Data.Factories.SqlFactory.Instance">
            <summary>
            获取数据库命令生成工厂的唯一实例。
            </summary>
        </member>
        <member name="F:Aoite.Data.Factories.SqlFactory.Empty">
            <summary>
            获取一个值，表示空的个性化暗道。
            </summary>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.Factories.SqlFactory"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.EscapeName(System.String,Aoite.Data.NamePoint)">
            <summary>
            转义指定位置的名称。
            </summary>
            <param name="name">名称。</param>
            <param name="point">名称的位置。</param>
            <returns>转义后的名称。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.UnescapeName(System.String)">
            <summary>
            反转义名称。
            </summary>
            <param name="name">名称。</param>
            <returns>反转义后的名称。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.FindProperties(System.TypeMapper,System.Object@)">
            <summary>
            获取指定类型映射器的属性集合。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="entity">类型映射器关联的对象实例，并将 <paramref name="entity"/> 转换成映射器的类型 。</param>
            <returns>映射属性的集合枚举。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.AppendParameterValue(System.PropertyMapper,System.Text.StringBuilder,System.Object,Aoite.Data.ExecuteParameterCollection)">
            <summary>
            追加指定属性映射器名称到 <paramref name="builder"/>，并将其参数和值添加到集合。
            </summary>
            <param name="property">属性映射器。</param>
            <param name="builder">字符串生成器。</param>
            <param name="value">属性的值。</param>
            <param name="ps">参数集合。</param>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateLastIdentityCommand(System.TypeMapper,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器创建一个获取最后递增序列值的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateInsertCommand(System.TypeMapper,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和实体创建一个插入的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateUpdateCommand(System.TypeMapper,System.Object,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和实体创建一个更新的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateDeleteCommand(System.TypeMapper,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和条件参数创建一个删除的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateFields(System.TypeMapper,System.TypeMapper)">
            <summary>
            创建指定视图类型的字段列表。
            </summary>
            <param name="entityMapper">实体的类型映射器。</param>
            <param name="viewMapper">视图的类型映射器。</param>
            <returns>包含在 <paramref name="entityMapper"/> 的 <paramref name="viewMapper"/> 属性集合，并对每个属性进行转义。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateQueryCommand(System.TypeMapper,System.TypeMapper,System.WhereParameters,System.Int32,Aoite.Data.ICommandTunnel)">
            <summary>
            指定实体类型映射器、视图映射器和条件创建一个查询的命令。
            </summary>
            <param name="entityMapper">实体的类型映射器。</param>
            <param name="viewMapper">视图的类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="top">指定 TOP 数量，小于 1 则忽略作用。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateQueryCommand(System.TypeMapper,System.String,System.WhereParameters,System.Int32,Aoite.Data.ICommandTunnel)">
            <summary>
            指定实体类型映射器、列集合和条件创建一个查询的命令。
            </summary>
            <param name="entityMapper">实体的类型映射器。</param>
            <param name="fields">SELECT 的列集合(以“,”分隔），可以为 null 值，表示所有字段。</param>
            <param name="where">条件参数。</param>
            <param name="top">指定 TOP 数量，小于 1 则忽略作用。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateExistsCommand(System.TypeMapper,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和条件参数创建一个行是否存在的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreateRowCountCommand(System.TypeMapper,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和条件参数创建一个表总行数的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="P:Aoite.Data.Factories.SqlFactory.PageFormat">
            <summary>
            获取分页的字符串格式项。
            </summary>
        </member>
        <member name="P:Aoite.Data.Factories.SqlFactory.TotalFormat">
            <summary>
            获取统计的字符串格式项。
            </summary>
        </member>
        <member name="F:Aoite.Data.Factories.SqlFactory.DefaultRowNumberName">
            <summary>
            获取默认页码字段的列名。
            </summary>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.GetOrderByMatch(System.String)">
            <summary>
            获取最后一个匹配的 Order By 结果。
            </summary>
            <param name="commandText">原查询字符串。</param>
            <returns> Order By 结果。</returns>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.CreatePageTotalCountCommand(System.String)">
            <summary>
            创建指定查询字符串的统计总行数查询字符串。
            </summary>
            <param name="commandText">原查询字符串。</param>
        </member>
        <member name="M:Aoite.Data.Factories.SqlFactory.PageProcessCommand(System.Int32,System.Int32,System.Data.Common.DbCommand)">
            <summary>
            对指定的 <see cref="T:System.Data.Common.DbCommand"/> 进行分页处理。
            </summary>
            <param name="pageNumber">从 1 开始的页码。</param>
            <param name="pageSize">页的大小。</param>
            <param name="command">数据源查询命令</param>
        </member>
        <member name="T:Aoite.Data.IDbExecutorAsync">
            <summary>
            定义一个数据源查询与交互的异步执行器。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToNonQueryAsync">
            <summary>
            异步执行查询命令，并返回受影响的行数。
            </summary>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回受影响的行数。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToScalarAsync">
            <summary>
            异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToScalarAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToScalarAsync``1">
            <summary>
            指定值的数据类型，异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <typeparam name="TValue">值的数据类型。</typeparam>
            <returns>具备强类型的结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToScalarAsync``1(System.Threading.CancellationToken)">
            <summary>
            指定值的数据类型，异步执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <typeparam name="TValue">值的数据类型。</typeparam>
            <returns>具备强类型的结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToDataSetAsync">
            <summary>
            异步执行查询命令，并返回数据集。
            </summary>
            <returns>数据集。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToDataSetAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回数据集。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToDataSetAsync``1">
            <summary>
            异步执行查询命令，并返回自定义的数据集。
            </summary>
            <typeparam name="TDataSet">自定义的数据集类型。</typeparam>
            <returns>具备强类型的一个数据集。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToDataSetAsync``1(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回自定义的数据集。
            </summary>
            <typeparam name="TDataSet">自定义的数据集类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>具备强类型的一个数据集。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToTableAsync">
            <summary>
            异步执行查询命令，并返回表。
            </summary>
            <returns>一张表。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToTableAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回表。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>一张表。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToTableAsync(System.Int32,System.Int32)">
            <summary>
            异步执行分页查询命令，并返回表。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToTableAsync(System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            异步执行分页查询命令，并返回表。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToReaderAsync(Aoite.Data.ExecuteReaderHandler)">
            <summary>
            异步执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <param name="callback">给定的读取器委托。</param>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToReaderAsync(System.Threading.CancellationToken,Aoite.Data.ExecuteReaderHandler)">
            <summary>
            异步执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="callback">给定的读取器委托。</param>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToReaderAsync``1(Aoite.Data.ExecuteReaderHandler{``0})">
            <summary>
            执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="callback">给定的读取器委托。</param>
            <returns>回调结果的值。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToReaderAsync``1(System.Threading.CancellationToken,Aoite.Data.ExecuteReaderHandler{``0})">
            <summary>
            执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="callback">给定的读取器委托。</param>
            <returns>回调结果的值。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntityAsync``1">
            <summary>
            异步执行查询命令，并返回实体。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntityAsync``1(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回实体。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync``1">
            <summary>
            异步执行查询，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync``1(System.Threading.CancellationToken)">
            <summary>
            异步执行查询，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync``1(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync``1(System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntityAsync">
            <summary>
            异步执行查询命令，并返回匿名实体。
            </summary>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntityAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询命令，并返回匿名实体。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync">
            <summary>
            异步执行查询，并返回匿名实体的集合。
            </summary>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询，并返回匿名实体的集合。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutorAsync.ToEntitiesAsync(System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="T:Aoite.Data.IDbValue">
            <summary>
            定义一个数据库参数的值。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbValue.Value">
            <summary>
            获取或设置参数的值。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbValue.Type">
            <summary>
            获取或设置参数的 <see cref="T:System.Data.DbType"/>。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbValue.Size">
            <summary>
            获取或设置参数的长度。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbValue.Direction">
            <summary>
            获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbValue.Precision">
            <summary>
            获取或设置一个值数值参数的精度。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbValue.Scale">
            <summary>
            数值参数的小数位数。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbValue.Fill(System.Data.IDbDataParameter)">
            <summary>
            将当前参数配置填充到指定 <see cref="T:System.Data.IDbDataParameter"/> 的实例。
            </summary>
            <param name="parameter">一个 <see cref="T:System.Data.IDbDataParameter"/> 的实例。</param>
        </member>
        <member name="T:Aoite.Data.IFilterExecutorAsync">
            <summary>
            定义一个数据源的异步数据筛选执行器。
            </summary>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.ModifyAsync``1(System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步执行一个更新的命令，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="entity">实体的实例对象，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.RemoveAsync``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步执行一个删除的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.ExistsAsync``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步判断指定的条件的数据是否已存在。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.RowCountAsync``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取数据表的总行数。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>数据的行数。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindOneAsync``2(System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取一个对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindAllAsync``2(System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindAllAsync``2(System.Func{``0,``1},System.IPagination,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="page">一个分页的实现。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindOneAsync``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取一个对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindOneAsync``2(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取一个对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindAllAsync``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindAllAsync``2(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindAllAsync``1(System.IPagination,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="page">一个分页的实现。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutorAsync.FindAllAsync``2(System.IPagination,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，异步获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="page">一个分页的实现。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="T:Aoite.Data.IFilterExecutor">
            <summary>
            定义一个数据源的数据筛选执行器。
            </summary>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.Modify``1(System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，执行一个更新的命令，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="entity">实体的实例对象，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.Remove``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，执行一个删除的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.Exists``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，判断指定的条件的数据是否已存在。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.RowCount``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取数据表的总行数。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>数据的行数。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindOne``2(System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取一个对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindAll``2(System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindAll``2(System.Func{``0,``1},System.IPagination,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="page">一个分页的实现。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindOne``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取一个对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindOne``2(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取一个对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindAll``1(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindAll``2(Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindAll``1(System.IPagination,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="page">一个分页的实现。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.FindAll``2(System.IPagination,Aoite.Data.ICommandTunnel)">
            <summary>
            根据当前提供匹配条件，获取对象的列表。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="page">一个分页的实现。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.OrderBy(System.String[])">
            <summary>
            对根据当前提供的匹配条件进行正序排序。
            </summary>
            <param name="fields">字段集合。</param>
            <returns>返回数据筛选执行器。</returns>
        </member>
        <member name="M:Aoite.Data.IFilterExecutor.OrderByDescending(System.String[])">
            <summary>
            对根据当前提供的匹配条件进行倒序排序。
            </summary>
            <param name="fields">字段集合。</param>
            <returns>返回数据筛选执行器。</returns>
        </member>
        <member name="T:Aoite.Data.ISqlFactory">
            <summary>
            定义一个数据库命令生成工厂。
            </summary>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateDeleteCommand(System.TypeMapper,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和条件参数创建一个删除的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateExistsCommand(System.TypeMapper,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和条件参数创建一个行是否存在的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateFields(System.TypeMapper,System.TypeMapper)">
            <summary>
            创建指定视图类型的字段列表。
            </summary>
            <param name="entityMapper">实体的类型映射器。</param>
            <param name="viewMapper">视图的类型映射器。</param>
            <returns>包含在 <paramref name="entityMapper"/> 的 <paramref name="viewMapper"/> 属性集合，并对每个属性进行转义。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateInsertCommand(System.TypeMapper,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和实体创建一个插入的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateLastIdentityCommand(System.TypeMapper,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器创建一个获取最后递增序列值的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreatePageTotalCountCommand(System.String)">
            <summary>
            创建指定查询字符串的统计总行数查询字符串。
            </summary>
            <param name="commandText">原查询字符串。</param>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateQueryCommand(System.TypeMapper,System.TypeMapper,System.WhereParameters,System.Int32,Aoite.Data.ICommandTunnel)">
            <summary>
            指定实体类型映射器、视图映射器和条件创建一个查询的命令。
            </summary>
            <param name="entityMapper">实体的类型映射器。</param>
            <param name="viewMapper">视图的类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="top">指定 TOP 数量，小于 1 则忽略作用。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateQueryCommand(System.TypeMapper,System.String,System.WhereParameters,System.Int32,Aoite.Data.ICommandTunnel)">
            <summary>
            指定实体类型映射器、列集合和条件创建一个查询的命令。
            </summary>
            <param name="entityMapper">实体的类型映射器。</param>
            <param name="fields">SELECT 的列集合(以“,”分隔），可以为 null 值，表示所有字段。</param>
            <param name="where">条件参数。</param>
            <param name="top">指定 TOP 数量，小于 1 则忽略作用。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateRowCountCommand(System.TypeMapper,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和条件参数创建一个表总行数的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.CreateUpdateCommand(System.TypeMapper,System.Object,System.WhereParameters,Aoite.Data.ICommandTunnel)">
            <summary>
            指定类型映射器和实体创建一个更新的命令。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="where">条件参数。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>查询命令。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.EscapeName(System.String,Aoite.Data.NamePoint)">
            <summary>
            转义指定位置的名称。
            </summary>
            <param name="name">名称。</param>
            <param name="point">名称的位置。</param>
            <returns>转义后的名称。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.UnescapeName(System.String)">
            <summary>
            反转义名称。
            </summary>
            <param name="name">名称。</param>
            <returns>反转义后的名称。</returns>
        </member>
        <member name="M:Aoite.Data.ISqlFactory.PageProcessCommand(System.Int32,System.Int32,System.Data.Common.DbCommand)">
            <summary>
            对指定的 <see cref="T:System.Data.Common.DbCommand"/> 进行分页处理。
            </summary>
            <param name="pageNumber">从 1 开始的页码。</param>
            <param name="pageSize">页的大小。</param>
            <param name="command">数据源查询命令</param>
        </member>
        <member name="T:Aoite.Data.ICommandTunnel">
            <summary>
            定义一个命令的暗道，用于处理命令生成后的处理和个性化表名的接口。
            </summary>
        </member>
        <member name="M:Aoite.Data.ICommandTunnel.GetTableName(System.TypeMapper)">
            <summary>
            获取个性化表名。
            </summary>
            <param name="mapper">映射器。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Aoite.Data.ICommandTunnel.GetCommand(System.TypeMapper,Aoite.Data.ExecuteCommand)">
            <summary>
            给定映射器和执行命令，获取一个个性化的执行命令。
            </summary>
            <param name="mapper">映射器。</param>
            <param name="command">执行命令。</param>
            <returns>新的执行命令。</returns>
        </member>
        <member name="T:Aoite.Data.ColumnAttribute">
            <summary>
            表示一个具有列的特性。
            </summary>
        </member>
        <member name="M:Aoite.Data.ColumnAttribute.#ctor(System.Boolean)">
            <summary>
            指示当前属性是否为主要成员，初始化一个 <see cref="T:Aoite.Data.ColumnAttribute"/> 类的新实例。
            </summary>
            <param name="isPrimaryKey">指示当前属性是否为主要成员。</param>
        </member>
        <member name="M:Aoite.Data.ColumnAttribute.#ctor(System.String)">
            <summary>
            指定名称，初始化一个 <see cref="T:Aoite.Data.ColumnAttribute"/> 类的新实例。
            </summary>
            <param name="name">名称。</param>
        </member>
        <member name="M:Aoite.Data.ColumnAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            指定名称和指示当前属性是否为主要成员，初始化一个 <see cref="T:Aoite.Data.ColumnAttribute"/> 类的新实例。
            </summary>
            <param name="name">名称。</param>
            <param name="isKey">指示当前属性是否为主要成员。</param>
        </member>
        <member name="M:Aoite.Data.ColumnAttribute.#ctor">
            <summary>
            初始化一个空的 <see cref="T:Aoite.Data.ColumnAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.ColumnAttribute.IsKey">
            <summary>
            获取或设置一个值，该值指示当前属性是否为主键。
            </summary>
        </member>
        <member name="T:Aoite.Data.JsonColumnAttribute">
            <summary>
            表示一个具有列的特性，并且这个列对应的属性应可序列化/反序列化为一个 JSON。
            </summary>
        </member>
        <member name="M:Aoite.Data.JsonColumnAttribute.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.JsonColumnAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.JsonColumnAttribute.GetValue(System.DynamicProperty,System.Object)">
            <summary>
            指定一个实例，获取指定属性的值。
            </summary>
            <param name="property">动态属性。</param>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <returns>属性的值。</returns>
        </member>
        <member name="M:Aoite.Data.JsonColumnAttribute.SetValue(System.DynamicProperty,System.Object,System.Object)">
            <summary>
            指定一个实例，设置指定属性的值。
            </summary>
            <param name="property">动态属性。</param>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <param name="value">属性的值。</param>
        </member>
        <member name="T:Aoite.Data.StringLengthAttribute">
            <summary>
            表示一个字符串长度限制的特性。
            </summary>
        </member>
        <member name="P:Aoite.Data.StringLengthAttribute.Order">
            <summary>
            获取或设置一个值，指示属性检查的排序。排序越小排在越前面。
            </summary>
        </member>
        <member name="P:Aoite.Data.StringLengthAttribute.MaxLength">
            <summary>
            获取或设置一个值，指示字符串的最大长度，小于 1 表示不控制。
            </summary>
        </member>
        <member name="P:Aoite.Data.StringLengthAttribute.IsUnicodeCharacher">
            <summary>
            获取或设置一个值，为 true 时 ASCII 码超过 128 的字符都会被计算 2 个字节长度，否则所有字符都只计算 1 个字节长度。
            </summary>
        </member>
        <member name="M:Aoite.Data.StringLengthAttribute.#ctor(System.Int32,System.Boolean)">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.StringLengthAttribute"/> 类的新实例。
            </summary>
            <param name="maxLength">字符串的最大长度，小于 1 表示不控制。</param>
            <param name="isUnicodeCharacher">为 true 时 ASCII 码超过 128 的字符都会被计算 2 个字节长度，否则所有字符都只计算 1 个字节长度。</param>
        </member>
        <member name="T:Aoite.Data.NotNullAttribute">
            <summary>
            表示一个值不允许为空的特性。
            </summary>
        </member>
        <member name="P:Aoite.Data.NotNullAttribute.Order">
            <summary>
            获取或设置一个值，指示属性检查的排序。排序越小排在越前面。
            </summary>
        </member>
        <member name="M:Aoite.Data.NotNullAttribute.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.NotNullAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="T:Aoite.Data.DbContext">
            <summary>
            表示一个数据源查询与交互引擎的上下文对象，一个对象创建一个数据源连接。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbContext.Owner">
            <summary>
            获取当前上下文所属的交互引擎。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbContext.Id">
            <summary>
            获取当前上下文的唯一标识符。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbContext.IsClosed">
            <summary>
            获取一个值，该值指示当前上下文的连接是否已关闭。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbContext.Open">
            <summary>
            打开连接。在执行查询时，若数据源尚未打开则自动打开数据源。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbContext.OpenTransaction">
            <summary>
            启动数据源事务，并打开数据源连接。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbContext.OpenTransaction(System.Data.IsolationLevel)">
            <summary>
            指定事务的隔离级别，并打开数据源连接（如果没有打开）。
            </summary>
            <param name="isolationLevel">指定事务的隔离级别。</param>
        </member>
        <member name="M:Aoite.Data.DbContext.Execute(Aoite.Data.ExecuteCommand)">
            <summary>
            执行指定的命令。
            </summary>
            <param name="command">执行的命令。</param>
            <returns>数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:Aoite.Data.DbContext.Execute(System.FormattableString)">
            <summary>
            执行指定的命令。
            </summary>
            <param name="fs">一个复合格式字符串</param>
            <returns>数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:Aoite.Data.DbContext.Commit">
            <summary>
            提交数据源事务。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbContext.Rollback">
            <summary>
            从挂起状态回滚事务。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbContext.Close">
            <summary>
            关闭并释放数据源连接。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbContext.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbContext.DisposeUnmanaged">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Aoite.Data.DbEngine">
            <summary>
            表示一个数据源查询与交互引擎。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngine.Provider">
            <summary>
            获取数据源查询与交互引擎的提供程序。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngine.Owner">
            <summary>
            获取当前上下文所属的交互引擎。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbEngine.#ctor(Aoite.Data.IDbEngineProvider)">
            <summary>
            给定数据源查询与交互引擎的提供程序，初始化一个 <see cref="T:Aoite.Data.DbEngine"/> 类的新实例。
            </summary>
            <param name="provider">数据源查询与交互引擎的提供程序。</param>
        </member>
        <member name="M:Aoite.Data.DbEngine.Execute(Aoite.Data.ExecuteCommand)">
            <summary>
            执行指定的命令。
            </summary>
            <param name="command">执行的命令。</param>
            <returns>数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:Aoite.Data.DbEngine.TestConnection">
            <summary>
            测试数据源的连接。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbEngine.ResetContext">
            <summary>
            释放并关闭当前线程上下文的 <see cref="T:Aoite.Data.IDbContext"/>。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngine.IsThreadContext">
            <summary>
            获取一个值，指示当前上下文在线程中是否已创建。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngine.Context">
            <summary>
            创建并返回一个 <see cref="T:Aoite.Data.IDbContext"/>。返回当前线程上下文包含的 <see cref="T:Aoite.Data.IDbContext"/> 或创建一个新的  <see cref="T:Aoite.Data.IDbContext"/>。
            <para>当释放一个 <see cref="T:Aoite.Data.IDbContext"/> 后，下一次调用获取将会重新创建上下文。</para>
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngine.ContextTransaction">
            <summary>
            创建并返回一个事务性 <see cref="T:Aoite.Data.IDbContext"/>。返回当前线程上下文包含的 <see cref="T:Aoite.Data.IDbContext"/> 或创建一个新的  <see cref="T:Aoite.Data.IDbContext"/>。
            <para>当释放一个 <see cref="T:Aoite.Data.IDbContext"/> 后，下一次调用获取将会重新创建上下文。</para>
            </summary>
        </member>
        <member name="E:Aoite.Data.DbEngine.Executing">
            <summary>
            在引擎执行命令时发生。
            </summary>
        </member>
        <member name="E:Aoite.Data.DbEngine.Executed">
            <summary>
            在引擎执行命令后发生。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbEngine.OnExecuting(Aoite.Data.IDbEngine,Aoite.Data.ExecuteType,Aoite.Data.ExecuteCommand,System.Data.Common.DbCommand)">
            <summary>
            表示 <see cref="E:Aoite.Data.DbEngine.Executing"/> 事件的处理方法。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="type">执行的类型。</param>
            <param name="command">执行的命令。</param>
            <param name="dbCommand">执行的 <see cref="T:System.Data.Common.DbCommand"/>。</param>
        </member>
        <member name="M:Aoite.Data.DbEngine.OnExecuted(Aoite.Data.IDbEngine,Aoite.Data.ExecuteType,Aoite.Data.ExecuteCommand,System.Data.Common.DbCommand,System.Object)">
            <summary>
            表示 <see cref="E:Aoite.Data.DbEngine.Executed"/> 事件的处理方法。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="type">执行的类型。</param>
            <param name="result">操作的返回值。</param>
            <param name="command">执行的命令。</param>
            <param name="dbCommand">执行的 <see cref="T:System.Data.Common.DbCommand"/>。</param>
        </member>
        <member name="M:Aoite.Data.DbEngine.GetAllProviders">
            <summary>
            获取当前程序集支持的所有提供程序。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aoite.Data.DbEngine.Create(System.String,System.String)">
            <summary>
            根据指定的提供程序创建一个数据源查询与交互引擎的实例。
            </summary>
            <param name="provider">提供程序。</param>
            <param name="connectionString">连接字符串。</param>
        </member>
        <member name="M:Aoite.Data.DbEngine.Execute(System.FormattableString)">
            <summary>
            执行指定的命令。
            </summary>
            <param name="fs">一个复合格式字符串</param>
            <returns>数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:Aoite.Data.DbEngine.Parse(System.FormattableString)">
            <summary>
            将一个复合格式字符串转换为 <see cref="T:Aoite.Data.ExecuteCommand"/> 的对象实例。
            </summary>
            <param name="fs">一个复合格式字符串</param>
            <returns><see cref="T:Aoite.Data.ExecuteCommand"/> 的对象实例。</returns>
        </member>
        <member name="T:Aoite.Data.ExecuteReaderHandler">
            <summary>
            表示 <see cref="M:Aoite.Data.IDbExecutor.ToReader(Aoite.Data.ExecuteReaderHandler)"/> 的委托。
            </summary>
            <param name="reader">数据读取器。</param>
        </member>
        <member name="T:Aoite.Data.ExecuteReaderHandler`1">
            <summary>
            表示 <see cref="M:Aoite.Data.IDbExecutor.ToReader``1(Aoite.Data.ExecuteReaderHandler{``0})"/> 的委托。
            </summary>
            <typeparam name="TResultValue">返回值的类型。</typeparam>
            <param name="reader">数据读取器。</param>
            <returns>操作结果的值。</returns>
        </member>
        <member name="T:Aoite.Data.ExecutingEventHandler">
            <summary>
            数据源查询与交互执行前发生的事件委托。
            </summary>
            <param name="sender">事件对象。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:Aoite.Data.ExecutingEventArgs">
            <summary>
            数据源查询与交互执行前发生的事件参数。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecutingEventArgs.Command">
            <summary>
            获取一个值，表示执行命令。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecutingEventArgs.DbCommand">
            <summary>
            获取一个值，表示执行的 <see cref="P:Aoite.Data.ExecutingEventArgs.DbCommand"/>。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecutingEventArgs.ExecuteType">
            <summary>
            获取一个值，表示执行查询的操作类型。
            </summary>
        </member>
        <member name="T:Aoite.Data.ExecutedEventHandler">
            <summary>
            数据源查询与交互完成后的事件委托。
            </summary>
            <param name="sender">事件对象。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:Aoite.Data.ExecutedEventArgs">
            <summary>
            表示数据源查询与交互完成后的事件参数。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecutedEventArgs.Result">
            <summary>
            获取一个值，表示数据源的返回值结果。
            </summary>
        </member>
        <member name="T:Aoite.Data.DbEngineProviderBase">
            <summary>
            表示一个数据源查询与交互引擎的提供程序基类。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngineProviderBase.DbFactory">
            <summary>
            获取用于创建提供程序对数据源类的实现的实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngineProviderBase.SqlFactory">
            <summary>
            获取用生成查询命令的实现实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngineProviderBase.Name">
            <summary>
            获取一个值，表示当前数据提供程序的名称。
            </summary>
        </member>
        <member name="P:Aoite.Data.DbEngineProviderBase.ConnectionString">
            <summary>
            获取用于当前数据源的连接字符串。
            </summary>
        </member>
        <member name="M:Aoite.Data.DbEngineProviderBase.#ctor(System.String)">
            <summary>
            指定数据库的连接字符串，初始化一个 <see cref="T:Aoite.Data.DbEngineProviderBase"/> 类的新实例。
            </summary>
            <param name="connectionString">数据源的连接字符串。</param>
        </member>
        <member name="M:Aoite.Data.DbEngineProviderBase.CreateConnection">
            <summary>
            创建并返回一个到数据源的连接。
            </summary>
            <returns>到数据源的连接。</returns>
        </member>
        <member name="T:Aoite.Data.ExecuteCommand">
            <summary>
            表示一个数据源交互的执行命令。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecuteCommand.Text">
            <summary>
            获取或设置查询命令的 Transact-SQL 查询字符串。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecuteCommand.Parameters">
            <summary>
            获取查询命令的参数的键值集合。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecuteCommand.Count">
            <summary>
            获取查询命令的参数的键值集合的元素数。
            </summary>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.ExecuteCommand"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.#ctor(System.String)">
            <summary>
            指定查询字符串和查询参数，初始化一个 <see cref="T:Aoite.Data.ExecuteCommand"/> 类的新实例。
            </summary>
            <param name="text">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.#ctor(System.String,System.Object)">
            <summary>
            指定查询字符串和匿名参数集合实例，初始化一个 <see cref="T:Aoite.Data.ExecuteCommand"/> 类的新实例。
            </summary>
            <param name="text">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="objectInstance">匿名参数集合实例。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.#ctor(System.String,System.Object[])">
            <summary>
            指定查询字符串和查询参数，初始化一个 <see cref="T:Aoite.Data.ExecuteCommand"/> 类的新实例。
            </summary>
            <param name="text">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="parameters">参数集合。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.#ctor(System.String,Aoite.Data.IExecuteParameter[])">
            <summary>
            指定查询字符串和查询参数，初始化一个 <see cref="T:Aoite.Data.ExecuteCommand"/> 类的新实例。
            </summary>
            <param name="text">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="parameters">参数集合。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.#ctor(System.String,Aoite.Data.ExecuteParameterCollection)">
            <summary>
            指定查询字符串和查询参数，初始化一个 <see cref="T:Aoite.Data.ExecuteCommand"/> 类的新实例。
            </summary>
            <param name="text">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="parameters">参数集合。</param>
        </member>
        <member name="P:Aoite.Data.ExecuteCommand.Item(System.Int32)">
            <summary>
            获取指定参数索引的执行参数。
            </summary>
            <param name="index">参数索引。</param>
            <returns>获取一个 <see cref="T:Aoite.Data.IExecuteParameter"/> 的实例。</returns>
        </member>
        <member name="P:Aoite.Data.ExecuteCommand.Item(System.String)">
            <summary>
            获取指定参数名称的执行参数。
            </summary>
            <param name="name">参数名称。</param>
            <returns>获取一个 <see cref="T:Aoite.Data.IExecuteParameter"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.Parameter(System.String,System.Object)">
            <summary>
            指定参数名和参数值，添加到集合中。
            </summary>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>作为此实例副本的新对象。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteCommand.ToString">
            <summary> 
            返回当前查询命令的字符串形式。
            </summary>
        </member>
        <member name="T:Aoite.Data.ExecuteParameter">
            <summary>
            表示一个数据源交互的简单执行命令参数。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecuteParameter.Name">
            <summary>
            获取参数的名称。
            </summary>
        </member>
        <member name="M:Aoite.Data.ExecuteParameter.#ctor(System.String,System.Object)">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.ExecuteParameter"/> 类的新实例。
            </summary>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameter.CreateParameter(System.Data.Common.DbCommand)">
            <summary>
            指定 <see cref="T:System.Data.Common.DbCommand"/>，生成一个 <see cref="T:System.Data.Common.DbParameter"/>。
            </summary>
            <param name="command">一个 <see cref="T:System.Data.Common.DbCommand"/>。</param>
            <returns>已生成的 <see cref="T:System.Data.Common.DbParameter"/>。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteParameter.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>作为此实例副本的新对象。</returns>
        </member>
        <member name="T:Aoite.Data.ExecuteParameterCollection">
            <summary>
            表示一个数据源交互的执行命令参数集合。
            </summary>
        </member>
        <member name="P:Aoite.Data.ExecuteParameterCollection.Count">
            <summary>
            获取集合中包含的元素数。
            </summary>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.#ctor">
            <summary>
            使用默认容量，初始化一个 <see cref="T:Aoite.Data.ExecuteParameterCollection"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.#ctor(System.Int32)">
            <summary>
            指定初始容量初始化一个 <see cref="T:Aoite.Data.ExecuteParameterCollection"/> 类的新实例。
            </summary>
            <param name="capacity">集合可包含的初始元素数。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.#ctor(System.Object)">
            <summary>
            指定对象参数集合，初始化一个 <see cref="T:Aoite.Data.ExecuteParameterCollection"/> 类的新实例。
            </summary>
            <param name="objectInstance">匿名参数集合实例。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.#ctor(System.Object[])">
            <summary>
            指定参数集合，初始化一个 <see cref="T:Aoite.Data.ExecuteParameterCollection"/> 类的新实例。
            </summary>
            <param name="keysAndValues">应当是 <see cref="T:System.String"/> / <see cref="T:System.Object"/> 的字典集合。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.#ctor(Aoite.Data.IExecuteParameter[])">
            <summary>
            指定参数数组，初始化一个 <see cref="T:Aoite.Data.ExecuteParameterCollection"/> 类的新实例。
            </summary>
            <param name="parameters">参数数组。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.#ctor(System.Collections.Generic.ICollection{Aoite.Data.IExecuteParameter})">
            <summary>
            指定参数集合，初始化一个 <see cref="T:Aoite.Data.ExecuteParameterCollection"/> 类的新实例。
            </summary>
            <param name="parameters">参数集合。</param>
        </member>
        <member name="P:Aoite.Data.ExecuteParameterCollection.Item(System.Int32)">
            <summary>
            获取指定参数索引的执行参数。
            </summary>
            <param name="index">参数索引。</param>
            <returns>获取一个 <see cref="T:Aoite.Data.IExecuteParameter"/> 的实例。</returns>
        </member>
        <member name="P:Aoite.Data.ExecuteParameterCollection.Item(System.String)">
            <summary>
            获取指定参数名称的执行参数。
            </summary>
            <param name="name">参数名称。</param>
            <returns>获取一个 <see cref="T:Aoite.Data.IExecuteParameter"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Add(Aoite.Data.IExecuteParameter)">
            <summary>
            指定一个 <see cref="T:Aoite.Data.IExecuteParameter"/> 实例，添加到集合中。
            </summary>
            <param name="parameter">要添加的 <see cref="T:Aoite.Data.IExecuteParameter"/> 实例。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Add(System.String,System.Object)">
            <summary>
            指定参数名和参数值，添加到集合中。
            </summary>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Parse(System.Object)">
            <summary>
            指定解析一个任意对象，添加到集合中。
            </summary>
            <param name="objectInstance">匿名参数集合实例。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Remove(System.String)">
            <summary>
            移除指定参数名的 <see cref="T:Aoite.Data.ExecuteParameter"/> 项。
            </summary>
            <param name="name">参数名。</param>
            <returns>如果已从集合中成功移除项，则为 true；否则为 false。如果在集合中没有找到项，该方法也会返回 false。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Remove(Aoite.Data.IExecuteParameter)">
            <summary>
            移除指定的 <see cref="T:Aoite.Data.ExecuteParameter"/> 项。
            </summary>
            <param name="parameter">要移除的 <see cref="T:Aoite.Data.ExecuteParameter"/>。</param>
            <returns>如果已从集合中成功移除项，则为 true；否则为 false。如果在集合中没有找到项，该方法也会返回 false。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Clear">
            <summary>
            从集合中移除所有项。
            </summary>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Contains(System.String)">
            <summary>
            确定集合是否包含特定的参数名。
            </summary>
            <param name="name">参数名。</param>
            <returns>如果在集合中找到项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.Contains(Aoite.Data.IExecuteParameter)">
            <summary>
            确定集合是否包含特定的参数 <see cref="T:Aoite.Data.IExecuteParameter"/>。
            </summary>
            <param name="parameter">要查找的 <see cref="T:Aoite.Data.IExecuteParameter"/>。</param>
            <returns>如果在集合中找到项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.System#Collections#Generic#ICollection{Aoite#Data#IExecuteParameter}#CopyTo(Aoite.Data.IExecuteParameter[],System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引开始，将集合的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="parameters">作为从集合复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="arrayIndex"><paramref name="parameters"/> 中从零开始的索引，从此处开始复制。</param>
        </member>
        <member name="M:Aoite.Data.ExecuteParameterCollection.ToString">
            <summary> 
            返回当前查询参数集合的字符串形式。
            </summary>
        </member>
        <member name="T:Aoite.Data.ExecuteType">
            <summary>
            数据源查询的操作类型。
            </summary>
        </member>
        <member name="F:Aoite.Data.ExecuteType.NoQuery">
            <summary>
            无值查询。
            </summary>
        </member>
        <member name="F:Aoite.Data.ExecuteType.Scalar">
            <summary>
            单值查询。
            </summary>
        </member>
        <member name="F:Aoite.Data.ExecuteType.Reader">
            <summary>
            读取器查询。
            </summary>
        </member>
        <member name="F:Aoite.Data.ExecuteType.DataSet">
            <summary>
            数据集查询。
            </summary>
        </member>
        <member name="F:Aoite.Data.ExecuteType.Table">
            <summary>
            数据表查询。
            </summary>
        </member>
        <member name="T:Aoite.Data.IBuilder">
            <summary>
            定义一个 SQL 语句生成的实现。
            </summary>
        </member>
        <member name="P:Aoite.Data.IBuilder.Text">
            <summary>
            获取查询命令的 Transact-SQL 查询字符串。
            </summary>
        </member>
        <member name="P:Aoite.Data.IBuilder.Parameters">
            <summary>
            获取查询命令的参数的键值集合。
            </summary>
        </member>
        <member name="M:Aoite.Data.IBuilder.End">
            <summary>
            生成执行数据源查询与交互的执行器。
            </summary>
            <returns>执行数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:Aoite.Data.IBuilder.Execute">
            <summary>
            编译并执行当前 SQL 语句生成。
            </summary>
            <returns>数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:Aoite.Data.IBuilder.OrderBy(System.String[])">
            <summary>
            添加 ORDER BY 的字段。
            </summary>
            <param name="fields">字段的集合。</param>
            <returns> <see cref="T:Aoite.Data.ISelect"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IBuilder.OrderByDescending(System.String[])">
            <summary>
            添加 ORDER BY 倒序的字段。
            </summary>
            <param name="fields">字段的集合。</param>
            <returns> <see cref="T:Aoite.Data.ISelect"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IBuilder.GroupBy(System.String[])">
            <summary>
            添加 GROUP BY 的字段。
            </summary>
            <param name="fields">字段的集合。</param>
            <returns> <see cref="T:Aoite.Data.ISelect"/> 的实例。</returns>
        </member>
        <member name="T:Aoite.Data.IDbContext">
            <summary>
            定义一个数据源查询与交互引擎的上下文对象，一个对象创建一个数据源连接。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbContext.Id">
            <summary>
            获取当前上下文的唯一标识符。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbContext.Connection">
            <summary>
            获取当前上下文的数据库连接对象。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbContext.Transaction">
            <summary>
            获取当前上下文的数据库连接的事务对象。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbContext.Open">
            <summary>
            打开连接。在执行查询时，若数据源尚未打开则自动打开数据源。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbContext.OpenTransaction">
            <summary>
            启动数据源事务，并打开数据源连接。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbContext.OpenTransaction(System.Data.IsolationLevel)">
            <summary>
            指定事务的隔离级别，并打开数据源连接（如果没有打开）。
            </summary>
            <param name="isolationLevel">指定事务的隔离级别。</param>
        </member>
        <member name="M:Aoite.Data.IDbContext.Commit">
            <summary>
            提交数据源事务。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbContext.Rollback">
            <summary>
            从挂起状态回滚事务。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbContext.Close">
            <summary>
            关闭并释放数据源连接。
            </summary>
        </member>
        <member name="T:Aoite.Data.IDbEngine">
            <summary>
            定义数据源查询与交互引擎的方法。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngine.Provider">
            <summary>
            获取数据源查询与交互引擎的提供程序。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngine.Owner">
            <summary>
            获取当前上下文所属的交互引擎。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngine.Context">
            <summary>
            创建并返回一个 <see cref="T:Aoite.Data.IDbContext"/>。返回当前线程上下文包含的 <see cref="T:Aoite.Data.IDbContext"/> 或创建一个新的  <see cref="T:Aoite.Data.IDbContext"/>。
            <para>当释放一个 <see cref="T:Aoite.Data.IDbContext"/> 后，下一次调用获取将会重新创建上下文。</para>
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngine.ContextTransaction">
            <summary>
            创建并返回一个事务性 <see cref="T:Aoite.Data.IDbContext"/>。返回当前线程上下文包含的 <see cref="T:Aoite.Data.IDbContext"/> 或创建一个新的  <see cref="T:Aoite.Data.IDbContext"/>。
            <para>当释放一个 <see cref="T:Aoite.Data.IDbContext"/> 后，下一次调用获取将会重新创建上下文。</para>
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbEngine.Execute(Aoite.Data.ExecuteCommand)">
            <summary>
            执行指定的命令。
            </summary>
            <param name="command">执行的命令。</param>
            <returns>数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:Aoite.Data.IDbEngine.Execute(System.FormattableString)">
            <summary>
            执行指定的命令。
            </summary>
            <param name="fs">一个复合格式字符串</param>
            <returns>数据源查询与交互的执行器。</returns>
        </member>
        <member name="T:Aoite.Data.IDbEngineProvider">
            <summary>
            定义数据源查询与交互引擎的提供程序。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngineProvider.DbFactory">
            <summary>
            获取用于创建提供程序对数据源类的实现的实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngineProvider.SqlFactory">
            <summary>
            获取用生成查询命令的实现实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngineProvider.ConnectionString">
            <summary>
            获取用于当前数据源的连接字符串。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbEngineProvider.Name">
            <summary>
            获取一个值，表示当前数据提供程序的名称。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbEngineProvider.CreateConnection">
            <summary>
            创建并返回一个到数据源的连接。
            </summary>
            <returns>到数据源的连接。</returns>
        </member>
        <member name="T:Aoite.Data.IExecuteParameter">
            <summary>
            定义一个数据源交互的执行命令参数。
            </summary>
        </member>
        <member name="P:Aoite.Data.IExecuteParameter.Name">
            <summary>
            获取参数的名称。
            </summary>
        </member>
        <member name="P:Aoite.Data.IExecuteParameter.Value">
            <summary>
            获取或设置参数的值。
            </summary>
        </member>
        <member name="M:Aoite.Data.IExecuteParameter.CreateParameter(System.Data.Common.DbCommand)">
            <summary>
            指定 <see cref="T:System.Data.Common.DbCommand"/>，生成一个 <see cref="T:System.Data.Common.DbParameter"/>。
            </summary>
            <param name="command">一个 <see cref="T:System.Data.Common.DbCommand"/>。</param>
            <returns>已生成的 <see cref="T:System.Data.Common.DbParameter"/>。</returns>
        </member>
        <member name="T:Aoite.Data.IMapTo">
            <summary>
            定义一个填充器的映射目标。
            </summary>
        </member>
        <member name="M:Aoite.Data.IMapTo.To``1(``0)">
            <summary>
            设置映射目标的值。
            </summary>
            <typeparam name="TEntity">映射目标的数据类型。</typeparam>
            <param name="to">目标的值。</param>
            <returns>映射目标的值</returns>
        </member>
        <member name="T:Aoite.Data.IMapTo`1">
            <summary>
            定义一个填充器的映射目标。
            </summary>
            <typeparam name="TTo">映射目标的数据类型。</typeparam>
        </member>
        <member name="M:Aoite.Data.IMapTo`1.To(`0)">
            <summary>
            设置映射目标的值。
            </summary>
            <param name="to">目标的值。</param>
        </member>
        <member name="T:Aoite.Data.SqlCeEngineProvider">
            <summary>
            表示一个基于 Microsoft SQL Server Compact 数据源查询与交互引擎的提供程序。
            </summary>
        </member>
        <member name="P:Aoite.Data.SqlCeEngineProvider.DbFactory">
            <summary>
            获取用于创建提供程序对数据源类的实现的实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.SqlCeEngineProvider.SqlFactory">
            <summary>
            获取用生成查询命令的实现实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.SqlCeEngineProvider.Name">
            <summary>
            获取一个值，表示当前数据提供程序的名称。
            </summary>
        </member>
        <member name="M:Aoite.Data.SqlCeEngineProvider.#ctor(System.String)">
            <summary>
            指定数据库的连接字符串，初始化一个 <see cref="T:Aoite.Data.SqlCeEngineProvider"/> 类的新实例。
            </summary>
            <param name="connectionString">数据源的连接字符串。</param>
        </member>
        <member name="M:Aoite.Data.SqlCeEngineProvider.#ctor(System.String,System.String)">
            <summary>
            提供数据源和密码，初始化一个 <see cref="T:Aoite.Data.SqlCeEngineProvider"/> 类的新实例。
            </summary>
            <param name="datasource">SQL Server Compact 数据源的文件路径和名称。</param>
            <param name="password">数据源密码，最多包含 40 个字符。</param>
        </member>
        <member name="M:Aoite.Data.SqlCeEngineProvider.CreateDatabase">
            <summary>
            创建新数据源。
            </summary>
        </member>
        <member name="T:Aoite.Data.ISelect">
            <summary>
            定义一个 SELECT SQL 语句生成的实现。
            </summary>
        </member>
        <member name="M:Aoite.Data.ISelect.Select(System.String[])">
            <summary>
            添加 SELECT 的字段。
            </summary>
            <param name="fields">字段的集合。</param>
            <returns> <see cref="T:Aoite.Data.ISelect"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.From(System.String)">
            <summary>
            添加 FROM 后的 SQL 语句。
            </summary>
            <param name="fromTables">SQL 语句。</param>
            <returns> <see cref="T:Aoite.Data.ISelect"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.Parameter(System.String,System.Object)">
            <summary>
            添加一个参数。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.Where">
            <summary>
            进入 WHERE SQL 实现。
            </summary>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.Where(System.String)">
            <summary>
            进入 WHERE SQL 实现。
            </summary>
            <param name="expression">逻辑表达式（如：“t1.x IS NULL”）。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.WhereValue(System.String,System.Object,System.String)">
            <summary>
            进入 WHERE SQL 实现。
            </summary>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <param name="op">比较运算符。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.WhereValue(System.String,System.String,System.Object,System.String)">
            <summary>
            进入 WHERE SQL 实现。
            </summary>
            <param name="tn">表名的别名。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <param name="op">比较运算符。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.Where(System.String,System.String,System.Object)">
            <summary>
            进入 WHERE SQL 实现。
            </summary>
            <param name="expression">逻辑表达式（如：“t1.x=@x”）。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.Where``1(System.String,System.String,``0[])">
            <summary>
            进入 WHERE SQL 实现，添加表达式“(fieldName=@namePrefix0 OR fieldName=@namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.WhereIn``1(System.String,System.String,``0[])">
            <summary>
            进入 WHERE SQL 实现，添加表达式“fieldName IN (@namePrefix0, @namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.ISelect.WhereNotIn``1(System.String,System.String,``0[])">
            <summary>
            进入 WHERE SQL 实现，添加表达式“fieldName NOT IN (@namePrefix0, @namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="T:Aoite.Data.IWhere">
            <summary>
            一个 WHERE SQL 语句生成的实现。
            </summary>
        </member>
        <member name="M:Aoite.Data.IWhere.Sql(System.String)">
            <summary>
            添加自定义 SQL 语句。
            </summary>
            <param name="text">SQL 语句内容。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.Parameter(System.String,System.Object)">
            <summary>
            添加一个参数。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.And">
            <summary>
            添加一个 AND 语句。
            </summary>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.Or">
            <summary>
            添加一个 OR 语句。
            </summary>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.BeginGroup">
            <summary>
            添加一个开始括号，下一个 AND 或 OR 将会被忽略。
            </summary>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.BeginGroup(System.String,System.String,System.Object)">
            <summary>
            添加一个开始括号，并添加 SQL 表达式。
            </summary>
            <param name="expression">逻辑表达式（如：“t1.x=@x”）。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.EndGroup">
            <summary>
            添加一个结束括号。
            </summary>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.And(System.String)">
            <summary>
            添加 AND 表达式。
            </summary>
            <param name="expression">逻辑表达式（如：“t1.x IS NULL”）。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.And(System.String,System.String,System.Object)">
            <summary>
            添加 AND 表达式。
            </summary>
            <param name="expression">逻辑表达式（如：“t1.x=@x”）。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.AndValue(System.String,System.Object,System.String)">
            <summary>
            生成 AND 表达式（如：“name=@name”）。
            </summary>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <param name="op">比较运算符。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.AndValue(System.String,System.String,System.Object,System.String)">
            <summary>
            生成 AND 表达式（如：“a.name=@name”）。
            </summary>
            <param name="tn">表名的别名。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <param name="op">比较运算符。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.Or(System.String)">
            <summary>
            添加 OR 表达式。
            </summary>
            <param name="expression">逻辑表达式（如：“t1.x IS NULL”）。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.Or(System.String,System.String,System.Object)">
            <summary>
            添加 OR 表达式。
            </summary>
            <param name="expression">逻辑表达式（如：“t1.x=@x”）。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.OrValue(System.String,System.Object,System.String)">
            <summary>
            添加 OR 表达式（如：“name=@name”）。
            </summary>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <param name="op">比较运算符。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.OrValue(System.String,System.String,System.Object,System.String)">
            <summary>
            添加 OR 表达式（如：“a.name=@name”）。
            </summary>
            <param name="tn">表名的别名。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <param name="op">比较运算符。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.And``1(System.String,System.String,``0[])">
            <summary>
            添加 AND 表达式“AND (fieldName=@namePrefix0 OR fieldName=@namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.Or``1(System.String,System.String,``0[])">
            <summary>
            添加 OR 表达式“OR (fieldName=@namePrefix0 OR fieldName=@namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.AndIn``1(System.String,System.String,``0[])">
            <summary>
            添加 AND 表达式“AND fieldName IN (@namePrefix0, @namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.AndNotIn``1(System.String,System.String,``0[])">
            <summary>
            添加 AND 表达式“AND fieldName NOT IN (@namePrefix0, @namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.OrIn``1(System.String,System.String,``0[])">
            <summary>
            添加 OR 表达式“OR fieldName IN (@namePrefix0, @namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="M:Aoite.Data.IWhere.OrNotIn``1(System.String,System.String,``0[])">
            <summary>
            添加 OR 表达式“OR fieldName NOT IN (@namePrefix0, @namePrefix1)”。
            </summary>
            <typeparam name="T">要枚举的实例的类型。</typeparam>
            <param name="fieldName">字段的名称。</param>
            <param name="namePrefix">参数的名称前缀。</param>
            <param name="values">参数值集合。</param>
            <returns> <see cref="T:Aoite.Data.IWhere"/> 的实例。</returns>
        </member>
        <member name="T:Aoite.Data.MsCeTestManager">
            <summary>
            基于 Miscsoft SQL Server Compact 的数据源单元测试管理器。
            </summary>
        </member>
        <member name="P:Aoite.Data.MsCeTestManager.DatabasePath">
            <summary>
            获取数据源路径。
            </summary>
        </member>
        <member name="M:Aoite.Data.MsCeTestManager.#ctor">
            <summary>
            随机的数据源路径，初始化一个 <see cref="T:Aoite.Data.MsCeTestManager"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.MsCeTestManager.#ctor(System.String)">
            <summary>
            随机的数据源路径，初始化一个 <see cref="T:Aoite.Data.MsCeTestManager"/> 类的新实例。
            </summary>
            <param name="databasePath">数据源路径。</param>
        </member>
        <member name="M:Aoite.Data.MsCeTestManager.ReplaceVarchar(System.String)">
            <summary>
            由于 Miscsoft SQL Server Compact 不支持 varchar 数据类型和 MAX 长度，此方法将所有 varchar 转换为 nvarchar 和 2000 长度。
            </summary>
            <param name="sql">SQL 脚本。</param>
            <returns>新的 SQL 脚本。</returns>
        </member>
        <member name="M:Aoite.Data.MsCeTestManager.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Aoite.Data.MsSqlTestManager">
            <summary>
            基于 Miscsoft SQL Server 的数据源单元测试管理器。
            </summary>
        </member>
        <member name="P:Aoite.Data.MsSqlTestManager.DatabaseName">
            <summary>
            获取数据源的名称。
            </summary>
        </member>
        <member name="P:Aoite.Data.MsSqlTestManager.DbOwnerUser">
            <summary>
            获取可读写的用户名称。
            </summary>
        </member>
        <member name="M:Aoite.Data.MsSqlTestManager.#ctor(System.String)">
            <summary>
            提供数据库地址，初始化一个 <see cref="T:Aoite.Data.MsSqlTestManager"/> 类的新实例。
            </summary>
            <param name="server">数据库地址。</param>
        </member>
        <member name="M:Aoite.Data.MsSqlTestManager.#ctor(System.String,System.String)">
            <summary>
            提供数据源连接字符串，初始化一个 <see cref="T:Aoite.Data.MsSqlTestManager"/> 类的新实例。
            </summary>
            <param name="connectionString">数据源连接字符串。</param>
            <param name="server">服务器地址。</param>
        </member>
        <member name="M:Aoite.Data.MsSqlTestManager.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Aoite.Data.NamePoint">
            <summary>
            定义在转义的名称位置。
            </summary>
        </member>
        <member name="F:Aoite.Data.NamePoint.Table">
            <summary>
            表示一个表的名称。
            </summary>
        </member>
        <member name="F:Aoite.Data.NamePoint.Field">
            <summary>
            表示一个字段的名称 <code>FieldName = ValueName</code>。
            </summary>
        </member>
        <member name="F:Aoite.Data.NamePoint.Value">
            <summary>
            表示一个查询命令字符串的参数值名称 <code>FieldName = ValueName</code>。
            </summary>
        </member>
        <member name="F:Aoite.Data.NamePoint.Parameter">
            <summary>
            表示一个查询命令参数集合的参数名称 <code>Parameters.Add(Parameter, Value)</code>。
            </summary>
        </member>
        <member name="T:Aoite.Data.SqlEngineProvider">
            <summary>
            表示一个基于 Microsoft SQL Server 数据源查询与交互引擎的提供程序。
            </summary>
        </member>
        <member name="P:Aoite.Data.SqlEngineProvider.DbFactory">
            <summary>
            获取用于创建提供程序对数据源类的实现的实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.SqlEngineProvider.SqlFactory">
            <summary>
            获取用生成查询命令的实现实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.SqlEngineProvider.Name">
            <summary>
            获取一个值，表示当前数据提供程序的名称。
            </summary>
        </member>
        <member name="M:Aoite.Data.SqlEngineProvider.#ctor(System.String)">
            <summary>
            指定数据库的连接字符串，初始化一个 <see cref="T:Aoite.Data.SqlEngineProvider"/> 类的新实例。
            </summary>
            <param name="connectionString">数据源的连接字符串。</param>
        </member>
        <member name="M:Aoite.Data.SqlEngineProvider.#ctor(System.String,System.String)">
            <summary>
            提供数据库连接信息，初始化一个 <see cref="T:Aoite.Data.SqlEngineProvider"/> 类的新实例。
            </summary>
            <param name="dataSource">数据源。</param>
            <param name="initialCatalog">数据源。</param>
        </member>
        <member name="M:Aoite.Data.SqlEngineProvider.#ctor(System.String,System.String,System.Int32)">
            <summary>
            提供数据库连接信息，初始化一个 <see cref="T:Aoite.Data.SqlEngineProvider"/> 类的新实例。
            </summary>
            <param name="dataSource">数据源。</param>
            <param name="initialCatalog">数据源。</param>
            <param name="connectTimeout">指示连接超时时限。</param>
        </member>
        <member name="M:Aoite.Data.SqlEngineProvider.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            提供数据库连接信息，初始化一个 <see cref="T:Aoite.Data.SqlEngineProvider"/> 类的新实例。
            </summary>
            <param name="dataSource">数据源。</param>
            <param name="initialCatalog">数据源。</param>
            <param name="userId">登录账户。</param>
            <param name="passwrod">登录密码。</param>
        </member>
        <member name="M:Aoite.Data.SqlEngineProvider.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            提供数据库连接信息，初始化一个 <see cref="T:Aoite.Data.SqlEngineProvider"/> 类的新实例。
            </summary>
            <param name="dataSource">数据源。</param>
            <param name="initialCatalog">数据源。</param>
            <param name="userId">登录账户。</param>
            <param name="passwrod">登录密码。</param>
            <param name="connectTimeout">指示连接超时时限。</param>
        </member>
        <member name="T:Aoite.Data.SqlScriptsManager">
            <summary>
            表示一个 SQL 脚本管理工具。
            </summary>
        </member>
        <member name="M:Aoite.Data.SqlScriptsManager.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.SqlScriptsManager"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.SqlScriptsManager.ParseFolder(System.String,System.String)">
            <summary>
            从指定的目录解析所有脚本文件。
            </summary>
            <param name="folder">要搜索的目录。</param>
            <param name="searchPattern">要与 <paramref name="folder"/> 中的文件名匹配的搜索字符串。此参数不能以两个句点（“..”）结束，不能在 <see cref="F:System.IO.Path.DirectorySeparatorChar"/> 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（“..”），也不能包含 <see cref="F:System.IO.Path.InvalidPathChars"/> 中的任何字符。</param>
        </member>
        <member name="M:Aoite.Data.SqlScriptsManager.ParsePath(System.String)">
            <summary>
            从指定的 SQL 文件解析脚本。
            </summary>
            <param name="path">SQL 文件路径。</param>
        </member>
        <member name="M:Aoite.Data.SqlScriptsManager.ParseContent(System.String)">
            <summary>
            从指定的 SQL 文本解析脚本。
            </summary>
            <param name="content">SQL 文本。</param>
        </member>
        <member name="M:Aoite.Data.SqlScriptsManager.GetScript``1(``0)">
            <summary>
            获取指定键名的脚本。
            </summary>
            <typeparam name="TKey">键的数据类型。</typeparam>
            <param name="key">脚本的键名。</param>
            <returns>脚本。</returns>
        </member>
        <member name="M:Aoite.Data.SqlScriptsManager.GetScript(System.String)">
            <summary>
            获取指定键名的脚本。
            </summary>
            <param name="key">脚本的键名。</param>
            <returns>脚本。</returns>
        </member>
        <member name="T:Aoite.Data.TableAttribute">
            <summary>
            表示一张表的特性。
            </summary>
        </member>
        <member name="M:Aoite.Data.TableAttribute.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.TableAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Data.TableAttribute.#ctor(System.String)">
            <summary>
            指定名称，初始化一个 <see cref="T:Aoite.Data.TableAttribute"/> 类的新实例。
            </summary>
            <param name="name">名称。</param>
        </member>
        <member name="T:Aoite.Data.TestManagerBase">
            <summary>
            表示数据源测试管理器。
            </summary>
        </member>
        <member name="M:Aoite.Data.TestManagerBase.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Data.TestManagerBase"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.TestManagerBase.Scripts">
            <summary>
            获取脚本管理工具。
            </summary>
        </member>
        <member name="P:Aoite.Data.TestManagerBase.Engine">
            <summary>
            获取数据源引擎。
            </summary>
        </member>
        <member name="M:Aoite.Data.TestManagerBase.Execute``1(``0)">
            <summary>
            执行指定键名的脚本。
            </summary>
            <typeparam name="TKey">键的数据类型。</typeparam>
            <param name="key">脚本的键名。</param>
            <returns>当前实例。</returns>
        </member>
        <member name="M:Aoite.Data.TestManagerBase.Execute(System.String[])">
            <summary>
            批量执行指定键名的脚本。
            </summary>
            <param name="keys">脚本的键名列表。</param>
            <returns>当前实例。</returns>
        </member>
        <member name="P:Aoite.Data.TestManagerBase.ScriptKeys">
            <summary>
            获取所有的脚本键名。
            </summary>
        </member>
        <member name="M:Aoite.Data.TestManagerBase.GetScript``1(``0)">
            <summary>
            获取指定键名的脚本。
            </summary>
            <typeparam name="TKey">键的数据类型。</typeparam>
            <param name="key">脚本的键名。</param>
            <returns>脚本。</returns>
        </member>
        <member name="M:Aoite.Data.TestManagerBase.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Aoite.Data.IDbExecutor">
            <summary>
            定义一个数据源查询与交互的执行器。
            </summary>
        </member>
        <member name="E:Aoite.Data.IDbExecutor.Executing">
            <summary>
            在引擎执行命令时发生。
            </summary>
        </member>
        <member name="E:Aoite.Data.IDbExecutor.Executed">
            <summary>
            在引擎执行命令后发生。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbExecutor.Engine">
            <summary>
            获取数据源查询与交互引擎的实例。
            </summary>
        </member>
        <member name="P:Aoite.Data.IDbExecutor.Command">
            <summary>
            获取执行的命令。
            </summary>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.SubExecuting(Aoite.Data.ExecutingEventHandler)">
            <summary>
            订阅命令执行前的事件。
            </summary>
            <param name="callback">事件的回调函数。</param>
            <returns>当前 <see cref="T:Aoite.Data.IDbExecutor"/></returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.SubExecuted(Aoite.Data.ExecutedEventHandler)">
            <summary>
            订阅命令执行后的事件。
            </summary>
            <param name="callback">事件的回调函数。</param>
            <returns>当前 <see cref="T:Aoite.Data.IDbExecutor"/></returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToNonQuery">
            <summary>
            执行查询命令，并返回受影响的行数。
            </summary>
            <returns>受影响的行数。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToScalar">
            <summary>
            执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <returns>结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToScalar``1">
            <summary>
            指定值的数据类型，执行查询命令，并返回查询结果集中第一行的第一列。
            </summary>
            <typeparam name="TValue">值的数据类型。</typeparam>
            <returns>具备强类型的结果集中第一行的第一列。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToDataSet">
            <summary>
            执行查询命令，并返回数据集。
            </summary>
            <returns>数据集。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToDataSet``1">
            <summary>
            执行查询命令，并返回自定义的数据集。
            </summary>
            <typeparam name="TDataSet">自定义的数据集类型。</typeparam>
            <returns>具备强类型的一个数据集。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToTable">
            <summary>
            执行查询命令，并返回数据集。
            </summary>
            <returns>一张表。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToTable(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回数据集。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToReader(Aoite.Data.ExecuteReaderHandler)">
            <summary>
            执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <param name="callback">给定的读取器委托。</param>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToReader``1(Aoite.Data.ExecuteReaderHandler{``0})">
            <summary>
            执行查询命令，并执行给定的读取器的回调函数。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="callback">给定的读取器委托。</param>
            <returns>回调结果的值。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToEntities">
            <summary>
            执行查询命令，并返回匿名实体的集合。
            </summary>
            <returns>匿名实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToEntities(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的匿名实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToEntities``1">
            <summary>
            执行查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToEntities``1(System.Int32,System.Int32)">
            <summary>
            执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToEntity">
            <summary>
            执行查询命令，并返回匿名实体。
            </summary>
            <returns>匿名实体。</returns>
        </member>
        <member name="M:Aoite.Data.IDbExecutor.ToEntity``1">
            <summary>
            执行查询命令，并返回实体。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <returns>实体。</returns>
        </member>
        <member name="T:Aoite.LevelDB.CompressionLevel">
            <summary>
            定义数据库压缩的方式。
            </summary>
        </member>
        <member name="F:Aoite.LevelDB.CompressionLevel.No">
            <summary>
            表示采用无压缩方式。
            </summary>
        </member>
        <member name="F:Aoite.LevelDB.CompressionLevel.Snappy">
            <summary>
            表示轻快压缩方式。
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.Iterator">
            <summary>
            表示一个键值迭代器。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.IsValid">
            <summary>
            获取一个值，表示当前迭代器位置的是否包含有效的键值数据。
            </summary>
            <returns>有效返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.SeekToFirst">
            <summary>
            设置迭代器到第一项位置。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.SeekToLast">
            <summary>
            设置迭代器到最后一项位置。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.Seek(System.BinaryValue)">
            <summary>
            设置迭代器到指定键的位置。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.Next">
            <summary>
            移动迭代器到下一位置。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.Prev">
            <summary>
            移动迭代器到上一位置。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.GetKey">
            <summary>
            获取当前的键。
            </summary>
            <returns>返回一个的键。</returns>
        </member>
        <member name="M:Aoite.LevelDB.Iterator.GetValue">
            <summary>
            获取当前的字符串值。
            <returns>返回一个字符串的值。</returns>
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.LDB">
            <summary>
            表示一个数据库。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.LDB.DbFolder">
            <summary>
            获取数据库的目录。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.LDB.#ctor(System.String)">
            <summary>
            指定数据库目录，初始化一个 <see cref="T:Aoite.LevelDB.LDB"/> 类的新实例。
            </summary>
            <param name="dbFolder">数据库的目录。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.#ctor(System.String,Aoite.LevelDB.Options)">
            <summary>
            指定数据库目录和选项，初始化一个 <see cref="T:Aoite.LevelDB.LDB"/> 类的新实例。
            </summary>
            <param name="dbFolder">数据库的目录。</param>
            <param name="options">数据库的选项。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.GetHashCode">
            <summary>
            返回数据库的目录的哈希代码。
            </summary>
            <returns>32 位带符号整数哈希代码。</returns>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Repair(System.String)">
            <summary>
            修复指定目录的数据库。
            </summary>
            <param name="dbFolder">数据库的目录。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Repair(System.String,Aoite.LevelDB.Options)">
            <summary>
            修复指定目录的数据库。
            </summary>
            <param name="dbFolder">数据库的目录。</param>
            <param name="options">数据库的选项。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Destroy(System.String)">
            <summary>
            摧毁指定目录的数据库。
            </summary>
            <param name="dbFolder">数据库的目录。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Destroy(System.String,Aoite.LevelDB.Options)">
            <summary>
            摧毁指定目录的数据库。
            </summary>
            <param name="dbFolder">数据库的目录。</param>
            <param name="options">数据库的选项。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Set(System.BinaryValue,System.BinaryValue,System.Boolean)">
            <summary>
            设置指定键的值。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <param name="sync">指示是否同步操作。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Remove(System.BinaryValue,System.Boolean)">
            <summary>
            移除指定键。
            </summary>
            <param name="key">键。</param>
            <param name="sync">指示是否同步操作。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Write(Aoite.LevelDB.WriteBatch,System.Boolean)">
            <summary>
            写入批量的操作。
            </summary>
            <param name="batch">批量的操作。</param>
            <param name="sync">指示是否同步操作。</param>
        </member>
        <member name="M:Aoite.LevelDB.LDB.Get(System.BinaryValue,Aoite.LevelDB.ReadOptions)">
            <summary>
            获取指定键的值。
            </summary>
            <param name="key">键。</param>
            <param name="options">读的选项。</param>
            <returns>返回一个值，如果值不存在则返回 null 值。</returns>
        </member>
        <member name="M:Aoite.LevelDB.LDB.CreateIterator">
            <summary>
            创建一个数据库迭代器。
            </summary>
            <remarks>返回数据库迭代器。</remarks>
        </member>
        <member name="M:Aoite.LevelDB.LDB.CreateIterator(Aoite.LevelDB.ReadOptions)">
            <summary>
            创建一个数据库迭代器。
            </summary>
            <param name="options">读的选项。</param>
            <remarks>返回数据库迭代器。</remarks>
        </member>
        <member name="M:Aoite.LevelDB.LDB.CreateSnapshot">
            <summary>
            创建数据库快照，可用于快速读取数据库最新的数据。
            </summary>
            <returns>返回一个快照。</returns>
        </member>
        <member name="M:Aoite.LevelDB.LDB.PropertyValue(System.String)">
            <summary>
            获取数据库属性。
            </summary>
            <param name="name">属性名称。</param>
            <returns>一个属性的值。</returns>
        </member>
        <member name="M:Aoite.LevelDB.LDB.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.LevelDBException">
            <summary>
            表示一个数据库异常。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.LevelDBException.Check(System.IntPtr)">
            <summary>
            检查指定的异常句柄。如果存在异常则抛出异常。
            </summary>
            <param name="error">异常句柄。</param>
        </member>
        <member name="T:Aoite.LevelDB.LevelDBHandle">
            <summary>
            表示一个 LevelDB 的句柄基类。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.LevelDBHandle.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.LevelDB.LevelDBHandle"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.LevelDBHandle.DisposeUnmanaged">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.Cache">
            <summary>
            表示一个提供数据库的读取高速缓存。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.Cache.#ctor(System.Int64)">
            <summary>
            初始化一个 <see cref="T:Aoite.LevelDB.Cache"/> 类的新实例。
            </summary>
            <param name="capacity">缓存的容量。</param>
        </member>
        <member name="T:Aoite.LevelDB.Env">
            <summary>
            A default environment to access operating system functionality like 
            the filesystem etc of the current operating system.
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.WriteOptions">
            <summary>
            Options that control write operations.
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.Options">
            <summary>
            表示一个数据库选项。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.CreateIfMissing">
            <summary>
            设置或获取一个值，指示当数据库不存在时，是否自动创建。默认为 false。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.ErrorIfExists">
            <summary>
            设置或获取一个值，指示数据库存在时是否抛出异常。默认为 false。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.ParanoidChecks">
            <summary>
            设置或获取一个值，指示是否开启数据库强制性检查。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.WriteBufferSize">
            <summary>
            设置或获取数据库写的缓存大小。默认为 4MB。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.MaxOpenFiles">
            <summary>
            设置或获取打开数据库文件的数量（每个文件约 2MB）。默认为 1000。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.BlockSize">
            <summary>
            设置或获取数据包大小。此参数可以动态改变。默认为 4KB。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.CacheSize">
            <summary>
            设置或获取缓存的容量。默认为 8MB。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.RestartInterval">
             <summary>
             Number of keys between restart points for delta encoding of keys.
             This parameter can be changed dynamically.  
             Most clients should leave this parameter alone.
            
             Default: 16
             </summary>
        </member>
        <member name="P:Aoite.LevelDB.Options.CompressionLevel">
            <summary>
            设置或获取一个值，指示数据库压缩的方式。默认为 <see cref="F:Aoite.LevelDB.CompressionLevel.Snappy"/>。压缩大概可以节省 1/3~1/2 的磁盘容量。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.Options.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.LevelDB.Options"/> 类的新实例。
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.ReadOptions">
            <summary>
            表示一个读取的配置。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.ReadOptions.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.LevelDB.ReadOptions"/> 类的新实例。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.ReadOptions.VerifyCheckSums">
            <summary>
            设置或获取一个值，指示是否启用数据校验。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.ReadOptions.FillCache">
            <summary>
            设置或获取一个值，指示是否将数据缓存到内存中。
            </summary>
        </member>
        <member name="P:Aoite.LevelDB.ReadOptions.Snapshot">
            <summary>
            设置或获取快照。
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.Snapshot">
            <summary>
            表示一个数据库快照。
            </summary>
        </member>
        <member name="T:Aoite.LevelDB.WriteBatch">
            <summary>
            表示一个批量的写操作。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.WriteBatch.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.LevelDB.WriteBatch" /> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.WriteBatch.Clear">
            <summary>
            清空所有批量操作。
            </summary>
        </member>
        <member name="M:Aoite.LevelDB.WriteBatch.Set(System.BinaryValue,System.BinaryValue)">
            <summary>
            设置指定键的值。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Aoite.LevelDB.WriteBatch.Remove(System.BinaryValue)">
            <summary>
            删除指定键。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:Aoite.LevelDB.WriteBatch.Iterate(System.IntPtr,System.Action{System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr},System.Action{System.IntPtr,System.IntPtr,System.IntPtr})">
            <summary>
            Support for iterating over a batch.
            </summary>
        </member>
        <member name="T:Aoite.Serialization.Json.JSerializer">
            <summary>
            表示一个高效的 Json.NET 应使用的序列化和反序列化。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.#ctor">
            <summary>
            初始化不具有类型解析程序的 <see cref="T:Aoite.Serialization.Json.JSerializer"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.#ctor(Aoite.Serialization.Json.JTypeResolver)">
            <summary>
            初始化具有自定义类型解析程序的 <see cref="T:Aoite.Serialization.Json.JSerializer"/> 类的新实例。
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="P:Aoite.Serialization.Json.JSerializer.EnabledCamelCaseName">
            <summary>
            获取或设置一个值，表示是否启用名称智能小写模式。默认为 false，表示使用原来的名称。
            </summary>
        </member>
        <member name="P:Aoite.Serialization.Json.JSerializer.MaxJsonLength">
            <summary>
            获取或设置 <see cref="T:Aoite.Serialization.Json.JSerializer"/> 类接受的 JSON 字符串的最大长度。
            </summary>
        </member>
        <member name="P:Aoite.Serialization.Json.JSerializer.RecursionLimit">
            <summary>
            获取或设置用于约束要处理的对象级别的数量的限制。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{Aoite.Serialization.Json.JConverter})">
            <summary>
            使用 <see cref="T:Aoite.Serialization.Json.JSerializer"/> 实例注册自定义转换器。
            </summary>
            <param name="converters">包含要注册的自定义转换器的数组。</param>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.DeserializeObject(System.String)">
            <summary>
            将指定的 JSON 字符串转换为对象图。
            </summary>
            <param name="input">要进行反序列化的 JSON 字符串。</param>
            <returns>反序列化的对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.Deserialize``1(System.String)">
            <summary>
             将指定的 JSON 字符串转换为 T 类型的对象。
            </summary>
            <typeparam name="T">所生成对象的类型。</typeparam>
            <param name="input">要进行反序列化的 JSON 字符串。</param>
            <returns>反序列化的对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.Deserialize(System.String,System.Type)">
            <summary>
             将 JSON 格式字符串转换为指定类型的对象。
            </summary>
            <param name="input">要反序列化的 JSON 字符串。</param>
            <param name="targetType">所生成对象的类型。</param>
            <returns>反序列化的对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.ConvertToType``1(System.Object)">
            <summary>
            将给定对象转换为指定类型。
            </summary>
            <typeparam name="T"><paramref name="obj"/> 将转换成的类型。</typeparam>
            <param name="obj">要转换的对象</param>
            <returns>已转换成目标类型的对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.ConvertToType(System.Object,System.Type)">
            <summary>
            将指定的对象转换成指定的类型。
            </summary>
            <param name="obj">要转换的对象。</param>
            <param name="targetType">对象要转换为的类型。</param>
            <returns>序列化的 JSON 字符串。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.Serialize(System.Object)">
            <summary>
            将对象转换为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化的 JSON 字符串。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JSerializer.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            序列化对象并将生成的 JSON 字符串写入指定的 <see cref="T:System.Text.StringBuilder"/> 对象。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <param name="output">用于写入 JSON 字符串的 <see cref="T:System.Text.StringBuilder"/> 对象。</param>
        </member>
        <member name="T:Aoite.Serialization.Json.JConverter">
            <summary>
            为自定义类型转换器提供抽象基类。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.Json.JConverter.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.Json.JConverter"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.Json.JConverter.IsSupported(System.Type)">
            <summary>
            当在派生类中重写时，判定给定的类型是否支持。
            </summary>
            <param name="type">判断的类型。</param>
            <returns>支持返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,Aoite.Serialization.Json.JSerializer)">
            <summary>
            当在派生类中重写时，将所提供的字典转换为指定类型的对象。
            </summary>
            <param name="dictionary">作为名称/值对存储的属性数据的 <see cref="T:System.Collections.Generic.IDictionary`2"/> 实例。</param>
            <param name="type">所生成对象的类型。</param>
            <param name="serializer"><see cref="T:Aoite.Serialization.Json.JSerializer"/> 实例。</param>
            <returns>反序列化的对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JConverter.Serialize(System.Object,Aoite.Serialization.Json.JSerializer)">
            <summary>
            当在派生类中重写时，生成名称/值对的字典。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <param name="serializer">负责序列化的对象。</param>
            <returns>包含表示该对象数据的键/值对。</returns>
        </member>
        <member name="T:Aoite.Serialization.Json.JTypeResolver">
            <summary>
            提供用于实现自定义类型解析器的抽象基类。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.Json.JTypeResolver.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.Json.JTypeResolver"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.Json.JTypeResolver.ResolveType(System.String)">
            <summary>
            当在派生类中重写时，返回与指定类型名称相关联的 <see cref="T:System.Type"/> 对象。
            </summary>
            <param name="id">托管类型的名称。</param>
            <returns>与指定类型名称相关联的 <see cref="T:System.Type"/> 对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.Json.JTypeResolver.ResolveTypeId(System.Type)">
            <summary>
            当在派生类中重写时，返回指定的 <see cref="T:System.Type"/> 对象的类型名称。
            </summary>
            <param name="type">要解析的托管类型。</param>
            <returns>指定托管类型的名称。</returns>
        </member>
        <member name="T:Aoite.Serialization.BinarySerializer">
            <summary>
            表示二进制的序列化器。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.BinarySerializer.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.BinarySerializer"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.BinarySerializer.#ctor(System.Text.Encoding)">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.BinarySerializer"/> 类的新实例。
            </summary>
            <param name="encoding">字符编码。</param>
        </member>
        <member name="E:Aoite.Serialization.BinarySerializer.CreateSerializer">
            <summary> 
            创建序列化器。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.BinarySerializer.GetSerializer">
            <summary>
            获取序列化器。
            </summary>
            <returns>序列化器。</returns>
        </member>
        <member name="M:Aoite.Serialization.BinarySerializer.Reading(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.BinarySerializer.Writing``1(System.IO.Stream,``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">可序列化的流。</param>
            <param name="data">可序列化的对象。</param>
        </member>
        <member name="T:Aoite.Serialization.ObjectFormatterBase">
            <summary>
            表示一个对象序列化的基类。
            </summary>
        </member>
        <member name="F:Aoite.Serialization.ObjectFormatterBase.Stream">
            <summary>
            获取正在序列化的流。
            </summary>
        </member>
        <member name="F:Aoite.Serialization.ObjectFormatterBase.Encoding">
            <summary>
            获取序列化的编码。
            </summary>
        </member>
        <member name="F:Aoite.Serialization.ObjectFormatterBase.ReferenceContainer">
            <summary>
            获取引用的对象集合。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.ObjectFormatterBase.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.ObjectFormatterBase" />类的新实例。"/>
            </summary>
            <param name="stream">序列化的流。</param>
            <param name="encoding">序列化的编码。</param>
        </member>
        <member name="M:Aoite.Serialization.ObjectFormatterBase.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Aoite.Serialization.ICustomSerializable">
            <summary>
            定义一个可自定义序列化的功能。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.ICustomSerializable.Deserialize(Aoite.Serialization.ObjectReader)">
            <summary>
            反序列化指定字节数组。
            </summary>
            <param name="reader">反序列化读取器。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:Aoite.Serialization.ICustomSerializable.Serialize(Aoite.Serialization.ObjectWriter,System.Object)">
            <summary>
            序列化指定对象。
            </summary>
            <param name="writer">序列化写入器。</param>
            <param name="value">对象。</param>
        </member>
        <member name="T:Aoite.Serialization.ObjectReader">
            <summary>
            表示一个提供反序列化对象的功能。
            </summary>
        </member>
        <member name="F:Aoite.Serialization.ObjectReader.DefaultBuffer">
            <summary>
            提供一个默认的 16 位的缓冲区。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.ObjectReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            初始化一个类 <see cref="T:Aoite.Serialization.ObjectReader"/> 的新实例。
            </summary>
            <param name="stream">序列化的流。</param>
            <param name="encoding">序列化的编码。</param>
        </member>
        <member name="M:Aoite.Serialization.ObjectReader.Deserialize">
            <summary>
            反序列化下一个对象。
            </summary>
            <returns>序列化的对象。</returns>
        </member>
        <member name="T:Aoite.Serialization.ObjectWriter">
            <summary>
            表示一个提供序列化对象的功能。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.ObjectWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            初始化一个类 <see cref="T:Aoite.Serialization.ObjectWriter"/> 的新实例。
            </summary>
            <param name="stream">序列化的流。</param>
            <param name="encoding">序列化的编码。</param>
        </member>
        <member name="M:Aoite.Serialization.ObjectWriter.Serialize(System.Object,System.Reflection.MemberInfo)">
            <summary>
            序列化指定的对象。
            </summary>
            <param name="value">序列化的对象。</param>
            <param name="member">序列化的对象成员。</param>
        </member>
        <member name="T:Aoite.Serialization.SerializableUsageAttribute">
            <summary>
            表示一个提供可自定义序列化的功能特性。
            </summary>
        </member>
        <member name="P:Aoite.Serialization.SerializableUsageAttribute.FormatterType">
            <summary>
            获取可自定义序列化的功能实现类型。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.SerializableUsageAttribute.#ctor(System.Type)">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.SerializableUsageAttribute"/> 类的新实例。
            </summary>
            <param name="formatterType">可自定义序列化的功能实现类型。</param>
        </member>
        <member name="T:Aoite.Serialization.JsonSerializer">
            <summary>
            表示一个基于 JSON 的序列化器。
            </summary>
        </member>
        <member name="P:Aoite.Serialization.JsonSerializer.Native">
            <summary>
            获取原生的序列化器。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.JsonSerializer"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.#ctor(Aoite.Serialization.Json.JSerializer)">
            <summary>
            提供一个 <see cref="T:Aoite.Serialization.Json.JSerializer"/>，初始化一个 <see cref="T:Aoite.Serialization.JsonSerializer"/> 类的新实例。
            </summary>
            <param name="JSerializer"></param>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.Reading(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.Reading``1(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.Writing``1(System.IO.Stream,``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">可序列化的流。</param>
            <param name="data">可序列化的对象。</param>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.FastRead(System.String)">
            <summary>
            快速反序列化 JSON 字符串。
            </summary>
            <param name="json">JSON 字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.FastRead``1(System.String)">
            <summary>
            快速反序列化 JSON 字符串。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="json">JSON 字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.FastRead(System.String,System.Type)">
            <summary>
            快速反序列化 JSON 字符串。
            </summary>
            <param name="json">JSON 字符串。</param>
            <param name="type">可序列化对象的类型。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:Aoite.Serialization.JsonSerializer.FastWrite``1(``0)">
            <summary>
            快速序列化 JSON 对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="data">可序列化的对象。</param>
            <returns> JSON 字符串。</returns>
        </member>
        <member name="T:Aoite.Serialization.QuicklySerializer">
            <summary>
            表示一个快速的二进制序列化器。
            </summary>
        </member>
        <member name="F:Aoite.Serialization.QuicklySerializer.CustomAttributes">
            <summary>
            获取或设置动态的自定义序列化类型映射。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.QuicklySerializer.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.QuicklySerializer"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.QuicklySerializer.#ctor(System.Text.Encoding)">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.QuicklySerializer"/> 类的新实例。
            </summary>
            <param name="encoding">字符编码。</param>
        </member>
        <member name="M:Aoite.Serialization.QuicklySerializer.Reading(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.QuicklySerializer.Writing``1(System.IO.Stream,``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">可序列化的流。</param>
            <param name="data">可序列化的对象。</param>
        </member>
        <member name="T:Aoite.Serialization.XmlSerializer">
            <summary>
            表示 Xml 的序列化器。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.XmlSerializer.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.XmlSerializer"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Serialization.XmlSerializer.#ctor(System.Text.Encoding)">
            <summary>
            初始化一个 <see cref="T:Aoite.Serialization.XmlSerializer"/> 类的新实例。
            </summary>
            <param name="encoding">字符编码。</param>
        </member>
        <member name="M:Aoite.Serialization.XmlSerializer.GetSerializer(System.Type)">
            <summary>
            获取序列化器。
            </summary>
            <returns>序列化器。</returns>
        </member>
        <member name="M:Aoite.Serialization.XmlSerializer.Reading``1(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.XmlSerializer.Reading(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:Aoite.Serialization.XmlSerializer.Writing``1(System.IO.Stream,``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">可序列化的流。</param>
            <param name="data">可序列化的对象。</param>
        </member>
        <member name="T:Aoite.DI.ICallSite">
            <summary>
            定义一个服务调用点。
            </summary>
        </member>
        <member name="P:Aoite.DI.ICallSite.Lifetime">
            <summary>
            获取服务的生命周期。
            </summary>
        </member>
        <member name="M:Aoite.DI.ICallSite.Invoke(System.Object[])">
            <summary>
            调用服务。
            </summary>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns>返回一个服务的实例。</returns>
        </member>
        <member name="T:Aoite.DI.IServiceBinder">
            <summary>
            定义服务的绑定器。
            </summary>
        </member>
        <member name="P:Aoite.DI.IServiceBinder.ExpectType">
            <summary>
            获取当前绑定器的预期服务类型。
            </summary>
        </member>
        <member name="M:Aoite.DI.IServiceBinder.Singleton(System.Object)">
            <summary>
            绑定为单例模式的服务。
            </summary>
            <param name="value">要添加的服务的实例。 此对象必须实现 <see cref="P:Aoite.DI.IServiceBinder.ExpectType"/>> 所指示的类型或从其继承。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.IServiceBinder.Singleton(System.InstanceCreatorCallback)">
            <summary>
            绑定为单例模式的服务。
            </summary>
            <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.IServiceBinder.Transient(System.InstanceCreatorCallback)">
            <summary>
            绑定为短暂模式的服务。
            </summary>
            <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.IServiceBinder.Scoped(System.InstanceCreatorCallback)">
            <summary>
            绑定为范围模式的服务。
            </summary>
            <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="T:Aoite.DI.IServiceBuilder">
            <summary>
            定义服务的构建器。
            </summary>
        </member>
        <member name="M:Aoite.DI.IServiceBuilder.Use(System.Type)">
            <summary>
            添加或覆盖一个预期服务类型。
            </summary>
            <param name="expectType">预期服务类型。</param>
            <returns>类型服务的绑定器。</returns>
        </member>
        <member name="M:Aoite.DI.IServiceBuilder.UseRange(System.Type)">
            <summary>
            添加一个预期服务类型。
            </summary>
            <param name="expectType">预期服务类型。</param>
            <returns>类型服务的绑定器。</returns>
        </member>
        <member name="M:Aoite.DI.IServiceBuilder.Use(System.String)">
            <summary>
            添加或覆盖一个值服务。
            </summary>
            <param name="name">值服务的参数名称。</param>
            <returns>值型服务的绑定器。</returns>
        </member>
        <member name="M:Aoite.DI.IServiceBuilder.Use(System.Type,System.String)">
            <summary>
            添加或覆盖一个值服务。
            </summary>
            <param name="expectType">预期服务类型。</param>
            <param name="name">值服务的参数名称。</param>
            <returns>值型服务的绑定器。</returns>
        </member>
        <member name="M:Aoite.DI.IServiceBuilder.Promote">
            <summary>
            将当前构建器的所有服务提升到父服务。
            </summary>
        </member>
        <member name="T:Aoite.DI.ITypeServiceBinder">
            <summary>
            定义类型服务的绑定器。
            </summary>
        </member>
        <member name="P:Aoite.DI.ITypeServiceBinder.Overwrite">
            <summary>
            获取一个值，指示当前绑定器是否覆盖旧的绑定。
            </summary>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.Transient">
            <summary>
            绑定为短暂模式的服务。
            </summary>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.Transient(System.Type)">
            <summary>
            绑定为短暂模式的服务。
            </summary>
            <param name="actualType">实际的服务类型。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.Singleton">
            <summary>
            绑定为单例模式的服务。
            </summary>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.Singleton(System.Type)">
            <summary>
            绑定为单例模式的服务。
            </summary>
            <param name="actualType">实际的服务类型。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.Scoped">
            <summary>
            绑定为范围模式的服务。
            </summary>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.Scoped(System.Type)">
            <summary>
            绑定为范围模式的服务。
            </summary>
            <param name="actualType">实际的服务类型。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.As">
            <summary>
            绑定为智能模式的服务。根据 <see cref="P:Aoite.DI.IServiceBinder.ExpectType"/> 的特性创建不同模式的服务（默认为短暂模式）。
            </summary>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.As(System.InstanceCreatorCallback)">
            <summary>
            绑定为智能模式的服务。根据 <see cref="P:Aoite.DI.IServiceBinder.ExpectType"/> 的特性创建不同模式的服务（默认为短暂模式）。
            </summary>
            <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:Aoite.DI.ITypeServiceBinder.As(System.Type)">
            <summary>
            绑定为智能模式的服务。根据 <see cref="P:Aoite.DI.IServiceBinder.ExpectType"/> 的特性创建不同模式的服务（默认为短暂模式）。
            </summary>
            <param name="actualType">实际的服务类型。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="T:Aoite.DI.IValueServiceBinder">
            <summary>
            定义一个值服务的绑定器。
            </summary>
        </member>
        <member name="P:Aoite.DI.IValueServiceBinder.Name">
            <summary>
            获取值服务的参数名称。
            </summary>
        </member>
        <member name="T:Aoite.DI.ServiceLifetime">
            <summary>
            表示服务的生命周期。
            </summary>
        </member>
        <member name="F:Aoite.DI.ServiceLifetime.Transient">
            <summary>
            表示短暂服务。每一次调用都创建一个新的服务。
            </summary>
        </member>
        <member name="F:Aoite.DI.ServiceLifetime.Scoped">
            <summary>
            表示范围服务。每一个线程（或 Web 请求）第一次调用时才会创建服务。
            </summary>
        </member>
        <member name="F:Aoite.DI.ServiceLifetime.Singleton">
            <summary>
            表示单例服务。只有当第一次调用时才会创建服务。
            </summary>
        </member>
        <member name="F:Aoite.DI.ServiceLifetime.LastMapping">
            <summary>
            表示后期绑定服务。
            </summary>
        </member>
        <member name="T:Aoite.Logger.DayLogPathFactory">
            <summary>
            表示一个以“天”为单位的日志路径生成工厂。
            </summary>
        </member>
        <member name="M:Aoite.Logger.DayLogPathFactory.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Logger.DayLogPathFactory"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Logger.DayLogPathFactory.IsCreated(System.DateTime)">
            <summary>
            指定当前时间，判断路径是否已创建。
            </summary>
            <param name="now">当前时间。</param>
            <returns>如果路径已创建返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Aoite.Logger.DayLogPathFactory.CreatePath(System.DateTime,System.String,System.String)">
            <summary>
            创建指定时间、日志目录和日志后缀名，创建一个路径。
            </summary>
            <param name="now">当前时间。</param>
            <param name="logFolder">日志的目录。</param>
            <param name="logExtension">日志的后缀名。</param>
            <returns>日志的路径。</returns>
        </member>
        <member name="T:Aoite.Logger.HourLogPathFactory">
            <summary>
            表示一个以“小时”为单位的日志路径生成工厂。
            </summary>
        </member>
        <member name="M:Aoite.Logger.HourLogPathFactory.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Logger.HourLogPathFactory"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Logger.HourLogPathFactory.IsCreated(System.DateTime)">
            <summary>
            指定当前时间，判断路径是否已创建。
            </summary>
            <param name="now">当前时间。</param>
            <returns>如果路径已创建返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Aoite.Logger.HourLogPathFactory.CreatePath(System.DateTime,System.String,System.String)">
            <summary>
            创建指定时间、日志目录和日志后缀名，创建一个路径。
            </summary>
            <param name="now">当前时间。</param>
            <param name="logFolder">日志的目录。</param>
            <param name="logExtension">日志的后缀名。</param>
            <returns>日志的路径。</returns>
        </member>
        <member name="T:Aoite.Logger.LogDescriptor">
            <summary>
            表示一个默认的日志描述器。
            </summary>
        </member>
        <member name="M:Aoite.Logger.LogDescriptor.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Logger.LogDescriptor"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Logger.LogDescriptor.Describe(Aoite.Logger.ILogger,Aoite.Logger.LogItem)">
            <summary>
            描述指定日志管理器的日志项。
            </summary>
            <param name="logger">日志管理器。</param>
            <param name="item">日志项。</param>
            <returns>日志项的字符串形式。</returns>
        </member>
        <member name="T:Aoite.Logger.LoggerBase">
            <summary>
            表示一个日志管理器的基类。
            </summary>
        </member>
        <member name="P:Aoite.Logger.LoggerBase.Interval">
            <summary>
            获取或设置日志等待时间的间隔。默认为 1 秒钟。
            </summary>
        </member>
        <member name="P:Aoite.Logger.LoggerBase.Asynchronous">
            <summary>
            获取或设置一个值，指示是否为异步模式。默认为 true。
            </summary>
        </member>
        <member name="M:Aoite.Logger.LoggerBase.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Logger.LoggerBase"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Logger.LoggerBase.Write(Aoite.Logger.LogItem[])">
            <summary>
            写入一个或多个日志项。
            </summary>
            <param name="items">日志项的数组。</param>
        </member>
        <member name="M:Aoite.Logger.LoggerBase.OnWrite(Aoite.Logger.LogItem[])">
            <summary>
            异步写入一个或多个日志项。
            </summary>
            <param name="items">日志项的数组。</param>
        </member>
        <member name="T:Aoite.Logger.TextLogger">
            <summary>
            表示一个基于文本的日志管理器。
            </summary>
        </member>
        <member name="P:Aoite.Logger.TextLogger.TextWriterFactory">
            <summary>
            获取或设置文本编写器工厂。
            </summary>
        </member>
        <member name="P:Aoite.Logger.TextLogger.Descriptor">
            <summary>
            获取或设置日志描述器。
            </summary>
        </member>
        <member name="M:Aoite.Logger.TextLogger.#ctor(Aoite.Logger.ITextWriterFactory,Aoite.Logger.ILogDescriptor)">
            <summary>
            指定文本编写器工厂和日志描述器，初始化一个 <see cref="T:Aoite.Logger.TextLogger"/> 类的新实例。
            </summary>
            <param name="textWriterfactory">文本编写器工厂。</param>
            <param name="descriptor">日志描述器。</param>
        </member>
        <member name="M:Aoite.Logger.TextLogger.OnWrite(Aoite.Logger.LogItem[])">
            <summary>
            异步写入一个或多个日志项。
            </summary>
            <param name="items">日志项的数组。</param>
        </member>
        <member name="T:Aoite.Logger.ILogger">
            <summary>
            定义一个日志管理器。
            </summary>
        </member>
        <member name="M:Aoite.Logger.ILogger.Write(Aoite.Logger.LogItem[])">
            <summary>
            写入一个或多个日志项。
            </summary>
            <param name="items">日志项的数组。</param>
        </member>
        <member name="T:Aoite.Logger.LogItem">
            <summary>
            表示一个日志的信息。
            </summary>
        </member>
        <member name="P:Aoite.Logger.LogItem.Type">
            <summary>
            获取或设置一个值，表示日志的类型。
            </summary>
        </member>
        <member name="P:Aoite.Logger.LogItem.Time">
            <summary>
            获取一个值，表示日志的日期时间。
            </summary>
        </member>
        <member name="P:Aoite.Logger.LogItem.Message">
            <summary>
            获取或设置一个值，表示日志的消息。
            </summary>
        </member>
        <member name="M:Aoite.Logger.LogItem.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Logger.LogItem"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Logger.LogItem.ToString">
            <summary>
            返回描述当前日志信息的短字符串。
            </summary>
        </member>
        <member name="T:Aoite.Logger.LogType">
            <summary>
            定义日志的类型。
            </summary>
        </member>
        <member name="F:Aoite.Logger.LogType.Info">
            <summary>
            消息型日志。
            </summary>
        </member>
        <member name="F:Aoite.Logger.LogType.Warn">
            <summary>
            警告型日志。
            </summary>
        </member>
        <member name="F:Aoite.Logger.LogType.Error">
            <summary>
            错误型日志。
            </summary>
        </member>
        <member name="T:Aoite.Logger.CustomTextWriterFactory">
            <summary>
            表示一个基于可自定义写入流的文本编写器工厂。
            </summary>
        </member>
        <member name="P:Aoite.Logger.CustomTextWriterFactory.CreateWriter">
            <summary>
            获取或设置自定义的编写器创建方法。
            </summary>
        </member>
        <member name="M:Aoite.Logger.CustomTextWriterFactory.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Logger.CustomTextWriterFactory"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Logger.CustomTextWriterFactory.Process(System.Action{System.IO.TextWriter})">
            <summary>
            生成流的编写器，处理指定的回调方法。
            </summary>
            <param name="callback">回调方法。</param>
        </member>
        <member name="T:Aoite.Logger.ILogDescriptor">
            <summary>
            定义一个日志描述器。
            </summary>
        </member>
        <member name="M:Aoite.Logger.ILogDescriptor.Describe(Aoite.Logger.ILogger,Aoite.Logger.LogItem)">
            <summary>
            描述指定日志管理器的日志项。
            </summary>
            <param name="logger">日志管理器。</param>
            <param name="item">日志项。</param>
            <returns>日志项的字符串形式。</returns>
        </member>
        <member name="T:Aoite.Logger.ILogPathFactory">
            <summary>
            定义一个日志的路径生成工厂。
            </summary>
        </member>
        <member name="M:Aoite.Logger.ILogPathFactory.IsCreated(System.DateTime)">
            <summary>
            指定当前时间，判断路径是否已创建。
            </summary>
            <param name="now">当前时间。</param>
            <returns>如果路径已创建返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Aoite.Logger.ILogPathFactory.CreatePath(System.DateTime,System.String,System.String)">
            <summary>
            创建指定时间、日志目录和日志后缀名，创建一个路径。
            </summary>
            <param name="now">当前时间。</param>
            <param name="logFolder">日志的目录。</param>
            <param name="logExtension">日志的后缀名。</param>
            <returns>日志的路径。</returns>
        </member>
        <member name="T:Aoite.Logger.ITextWriterFactory">
            <summary>
            定义一个文本编写器工厂。
            </summary>
        </member>
        <member name="M:Aoite.Logger.ITextWriterFactory.Process(System.Action{System.IO.TextWriter})">
            <summary>
            生成流的编写器，处理指定的回调方法。
            </summary>
            <param name="callback">回调方法。</param>
        </member>
        <member name="T:Aoite.Logger.StreamTextWriterFactory">
            <summary>
            表示一个基于流的文本编写器工厂。
            </summary>
        </member>
        <member name="P:Aoite.Logger.StreamTextWriterFactory.LogFolder">
            <summary>
            获取或设置日志的文件目录。
            </summary>
        </member>
        <member name="P:Aoite.Logger.StreamTextWriterFactory.LogExtension">
            <summary>
            获取或设置日志的文件后缀。
            </summary>
        </member>
        <member name="P:Aoite.Logger.StreamTextWriterFactory.Encoding">
            <summary>
            获取或设置日志的编码格式。
            </summary>
        </member>
        <member name="P:Aoite.Logger.StreamTextWriterFactory.LogPathFactory">
            <summary>
            获取或设置日志的路径生成工厂。
            </summary>
        </member>
        <member name="M:Aoite.Logger.StreamTextWriterFactory.#ctor(Aoite.Logger.ILogPathFactory)">
            <summary>
            指定日志的路径生成工厂，初始化一个 <see cref="T:Aoite.Logger.StreamTextWriterFactory"/> 类的新实例。
            </summary>
            <param name="logPathFactory">日志的路径生成工厂。</param>
        </member>
        <member name="M:Aoite.Logger.StreamTextWriterFactory.Process(System.Action{System.IO.TextWriter})">
            <summary>
            生成流的编写器，处理指定的回调方法。
            </summary>
            <param name="callback">回调方法。</param>
        </member>
        <member name="M:Aoite.Logger.StreamTextWriterFactory.Finalize">
            <summary>
            析构函数。
            </summary>
        </member>
        <member name="T:Aoite.Net.IHostPort">
            <summary>
            定义一个包含主机地址和主机端口的接口。
            </summary>
        </member>
        <member name="P:Aoite.Net.IHostPort.Host">
            <summary>
            获取或设置主机地址。
            </summary>
        </member>
        <member name="P:Aoite.Net.IHostPort.Port">
            <summary>
            获取或设置主机端口。
            </summary>
        </member>
        <member name="T:Aoite.Net.SocketInfo">
            <summary>
            表示套接字的信息。
            </summary>
        </member>
        <member name="P:Aoite.Net.SocketInfo.EndPoint">
            <summary>
            获取网络端点。
            </summary>
        </member>
        <member name="M:Aoite.Net.SocketInfo.#ctor(System.String,System.Int32)">
            <summary>
            提供主机地址和主机端口，初始化一个 <see cref="T:Aoite.Net.SocketInfo"/> 类的新实例。
            </summary>
            <param name="host">主机地址。</param>
            <param name="port">主机端口。</param>
        </member>
        <member name="M:Aoite.Net.SocketInfo.#ctor(System.Net.IPEndPoint)">
            <summary>
            提供网络端点，初始化一个 <see cref="T:Aoite.Net.SocketInfo"/> 类的新实例。
            </summary>
            <param name="endPoint">网络端点。</param>
        </member>
        <member name="P:Aoite.Net.SocketInfo.KeepAliveSeconds">
            <summary>
            获取或设置以秒为单位的心跳侦测间隔。默认为 60 秒。当为 0 时表示采用操作系统的默认心跳侦测间隔。
            </summary>
        </member>
        <member name="M:Aoite.Net.SocketInfo.CreateSocket">
            <summary>
            创建一个 <see cref="T:System.Net.Sockets.Socket"/>。
            </summary>
            <returns><see cref="T:System.Net.Sockets.Socket"/>。</returns>
        </member>
        <member name="M:Aoite.Net.SocketInfo.op_Implicit(System.Int32)~Aoite.Net.SocketInfo">
            <summary>
            将指定的端口隐式转换为 <see cref="T:Aoite.Net.SocketInfo"/> 类的新实例。
            </summary>
            <param name="port">主机端口。</param>
            <returns><see cref="T:Aoite.Net.SocketInfo"/> 类的新实例。</returns>
        </member>
        <member name="M:Aoite.Net.SocketInfo.op_Implicit(System.Net.IPEndPoint)~Aoite.Net.SocketInfo">
            <summary>
            将指定的网络端点隐式转换为 <see cref="T:Aoite.Net.SocketInfo"/> 类的新实例。
            </summary>
            <param name="endPoint">网络端点。</param>
            <returns><see cref="T:Aoite.Net.SocketInfo"/> 类的新实例。</returns>
        </member>
        <member name="M:Aoite.Net.SocketInfo.ToString">
            <summary>
            返回指定终结点的 IP 地址和端口号。
            </summary>
            <returns>包含指定终结点（例如，192.168.1.2:80）的 IP 地址和端口号的字符串。</returns>
        </member>
        <member name="T:Aoite.Redis.Commands.RedisCommand">
            <summary>
            表示一个 Redis 的命令。
            </summary>
        </member>
        <member name="P:Aoite.Redis.Commands.RedisCommand.Command">
            <summary>
            获取命令。
            </summary>
        </member>
        <member name="P:Aoite.Redis.Commands.RedisCommand.Arguments">
            <summary>
            获取参数。
            </summary>
        </member>
        <member name="T:Aoite.Redis.Commands.RedisCommand`1">
            <summary>
            表示一个 Redis 的命令。
            </summary>
            <typeparam name="T">命令返回值的数据类型。</typeparam>
        </member>
        <member name="T:Aoite.Redis.RedisException">
            <summary>
            表示使用 Redis 期间发生的错误。
            </summary>
        </member>
        <member name="T:Aoite.Redis.RedisIOException">
            <summary>
            表示使用 Redis 期间发生的通讯错误。
            </summary>
        </member>
        <member name="T:Aoite.Redis.RedisProtocolException">
            <summary>
            表示使用 Redis 期间发生的协议错误。
            </summary>
        </member>
        <member name="T:Aoite.Redis.RedisReplyException">
            <summary>
            表示使用 Redis 期间发生的回复错误。
            </summary>
        </member>
        <member name="T:Aoite.Redis.RedisReplyType">
            <summary>
            表示 Redis 的回复类型。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisReplyType.Status">
            <summary>
            '+' 状态回复。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisReplyType.Error">
            <summary>
            '-' 错误回复。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisReplyType.Integer">
            <summary>
            ':' 整数回复。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisReplyType.Bulk">
            <summary>
            '$' 批量回复。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisReplyType.MultiBulk">
            <summary>
            '*'多条批量回复。
            </summary>
        </member>
        <member name="T:Aoite.Redis.RedisType">
            <summary>
            表示 Redis 储存值的类型
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisType.None">
            <summary>
            表示无效或不存在的键类型。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisType.String">
            <summary>
            表示字符串类型。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisType.List">
            <summary>
            表示列表类型。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisType.Set">
            <summary>
            表示集合类型。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisType.ZSet">
            <summary>
            表示有序集类型。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisType.Hash">
            <summary>
            表示哈希表类型。
            </summary>
        </member>
        <member name="T:Aoite.Redis.IRedisClient">
            <summary>
            定义一个 Redis 客户端。
            </summary>
        </member>
        <member name="P:Aoite.Redis.IRedisClient.Id">
            <summary>
            获取当前 Redis 的在应用程序域中的唯一编号。
            </summary>
        </member>
        <member name="M:Aoite.Redis.IRedisClient.Execute``1(Aoite.Redis.Commands.RedisCommand{``0})">
            <summary>
            执行指定的 Redis 命令。
            </summary>
            <typeparam name="T">命令返回值的数据类型。</typeparam>
            <param name="command">Redis 命令。</param>
            <returns>执行后的返回值。</returns>
        </member>
        <member name="M:Aoite.Redis.IRedisClient.BeginTransaction">
            <summary>
            开始一个新的事务。
            </summary>
            <returns>如果事务已存在，将会抛出一个错误，否则返回一个新的事务。</returns>
        </member>
        <member name="T:Aoite.Redis.IRedisTransaction">
            <summary>
            表示一个 Redis 事务。
            <para>事务在执行 EXEC 之前，入队的命令可能会出错。比如说，命令可能会产生语法错误（参数数量错误，参数名错误，等等），或者其他更严重的错误，比如内存不足（如果服务器使用 maxmemory 设置了最大内存限制的话）。</para>
            <para>命令可能在 EXEC 调用之后失败。举个例子，事务中的命令可能处理了错误类型的键，比如将列表命令用在了字符串键上面，诸如此类。</para>
            </summary>
        </member>
        <member name="M:Aoite.Redis.IRedisTransaction.On``1(``0,System.Action{``0})">
            <summary>
            指示当事务成功执行后，需要获取返回值的回调的方法。
            </summary>
            <typeparam name="T">返回值的数据类型。</typeparam>
            <param name="executor">执行的委托的返回值。</param>
            <param name="callback">毁掉的委托。</param>
        </member>
        <member name="M:Aoite.Redis.IRedisTransaction.Commit">
            <summary>
            提交当前事务。直到事务释放之前，如果没有显示提交，将会自动放弃事务。
            <para>提交事务抛出错误时，所有的回调方法都不会执行。但其他非失败的命令在 Redis 数据库实际已执行成功。</para>
            </summary>
        </member>
        <member name="T:Aoite.Redis.RedisDictionary">
            <summary>
            表示 Redis 键和值的集合。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisDictionary.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisDictionary"/> 类的新实例，该实例为空且具有默认的初始容量，并使用键类型的默认相等比较器。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisDictionary.#ctor(System.Int32)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisDictionary"/> 类的新实例，该实例为空且具有指定的初始容量，并为键类型使用默认的相等比较器。
            </summary>
            <param name="capacity"><see cref="T:Aoite.Redis.RedisDictionary"/> 可包含的初始元素数。</param>
        </member>
        <member name="M:Aoite.Redis.RedisDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.BinaryValue})">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisDictionary"/> 类的新实例，该实例包含从指定的 System.Collections.Generic.IDictionary&lt;System.String, System.BinaryValue&gt; 中复制的元素并为键类型使用默认的相等比较器。
            </summary>
            <param name="dictionary">System.Collections.Generic.IDictionary&lt;System.String, System.BinaryValue&gt;，它的元素被复制到新的 <see cref="T:Aoite.Redis.RedisDictionary"/></param>
        </member>
        <member name="M:Aoite.Redis.RedisDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化一个 <see cref="T:Aoite.Redis.RedisDictionary"/> 类的新实例。
            </summary>
            <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 对象，它包含序列化 <see cref="T:Aoite.Redis.RedisDictionary"/> 所需的信息。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> 结构，该结构包含与 <see cref="T:Aoite.Redis.RedisDictionary"/> 相关联的序列化流的源和目标。</param>
        </member>
        <member name="M:Aoite.Redis.RedisDictionary.#ctor(System.Collections.IDictionary)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisDictionary"/> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IDictionary"/> 中复制的元素并为键类型使用默认的相等比较器。
            </summary>
            <param name="dictionary"><see cref="T:System.Collections.IDictionary"/>，它的元素被复制到新的 <see cref="T:Aoite.Redis.RedisDictionary"/></param>
        </member>
        <member name="M:Aoite.Redis.RedisDictionary.#ctor(Aoite.Redis.RedisFieldItem[])">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisDictionary"/> 类的新实例，该实例包含从指定的 <see cref="T:Aoite.Redis.RedisFieldItem"/> 数组中复制的元素并为键类型使用默认的相等比较器。
            </summary>
            <param name="items"><see cref="T:Aoite.Redis.RedisFieldItem"/> 数组，它的元素被复制到新的 <see cref="T:Aoite.Redis.RedisDictionary"/></param>
        </member>
        <member name="T:Aoite.Redis.RedisFieldItem">
            <summary>
            表示一个 Redis 的域值项。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisFieldItem.Field">
            <summary>
            获取或设置项的域名。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisFieldItem.Value">
            <summary>
            获取或设置项的域值。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisFieldItem.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisFieldItem"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisFieldItem.#ctor(System.String,System.BinaryValue)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisFieldItem"/> 类的新实例。
            </summary>
            <param name="field">域名。</param>
            <param name="value">域值。</param>
        </member>
        <member name="T:Aoite.Redis.RedisKeyItem">
            <summary>
            表示一个 Redis 的键值项。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisKeyItem.Key">
            <summary>
            获取或设置项的键名。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisKeyItem.Value">
            <summary>
            获取或设置项的键值。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisKeyItem.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisKeyItem"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisKeyItem.#ctor(System.String,System.BinaryValue)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisKeyItem"/> 类的新实例。
            </summary>
            <param name="key">键名。</param>
            <param name="value">键值。</param>
        </member>
        <member name="T:Aoite.Redis.RedisScoreItem">
            <summary>
            表示一个 Redis 的成员权重项。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisScoreItem.Score">
            <summary>
            获取或设置项的权重。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisScoreItem.Member">
            <summary>
            获取或设置项的成员。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisScoreItem.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisScoreItem"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisScoreItem.#ctor(System.Double,System.BinaryValue)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisScoreItem"/> 类的新实例。
            </summary>
            <param name="score">权重值。</param>
            <param name="member">成员。</param>
        </member>
        <member name="T:Aoite.Redis.RedisWeightDictionary">
            <summary>
            表示 Redis 键和乘法因子的集合。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisWeightDictionary.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisWeightDictionary"/> 类的新实例，该实例为空且具有默认的初始容量，并使用键类型的默认相等比较器。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisWeightDictionary.#ctor(System.Int32)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisWeightDictionary"/> 类的新实例，该实例为空且具有指定的初始容量，并为键类型使用默认的相等比较器。
            </summary>
            <param name="capacity"><see cref="T:Aoite.Redis.RedisWeightDictionary"/> 可包含的初始元素数。</param>
        </member>
        <member name="M:Aoite.Redis.RedisWeightDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisWeightDictionary"/> 类的新实例，该实例包含从指定的 System.Collections.Generic.IDictionary&lt;System.String, System.Double&gt; 中复制的元素并为键类型使用默认的相等比较器。
            </summary>
            <param name="dictionary">System.Collections.Generic.IDictionary&lt;System.String, System.Double&gt;，它的元素被复制到新的 <see cref="T:Aoite.Redis.RedisWeightDictionary"/></param>
        </member>
        <member name="M:Aoite.Redis.RedisWeightDictionary.#ctor(System.String[])">
            <summary>
            使用默认的乘法因子（1），初始化一个 <see cref="T:Aoite.Redis.RedisWeightDictionary"/> 类的新实例，该实例包含从指定的 <paramref name="keys"/> 中复制的元素并为键类型使用默认的相等比较器。
            </summary>
            <param name="keys">键名的数组。</param>
        </member>
        <member name="M:Aoite.Redis.RedisWeightDictionary.#ctor(System.String[],System.Double[])">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisWeightDictionary"/> 类的新实例，该实例包含从指定的 <paramref name="keys"/> 和  <paramref name="weights"/> 中复制的元素。
            </summary>
            <param name="keys">键名的数组。</param>
            <param name="weights">乘法因子的数组。</param>
        </member>
        <member name="T:Aoite.Redis.RedisClient">
            <summary>
            表示一个 Redis 客户端。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisClient.Id">
            <summary>
            获取当前 Redis 的在应用程序域中的唯一编号。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisClient.#ctor(Aoite.Net.SocketInfo,System.String)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisClient"/> 类的新实例。
            </summary>
            <param name="address">Redis 的连接地址。</param>
            <param name="password">Redis 的连接密码。</param>
        </member>
        <member name="M:Aoite.Redis.RedisClient.Execute``1(Aoite.Redis.Commands.RedisCommand{``0})">
            <summary>
            执行指定的 Redis 命令。
            </summary>
            <typeparam name="T">命令返回值的数据类型。</typeparam>
            <param name="command">Redis 命令。</param>
            <returns>执行后的返回值。</returns>
        </member>
        <member name="M:Aoite.Redis.RedisClient.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisClient.BeginTransaction">
            <summary>
            开始一个新的事务。
            <para>在事务期间请勿通过 <see cref="T:Aoite.Redis.IRedisClient"/> 执行任何命令。</para>
            </summary>
            <returns>如果事务已存在，将会抛出一个错误，否则返回一个新的事务。</returns>
        </member>
        <member name="T:Aoite.Redis.RedisManager">
            <summary>
            表示一个 Redis 的管理器。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisManager.DefaultAddress">
            <summary>
            获取或设置 Redis 的连接地址，默认为 localhost:6379。
            </summary>
        </member>
        <member name="F:Aoite.Redis.RedisManager.DefaultPassword">
            <summary>
            获取或设置 Redis 的连接密码，默认为 nul 值。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisManager.Context">
            <summary>
            获取当前线程上下文的 Redis 上下文。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisManager.IsThreadContext">
            <summary>
            获取一个值，指示当前 Redis 上下文在线程中是否已创建。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisManager.ResetContext">
            <summary>
            释放并关闭当前线程上下文的 Redis 上下文。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisManager.Address">
            <summary>
            获取 Redis 的连接地址。
            </summary>
        </member>
        <member name="P:Aoite.Redis.RedisManager.Password">
            <summary>
            获取 Redis 的连接密码。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisManager.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisManager"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisManager.#ctor(Aoite.Net.SocketInfo,System.String)">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisManager"/> 类的新实例。
            </summary>
            <param name="address">Redis 的连接地址。</param>
            <param name="password">Redis 的连接密码。</param>
        </member>
        <member name="M:Aoite.Redis.RedisManager.Acquire">
            <summary>
            获取一个对象池的对象。
            </summary>
            <returns>新的对象。</returns>
        </member>
        <member name="M:Aoite.Redis.RedisManager.Release(Aoite.Redis.IRedisClient)">
            <summary>
            释放一个对象，并将其放入对象池中。
            </summary>
            <param name="obj">对象池。</param>
        </member>
        <member name="T:Aoite.Redis.RedisSessionStateStoreProvider">
            <summary>
            表示一个使用 Redis 作为数据存储区会话状态的提供程序。
            </summary>
            <example>
            web.config 配置：
            <code>
            <![CDATA[
              <system.web>
                <sessionState mode="Custom" customProvider="RedisSessionStateProvider">
                  <providers>
                    <clear />
                    <add name="RedisSessionStateProvider" 
                         type="Aoite.Redis.RedisSessionStateStoreProvider" 
                         address="localhost:6379" password="" />
                  </providers>
                </sessionState>
              </system.web>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Aoite.Redis.RedisSessionStateStoreProvider.RedisManager">
            <summary>
            获取用于会话状态提供程序的 Redis 管理器。
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.#ctor">
            <summary>
            初始化一个 <see cref="T:Aoite.Redis.RedisSessionStateStoreProvider"/>
            </summary>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.GetRedisKey(System.String)">
            <summary>
            获取当前请求的会话标识符的 Redis 键名。
            </summary>
            <param name="id">当前请求的会话标识符。</param>
            <returns>Redis 键名。</returns>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            初始化提供程序。
            </summary>
            <param name="name">该提供程序的友好名称。</param>
            <param name="config">名称/值对的集合，表示在配置中为该提供程序指定的、提供程序特定的属性。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.InitializeRequest(System.Web.HttpContext)">
            <summary>
            由 <see cref="T:System.Web.SessionState.SessionStateModule"/> 对象调用，以便进行每次请求初始化。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.EndRequest(System.Web.HttpContext)">
             <summary>
            在请求结束时由 <see cref="T:System.Web.SessionState.SessionStateModule"/> 对象调用。
             </summary>
             <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.CreateNewStoreData(System.Web.HttpContext,System.Int32)">
            <summary>
            创建要用于当前请求的新 <see cref="T:System.Web.SessionState.SessionStateStoreData"/> 对象。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="timeout">新 <see cref="T:System.Web.SessionState.SessionStateStoreData"/> 的会话状态 <see cref="P:System.Web.SessionState.HttpSessionState.Timeout"/> 值。</param>
            <returns>当前请求的新 <see cref="T:System.Web.SessionState.SessionStateStoreData"/>。</returns>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)">
            <summary>
            将新的会话状态项添加到数据存储区中。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="id">当前请求的 <see cref="P:System.Web.SessionState.HttpSessionState.SessionID"/>。</param>
            <param name="timeout">当前请求的会话 <see cref="P:System.Web.SessionState.HttpSessionState.Timeout"/>。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
            从会话数据存储区中返回只读会话状态数据。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="id">当前请求的 <see cref="P:System.Web.SessionState.HttpSessionState.SessionID"/>。</param>
            <param name="locked">当此方法返回时，如果请求的会话项在会话数据存储区被锁定，请包含一个设置为 true 的布尔值；否则请包含一个设置为 false 的布尔值。</param>
            <param name="lockAge">当此方法返回时，请包含一个设置为会话数据存储区中的项锁定时间的 <see cref="T:System.TimeSpan"/> 对象。</param>
            <param name="lockId">当此方法返回时，请包含一个设置为当前请求的锁定标识符的对象。有关锁定标识符的详细信息，请参见 <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"/> 类摘要中的“锁定会话存储区数据”。</param>
            <param name="actions">当此方法返回时，请包含 <see cref="T:System.Web.SessionState.SessionStateActions"/> 值之一，指示当前会话是否为未初始化的无 Cookie 会话。</param>
            <returns>使用会话数据存储区中的会话值和信息填充的 <see cref="T:System.Web.SessionState.SessionStateStoreData"/>。</returns>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
            从会话数据存储区中返回只读会话状态数据。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="id">当前请求的 <see cref="P:System.Web.SessionState.HttpSessionState.SessionID"/>。</param>
            <param name="locked">当此方法返回时，如果请求的会话项在会话数据存储区被锁定，请包含一个设置为 true 的布尔值；否则请包含一个设置为 false 的布尔值。</param>
            <param name="lockAge">当此方法返回时，请包含一个设置为会话数据存储区中的项锁定时间的 <see cref="T:System.TimeSpan"/> 对象。</param>
            <param name="lockId">当此方法返回时，请包含一个设置为当前请求的锁定标识符的对象。有关锁定标识符的详细信息，请参见 <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"/> 类摘要中的“锁定会话存储区数据”。</param>
            <param name="actions">当此方法返回时，请包含 <see cref="T:System.Web.SessionState.SessionStateActions"/> 值之一，指示当前会话是否为未初始化的无 Cookie 会话。</param>
            <returns>使用会话数据存储区中的会话值和信息填充的 <see cref="T:System.Web.SessionState.SessionStateStoreData"/>。</returns>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)">
            <summary>
            释放对会话数据存储区中项的锁定。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="id">当前请求的会话标识符。</param>
            <param name="lockId">当前请求的锁定标识符。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)">
            <summary>
            删除会话数据存储区中的项数据。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="id">当前请求的会话标识符。</param>
            <param name="lockId">当前请求的锁定标识符。</param>
            <param name="item">表示将从数据存储区中删除的项的 <see cref="T:System.Web.SessionState.SessionStateStoreData"/>。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.ResetItemTimeout(System.Web.HttpContext,System.String)">
            <summary>
            更新会话数据存储区中的项的到期日期和时间。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="id">当前请求的会话标识符。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)">
            <summary>
            使用当前请求中的值更新会话状态数据存储区中的会话项信息，并清除对数据的锁定。
            </summary>
            <param name="context">当前请求的 <see cref="T:System.Web.HttpContext"/>。</param>
            <param name="id">当前请求的会话标识符。</param>
            <param name="item">包含要存储的当前会话值的 <see cref="T:System.Web.SessionState.SessionStateStoreData"/> 对象。</param>
            <param name="lockId">当前请求的锁定标识符。</param>
            <param name="newItem">如果为 true，则将会话项标识为新项；如果为 false，则将会话项标识为现有的项。</param>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)">
            <summary>
            设置对 Global.asax 文件中定义的 Session_OnEnd 事件的 <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback"/> 委托的引用。
            </summary>
            <param name="expireCallback">对 Global.asax 文件中定义的 Session_OnEnd 事件的 <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback"/> 委托。</param>
            <returns>如果会话状态存储提供程序支持调用 Session_OnEnd 事件，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Aoite.Redis.RedisSessionStateStoreProvider.Dispose">
            <summary>
            释放由 <see cref="T:Aoite.Redis.RedisSessionStateStoreProvider"/> 实现使用的所有资源。
            </summary>
        </member>
        <member name="T:Aoite.Reflection.EmitHelper">
            <summary>
            A wrapper around the <see cref="P:Aoite.Reflection.EmitHelper.ILGenerator"/> class.
            </summary>
            <seealso cref="T:System.Reflection.Emit.ILGenerator">ILGenerator Class</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.#ctor(System.Type,System.Type[],System.Type,System.Boolean)">
            <summary>
            指定返回类型、参数类型、动态方法逻辑关联的类型，初始化一个 <see cref="T:Aoite.Reflection.EmitHelper"/> 类的新实例。
            </summary>
            <param name="returnType">返回类型。</param>
            <param name="parameterTypes">参数类型。</param>
            <param name="owner">逻辑关联的类型。</param>
            <param name="skipVisibility">要跳过动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 true；否则为 false。</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.#ctor(System.Reflection.Emit.DynamicMethod)">
            <summary>
            指定动态方法，初始化一个 <see cref="T:Aoite.Reflection.EmitHelper"/> 类的新实例。
            </summary>
            <param name="dynamicMethod">表示一种可编译、执行和丢弃的动态方法。</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.CreateDelegate``1">
            <summary>
            完成动态方法并创建一个可用于执行该方法的委托。
            </summary>
            <typeparam name="D">一个签名与动态方法的签名匹配的委托类型。</typeparam>
            <returns>指定类型的委托，可用于执行动态方法。</returns>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ILGenerator">
            <summary>
            Gets MSIL generator.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.op_Implicit(Aoite.Reflection.EmitHelper)~System.Reflection.Emit.ILGenerator">
            <summary>
            Converts the supplied <see cref="T:Aoite.Reflection.EmitHelper"/> to a <see cref="P:Aoite.Reflection.EmitHelper.ILGenerator"/>.
            </summary>
            <param name="emitHelper">The <see cref="T:Aoite.Reflection.EmitHelper"/>.</param>
            <returns>An ILGenerator.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.BeginCatchBlock(System.Type)">
            <summary>
            Begins a catch block.
            </summary>
            <param name="exceptionType">The Type object that represents the exception.</param>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">ILGenerator.BeginCatchBlock Method</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.BeginExceptFilterBlock">
            <summary>
            Begins an exception block for a filtered exception.
            </summary>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">ILGenerator.BeginCatchBlock Method</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.BeginExceptionBlock">
            <summary>
            Begins an exception block for a non-filtered exception.
            </summary>
            <returns>The label for the end of the block.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.BeginFaultBlock">
            <summary>
            Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.
            </summary>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.BeginFinallyBlock">
            <summary>
            Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
            </summary>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.BeginScope">
            <summary>
            Begins a lexical scope.
            </summary>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="localType">The Type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.DeclareLocal(System.Type,System.Boolean)">
            <summary>
            Declares a local variable, optionally pinning the object referred to by the variable.
            </summary>
            <param name="localType">The Type of the local variable.</param>
            <param name="pinned"><b>true</b> to pin the object in memory; otherwise, <b>false</b>.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.DefineLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>Returns a new label that can be used as a token for branching.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.EndExceptionBlock">
            <summary>
            Ends an exception block.
            </summary>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.EndScope">
            <summary>
            Ends a lexical scope.
            </summary>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.MarkLabel(System.Reflection.Emit.Label)">
            <summary>
            Marks the Microsoft intermediate language (MSIL) stream's current position 
            with the given label.
            </summary>
            <param name="loc">The label for which to set an index.</param>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a sequence point in the Microsoft intermediate language (MSIL) stream.
            </summary>
            <param name="document">The document for which the sequence point is being defined.</param>
            <param name="startLine">The line where the sequence point begins.</param>
            <param name="startColumn">The column in the line where the sequence point begins.</param>
            <param name="endLine">The line where the sequence point ends.</param>
            <param name="endColumn">The column in the line where the sequence point ends.</param>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ThrowException(System.Type)">
            <summary>
            Emits an instruction to throw an exception.
            </summary>
            <param name="exceptionType">The class of the type of exception to throw.</param>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.UsingNamespace(System.String)">
            <summary>
            Specifies the namespace to be used in evaluating locals and watches for 
            the current active lexical scope.
            </summary>
            <param name="namespaceName">The namespace to be used in evaluating locals and watches for the current active lexical scope.</param>
            <returns>Current instance of the <see cref="T:Aoite.Reflection.EmitHelper"/>.</returns>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.add">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add"/>) that
            adds two values and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add">OpCodes.Add</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.add_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf"/>) that
            adds two integers, performs an overflow check, and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf">OpCodes.Add_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.add_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un"/>) that
            adds two unsigned integer values, performs an overflow check, and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">OpCodes.Add_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.and">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.And"/>) that
            computes the bitwise AND of two values and pushes the value onto the evalution stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.And">OpCodes.And</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.arglist">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Arglist"/>) that
            returns an unmanaged pointer to the argument list of the current method.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Arglist">OpCodes.Arglist</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.beq(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq"/>, label) that
            transfers control to a target instruction if two values are equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq">OpCodes.Beq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.beq_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq_S"/>, label) that
            transfers control to a target instruction (short form) if two values are equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq_S">OpCodes.Beq_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bge(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge"/>, label) that
            transfers control to a target instruction if the first value is greater than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge">OpCodes.Bge</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bge_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_S"/>, label) that
            transfers control to a target instruction (short form) 
            if the first value is greater than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_S">OpCodes.Bge_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bge_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un"/>, label) that
            transfers control to a target instruction if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un">OpCodes.Bge_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bge_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S"/>, label) that
            transfers control to a target instruction (short form) if if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S">OpCodes.Bge_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bgt(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt">OpCodes.Bgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bgt_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_S">OpCodes.Bgt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bgt_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un">OpCodes.Bgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bgt_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">OpCodes.Bgt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ble(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble">OpCodes.Ble</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ble_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_S">OpCodes.Ble_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ble_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un">OpCodes.Ble_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ble_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S">OpCodes.Ble_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.blt(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt"/>, label) that
            transfers control to a target instruction if the first value is less than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt">OpCodes.Blt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.blt_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_S">OpCodes.Blt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.blt_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un"/>, label) that
            transfers control to a target instruction if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un">OpCodes.Blt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.blt_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S">OpCodes.Blt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bne_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un"/>, label) that
            transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un">OpCodes.Bne_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.bne_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S"/>, label) that
            transfers control to a target instruction (short form) 
            when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S">OpCodes.Bne_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.box(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Box"/>, type) that
            converts a value type to an object reference.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.boxIfValueType(System.Type)">
            <summary>
            Converts a value type to an object reference if the value is a value type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.br(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br"/>, label) that
            unconditionally transfers control to a target instruction. 
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br">OpCodes.Br</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.break">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Break"/>) that
            signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Break">OpCodes.Break</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.brfalse(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse"/>, label) that
            transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse">OpCodes.Brfalse</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.brfalse_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse_S"/>, label) that
            transfers control to a target instruction if value is false, a null reference, or zero. 
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse_S">OpCodes.Brfalse_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.brtrue(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue"/>, label) that
            transfers control to a target instruction if value is true, not null, or non-zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue">OpCodes.Brtrue</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.brtrue_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue_S"/>, label) that
            transfers control to a target instruction (short form) if value is true, not null, or non-zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue_S">OpCodes.Brtrue_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.br_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br_S"/>, label) that
            unconditionally transfers control to a target instruction (short form).
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br_S">OpCodes.Br_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.call(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.call(System.Reflection.ConstructorInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, constructorInfo) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="constructorInfo">The constructor to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.call(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.call(System.Type,System.String,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.call(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="type">A Type</param>
            <param name="methodName">The name of the method to be called.</param>
            <param name="bindingFlags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.calli(System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, <see cref="T:System.Runtime.InteropServices.CallingConvention"/>, Type, Type[]) that
            calls the method indicated on the evaluation stack (as a pointer to an entry point) 
            with arguments described by a calling convention using an unmanaged calling convention.
            </summary>
            <param name="unmanagedCallConv">The unmanaged calling convention to be used.</param>
            <param name="returnType">The Type of the value.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">ILGenerator.EmitCalli</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.calli(System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <summary>
            Calls ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, <see cref="T:System.Runtime.InteropServices.CallingConvention"/>, Type, Type[], Type[]) that
            calls the method indicated on the evaluation stack (as a pointer to an entry point)
            with arguments described by a calling convention using a managed calling convention.
            </summary>
            <param name="callingConvention">The managed calling convention to be used.</param>
            <param name="returnType">The Type of the value.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <param name="optionalParameterTypes">The types of the optional arguments for vararg calls.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">ILGenerator.EmitCalli</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.callvirt(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.callvirt(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.callvirt(System.Type,System.String,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.callvirt(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="bindingFlags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.callvirt(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="bindingFlags">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> 
            that specify how the search is conducted.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.castclass(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Castclass"/>, type) that
            attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Castclass">OpCodes.Castclass</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.castType_any(System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class 
            or to unbox_any if the type is a value type.
            </summary>
            <param name="type">A Type</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.castType(System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class 
            or to unbox if the type is a value type.
            </summary>
            <param name="type">A Type</param>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ceq">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ceq"/>) that
            compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ceq">OpCodes.Ceq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.cgt">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt"/>) that
            compares two values. If the first value is greater than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt">OpCodes.Cgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.cgt_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt_Un"/>) that
            compares two unsigned or unordered values.
            If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">OpCodes.Cgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.constrained(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Constrained"/>) that
            constrains the type on which a virtual method call is made.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">OpCodes.Constrained</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ckfinite">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ckfinite"/>) that
            throws <see cref="T:System.ArithmeticException"/> if value is not a finite number.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ckfinite">OpCodes.Ckfinite</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.clt">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt"/>) that
            compares two values. If the first value is less than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt">OpCodes.Clt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.clt_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt_Un"/>) that
            compares the unsigned or unordered values value1 and value2.
            If value1 is less than value2, then the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt_Un">OpCodes.Clt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I"/>) that
            converts the value on top of the evaluation stack to natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I">OpCodes.Conv_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I1"/>) that
            converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I1">OpCodes.Conv_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I2"/>) that
            converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I2">OpCodes.Conv_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I4"/>) that
            converts the value on top of the evaluation stack to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I4">OpCodes.Conv_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I8"/>) that
            converts the value on top of the evaluation stack to int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I8">OpCodes.Conv_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.conv(System.Type)">
            <summary>
            Converts the value on top of the evaluation stack to the specified type.
            </summary>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I"/>) that
            converts the signed value on top of the evaluation stack to signed natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">OpCodes.Conv_Ovf_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1"/>) that
            converts the signed value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">OpCodes.Conv_Ovf_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i1_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">OpCodes.Conv_Ovf_I1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2"/>) that
            converts the signed value on top of the evaluation stack to signed int16 and extending it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">OpCodes.Conv_Ovf_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i2_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">OpCodes.Conv_Ovf_I2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4"/>) that
            converts the signed value on top of the evaluation tack to signed int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">OpCodes.Conv_Ovf_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i4_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">OpCodes.Conv_Ovf_I4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8"/>) that
            converts the signed value on top of the evaluation stack to signed int64,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">OpCodes.Conv_Ovf_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i8_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">OpCodes.Conv_Ovf_I8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_i_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">OpCodes.Conv_Ovf_I_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U"/>) that
            converts the signed value on top of the evaluation stack to unsigned natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">OpCodes.Conv_Ovf_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1"/>) that
            converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">OpCodes.Conv_Ovf_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u1_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">OpCodes.Conv_Ovf_U1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2"/>) that
            converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">OpCodes.Conv_Ovf_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u2_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">OpCodes.Conv_Ovf_U2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4"/>) that
            Converts the signed value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">OpCodes.Conv_Ovf_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u4_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">OpCodes.Conv_Ovf_U4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8"/>) that
            converts the signed value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">OpCodes.Conv_Ovf_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u8_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">OpCodes.Conv_Ovf_U8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_ovf_u_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned natural int,
            throwing <see cref="T:System.OverflowException"/> on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">OpCodes.Conv_Ovf_U_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R4"/>) that
            converts the value on top of the evaluation stack to float32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R4">OpCodes.Conv_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R8"/>) that
            converts the value on top of the evaluation stack to float64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R8">OpCodes.Conv_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_r_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un"/>) that
            converts the unsigned integer value on top of the evaluation stack to float32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un">OpCodes.Conv_R_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_u">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U"/>) that
            converts the value on top of the evaluation stack to unsigned natural int, and extends it to natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U">OpCodes.Conv_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U1"/>) that
            converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U1">OpCodes.Conv_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U2"/>) that
            converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U2">OpCodes.Conv_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U4"/>) that
            converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U4">OpCodes.Conv_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.conv_u8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U8"/>) that
            converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U8">OpCodes.Conv_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.cpblk">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpblk"/>) that
            copies a specified number bytes from a source address to a destination address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpblk">OpCodes.Cpblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.cpobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpobj"/>, type) that
            copies the value type located at the address of an object (type &amp;, * or natural int) 
            to the address of the destination object (type &amp;, * or natural int).
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpobj">OpCodes.Cpobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.div">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div"/>) that
            divides two values and pushes the value as a floating-point (type F) or
            quotient (type int32) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div">OpCodes.Div</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.div_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div_Un"/>) that
            divides two unsigned integer values and pushes the value (int32) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div_Un">OpCodes.Div_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.dup">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Dup"/>) that
            copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Dup">OpCodes.Dup</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.endfilter">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfilter"/>) that
            transfers control from the filter clause of an exception back to
            the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfilter">OpCodes.Endfilter</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.endfinally">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfinally"/>) that
            transfers control from the fault or finally clause of an exception block back to
            the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfinally">OpCodes.Endfinally</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.initblk">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initblk"/>) that
            initializes a specified block of memory at a specific address to a given size and initial value.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initblk">OpCodes.Initblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.initobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initobj"/>, type) that
            initializes all the fields of the object at a specific address to a null reference or 
            a 0 of the appropriate primitive type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initobj">OpCodes.Initobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.isinst(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Isinst"/>, type) that
            tests whether an object reference (type O) is an instance of a particular class.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Isinst">OpCodes.Isinst</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.jmp(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Jmp"/>, methodInfo) that
            exits current method and jumps to specified method.
            </summary>
            <param name="methodInfo">The method to be jumped.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Jmp">OpCodes.Jmp</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldarg(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short) that
            loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldarg(System.Int32)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short) or 
            ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte) that
            loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldarga(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga"/>, short) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga">OpCodes.Ldarga</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldarga_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga_S"/>, byte) that
            load an argument address, in short form, onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga_S">OpCodes.Ldarga_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldarga(System.Int32)">
            <summary>
            Load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldarg_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_0"/>) that
            loads the argument at index 0 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_0">OpCodes.Ldarg_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldarg_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_1"/>) that
            loads the argument at index 1 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_1">OpCodes.Ldarg_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldarg_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_2"/>) that
            loads the argument at index 2 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_2">OpCodes.Ldarg_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldarg_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_3"/>) that
            loads the argument at index 3 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_3">OpCodes.Ldarg_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldarg_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte) that
            loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <param name="index">Index of the argument value that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_S">OpCodes.Ldarg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldc_bool(System.Boolean)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/> or <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>) that
            pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="b">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldc_i4(System.Int32)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4"/>, int) that
            pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/>) that
            pushes the integer value of 0 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>) that
            pushes the integer value of 1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">OpCodes.Ldc_I4_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2"/>) that
            pushes the integer value of 2 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">OpCodes.Ldc_I4_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3"/>) that
            pushes the integer value of 3 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">OpCodes.Ldc_I4_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4"/>) that
            pushes the integer value of 4 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">OpCodes.Ldc_I4_4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_5">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5"/>) that
            pushes the integer value of 5 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_6">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6"/>) that
            pushes the integer value of 6 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">OpCodes.Ldc_I4_6</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_7">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7"/>) that
            pushes the integer value of 7 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">OpCodes.Ldc_I4_7</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8"/>) that
            pushes the integer value of 8 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">OpCodes.Ldc_I4_8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldc_i4_m1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1"/>) that
            pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">OpCodes.Ldc_I4_M1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldc_i4_(System.Int32)">
            <summary>
            Calls the best form of ILGenerator.Emit(Ldc_I4_X) that
            pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="M:Aoite.Reflection.EmitHelper.ldc_i4(System.Int32)"/>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldc_i4_s(System.SByte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S"/>, byte) that
            pushes the supplied int8 value onto the evaluation stack as an int32, short form.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">OpCodes.Ldc_I4_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldc_i8(System.Int64)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I8"/>, long) that
            pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I8">OpCodes.Ldc_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldc_r4(System.Single)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R4"/>, float) that
            pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R4">OpCodes.Ldc_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldc_r8(System.Double)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R8"/>, double) that
            pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R8">OpCodes.Ldc_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldelema(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelema"/>, type) that
            loads the address of the array element at a specified array index onto the top of the evaluation stack 
            as type &amp; (managed pointer).
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelema">OpCodes.Ldelema</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I"/>) that
            loads the element with type natural int at a specified array index onto the top of the evaluation stack 
            as a natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I">OpCodes.Ldelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1"/>) that
            loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1">OpCodes.Ldelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2"/>) that
            loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2">OpCodes.Ldelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4"/>) that
            loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4">OpCodes.Ldelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8"/>) that
            loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8">OpCodes.Ldelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4"/>) that
            loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4">OpCodes.Ldelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8"/>) that
            loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8">OpCodes.Ldelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref"/>) that
            loads the element containing an object reference at a specified array index 
            onto the top of the evaluation stack as type O (object reference).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">OpCodes.Ldelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1"/>) that
            loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1">OpCodes.Ldelem_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2"/>) that
            loads the element with type unsigned int16 at a specified array index 
            onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2">OpCodes.Ldelem_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldelem_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4"/>) that
            loads the element with type unsigned int32 at a specified array index 
            onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4">OpCodes.Ldelem_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldfld"/>, fieldInfo) that
            finds the value of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldfld">OpCodes.Ldfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldflda(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldflda"/>, fieldInfo) that
            finds the address of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldflda">OpCodes.Ldflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldftn(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldftn"/>, methodInfo) that
            pushes an unmanaged pointer (type natural int) to the native code implementing a specific method 
            onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldftn">OpCodes.Ldftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I"/>) that
            loads a value of type natural int as a natural int onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I">OpCodes.Ldind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I1"/>) that
            loads a value of type int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I1">OpCodes.Ldind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I2"/>) that
            loads a value of type int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I2">OpCodes.Ldind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I4"/>) that
            loads a value of type int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I4">OpCodes.Ldind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I8"/>) that
            loads a value of type int64 as an int64 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I8">OpCodes.Ldind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R4"/>) that
            loads a value of type float32 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R4">OpCodes.Ldind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R8"/>) that
            loads a value of type float64 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R8">OpCodes.Ldind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref"/>) that
            loads an object reference as a type O (object reference) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref">OpCodes.Ldind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U1"/>) that
            loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U1">OpCodes.Ldind_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U2"/>) that
            loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U2">OpCodes.Ldind_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldind_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U4"/>) that
            loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U4">OpCodes.Ldind_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldind(System.Type)">
            <summary>
            Loads a value of the type from a supplied address.
            </summary>
            <param name="type">A Type.</param>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldlen">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldlen"/>) that
            pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldlen">OpCodes.Ldlen</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldloc(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, short) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the local variable value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="localBuilder">Local variable builder.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldloca(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, short) that
            loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldloca_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca_S"/>, byte) that
            loads the address of the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca_S">OpCodes.Ldloca_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldloca(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="local">A <see cref="T:System.Reflection.Emit.LocalBuilder"/> representing the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldloc_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_0"/>) that
            loads the local variable at index 0 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_0">OpCodes.Ldloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldloc_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_1"/>) that
            loads the local variable at index 1 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_1">OpCodes.Ldloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldloc_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_2"/>) that
            loads the local variable at index 2 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_2">OpCodes.Ldloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldloc_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_3"/>) that
            loads the local variable at index 3 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_3">OpCodes.Ldloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldloc_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_S"/>, byte) that
            loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_S">OpCodes.Ldloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.ldnull">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldnull"/>) that
            pushes a null reference (type O) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldnull">OpCodes.Ldnull</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldobj"/>, type) that
            copies the value type object pointed to by an address to the top of the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldobj">OpCodes.Ldobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldsfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsfld"/>, fieldInfo) that
            pushes the value of a static field onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsfld">OpCodes.Ldsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldsflda(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsflda"/>, fieldInfo) that
            pushes the address of a static field onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsflda">OpCodes.Ldsflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldstrEx(System.String)">
            <summary>
            Calls <see cref="M:Aoite.Reflection.EmitHelper.ldstr(System.String)"/> -or- <see cref="P:Aoite.Reflection.EmitHelper.ldnull"/>,
            if given string is a null reference.
            </summary>
            <param name="str">The String to be emitted.</param>
            <seealso cref="M:Aoite.Reflection.EmitHelper.ldstr(System.String)"/>
            <seealso cref="P:Aoite.Reflection.EmitHelper.ldnull"/>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldstr(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldstr"/>, string) that
            pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <param name="str">The String to be emitted.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldstr">OpCodes.Ldstr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldtoken(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, methodInfo) that
            converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldtoken(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, fieldInfo) that
            converts a metadata token to its runtime representation, 
            pushing it onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldtoken(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, type) that
            converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ldvirtftn(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn"/>, methodInfo) that
            pushes an unmanaged pointer (type natural int) to the native code implementing a particular virtual method 
            associated with a specified object onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn">OpCodes.Ldvirtftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.leave(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave"/>, label) that
            exits a protected region of code, unconditionally tranferring control to a specific target instruction.
            </summary>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave">OpCodes.Leave</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.leave_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave_S"/>, label) that
            exits a protected region of code, unconditionally transferring control to a target instruction (short form).
            </summary>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave_S">OpCodes.Leave_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.localloc">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Localloc"/>) that
            allocates a certain number of bytes from the local dynamic memory pool and pushes the address 
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Localloc">OpCodes.Localloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.mkrefany(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mkrefany"/>, type) that
            pushes a typed reference to an instance of a specific type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mkrefany">OpCodes.Mkrefany</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.mul">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul"/>) that
            multiplies two values and pushes the value on the evaluation stack.
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul">OpCodes.Mul</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.mul_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf"/>) that
            multiplies two integer values, performs an overflow check, 
            and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf">OpCodes.Mul_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.mul_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un"/>) that
            multiplies two unsigned integer values, performs an overflow check, 
            and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">OpCodes.Mul_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.neg">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Neg"/>) that
            negates a value and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Neg">OpCodes.Neg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.newarr(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newarr"/>, type) that
            pushes an object reference to a new zero-based, one-dimensional array whose elements 
            are of a specific type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newarr">OpCodes.Newarr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.newobj(System.Reflection.ConstructorInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>, <see cref="T:System.Reflection.ConstructorInfo"/>) that
            creates a new object or a new instance of a value type,
            pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <param name="constructorInfo">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newobj">OpCodes.Newobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.newobj(System.Type,System.Type[])">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>, ConstructorInfo) that
            creates a new object or a new instance of a value type,
            pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <param name="type">A type.</param>
            <param name="parameters">An array of System.Type objects representing
            the number, order, and type of the parameters for the desired constructor.
            -or- An empty array of System.Type objects, to get a constructor that takes
            no parameters. Such an empty array is provided by the static field System.Type.EmptyTypes.</param>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.nop">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Nop"/>) that
            fills space if opcodes are patched. No meaningful operation is performed although 
            a processing cycle can be consumed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Nop">OpCodes.Nop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.not">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Not"/>) that
            computes the bitwise complement of the integer value on top of the stack 
            and pushes the value onto the evaluation stack as the same type.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Not">OpCodes.Not</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.or">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Or"/>) that
            compute the bitwise complement of the two integer values on top of the stack and 
            pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Or">OpCodes.Or</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.pop">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Pop"/>) that
            removes the value currently on top of the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Pop">OpCodes.Pop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.readonly">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>) that
            specifies that the subsequent array address operation performs
            no type check at run time, and that it returns a managed pointer
            whose mutability is restricted.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanytype">OpCodes.Refanytype</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.refanytype">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>) that
            retrieves the type token embedded in a typed reference.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanytype">OpCodes.Refanytype</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.refanyval(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanyval"/>, type) that
            retrieves the address (type &amp;) embedded in a typed reference.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanyval">OpCodes.Refanyval</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.rem">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem"/>) that
            divides two values and pushes the remainder onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem">OpCodes.Rem</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.rem_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem_Un"/>) that
            divides two unsigned values and pushes the remainder onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem_Un">OpCodes.Rem_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.ret">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ret"/>) that
            returns from the current method, pushing a return value (if present) 
            from the caller's evaluation stack onto the callee's evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ret">OpCodes.Ret</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.rethrow">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rethrow"/>) that
            rethrows the current exception.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rethrow">OpCodes.Rethrow</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.shl">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shl"/>) that
            shifts an integer value to the left (in zeroes) by a specified number of bits,
            pushing the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shl">OpCodes.Shl</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.shr">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr"/>) that
            shifts an integer value (in sign) to the right by a specified number of bits,
            pushing the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr">OpCodes.Shr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.shr_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr_Un"/>) that
            shifts an unsigned integer value (in zeroes) to the right by a specified number of bits,
            pushing the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr_Un">OpCodes.Shr_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.sizeof(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sizeof"/>, type) that
            pushes the size, in bytes, of a supplied value type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sizeof">OpCodes.Sizeof</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.starg(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg"/>, short) that
            stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.starg_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg_S"/>, byte) that
            stores the value on top of the evaluation stack in the argument slot at a specified index,
            short form.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg_S">OpCodes.Starg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.starg(System.Int32)">
            <summary>
            Stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I"/>) that
            replaces the array element at a given index with the natural int value 
            on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I">OpCodes.Stelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I1"/>) that
            replaces the array element at a given index with the int8 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I1">OpCodes.Stelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I2"/>) that
            replaces the array element at a given index with the int16 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I2">OpCodes.Stelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I4"/>) that
            replaces the array element at a given index with the int32 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I4">OpCodes.Stelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I8"/>) that
            replaces the array element at a given index with the int64 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I8">OpCodes.Stelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R4"/>) that
            replaces the array element at a given index with the float32 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R4">OpCodes.Stelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R8"/>) that
            replaces the array element at a given index with the float64 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R8">OpCodes.Stelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stelem_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref"/>) that
            replaces the array element at a given index with the object ref value (type O)
            on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref">OpCodes.Stelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stfld"/>, <see cref="T:System.Reflection.FieldInfo"/>) that
            replaces the value stored in the field of an object reference or pointer with a new value.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stfld">OpCodes.Stfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I"/>) that
            stores a value of type natural int at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I">OpCodes.Stind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I1"/>) that
            stores a value of type int8 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I1">OpCodes.Stind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I2"/>) that
            stores a value of type int16 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I2">OpCodes.Stind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I4"/>) that
            stores a value of type int32 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I4">OpCodes.Stind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I8"/>) that
            stores a value of type int64 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I8">OpCodes.Stind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R4"/>) that
            stores a value of type float32 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R4">OpCodes.Stind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R8"/>) that
            stores a value of type float64 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R8">OpCodes.Stind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stind_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_Ref"/>) that
            stores an object reference value at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_Ref">OpCodes.Stind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stind(System.Type)">
            <summary>
            Stores a value of the type at a supplied address.
            </summary>
            <param name="type">A Type.</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index.
            </summary>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stloc(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, short) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index.
            </summary>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stloc_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_0"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 0.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_0">OpCodes.Stloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stloc_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_1"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 1.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_1">OpCodes.Stloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stloc_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_2"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 2.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_2">OpCodes.Stloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.stloc_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_3"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 3.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_3">OpCodes.Stloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stloc_s(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, <see cref="T:System.Reflection.Emit.LocalBuilder"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form).
            </summary>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stloc_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, byte) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form).
            </summary>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stobj"/>, type) that
            copies a value of a specified type from the evaluation stack into a supplied memory address.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stobj">OpCodes.Stobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.stsfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stsfld"/>, fieldInfo) that
            replaces the value of a static field with a value from the evaluation stack.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stsfld">OpCodes.Stsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.sub">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub"/>) that
            subtracts one value from another and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub">OpCodes.Sub</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.sub_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf"/>) that
            subtracts one integer value from another, performs an overflow check,
            and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf">OpCodes.Sub_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.sub_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un"/>) that
            subtracts one unsigned integer value from another, performs an overflow check,
            and pushes the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">OpCodes.Sub_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.switch(System.Reflection.Emit.Label[])">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Switch"/>, label[]) that
            implements a jump table.
            </summary>
            <param name="labels">The array of label objects to which to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Switch">OpCodes.Switch</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.tailcall">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Tailcall"/>) that
            performs a postfixed method call instruction such that the current method's stack frame 
            is removed before the actual call instruction is executed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Tailcall">OpCodes.Tailcall</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.throw">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Throw"/>) that
            throws the exception object currently on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Throw">OpCodes.Throw</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.unaligned(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, label) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.unaligned(System.Int64)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, long) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="addr">An address is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.unbox(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox"/>, type) that
            converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox">OpCodes.Unbox</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.unbox_any(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox_Any"/>, type) that
            converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox_Any">OpCodes.Unbox_Any</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.unboxIfValueType(System.Type)">
            <summary>
            Calls <see cref="M:Aoite.Reflection.EmitHelper.unbox_any(System.Type)"/> if given type is a value type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox_Any">OpCodes.Unbox</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.volatile">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Volatile"/>) that
            specifies that an address currently atop the evaluation stack might be volatile, 
            and the results of reading that location cannot be cached or that multiple stores 
            to that location cannot be suppressed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Volatile">OpCodes.Volatile</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:Aoite.Reflection.EmitHelper.xor">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Xor"/>) that
            computes the bitwise XOR of the top two values on the evaluation stack, 
            pushing the value onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Xor">OpCodes.Xor</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.end">
            <summary>
            Ends sequence of property calls.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.LoadInitValue(System.Type)">
            <summary>
            Loads default value of given type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.LoadWellKnownValue(System.Object)">
            <summary>
            Loads supplied object value (if possible) onto the evaluation stack.
            </summary>
            <param name="o">Any object instance or null reference.</param>
            <returns>True is a value was loaded, otherwise false.</returns>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.Init(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initialize local variable with some default value.
            </summary>
            <param name="localBuilder">A method local variable.</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.LoadType(System.Type)">
            <summary>
            Loads a type instance at runtime.
            </summary>
            <param name="type">A type</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.LoadField(System.Reflection.FieldInfo)">
            <summary>
            Loads a field instance at runtime.
            </summary>
            <param name="fieldInfo">A <see cref="T:System.Reflection.FieldInfo"/> representing a field.</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.CastFromObject(System.Type)">
            <summary>
            Cast an object passed by reference to the specified type
            or unbox a boxed value type.
            </summary>
            <param name="type">A type</param>
        </member>
        <member name="M:Aoite.Reflection.EmitHelper.AddMaxStackSize(System.Int32)">
            <summary>
            Increase max stack size by specified delta.
            </summary>
            <param name="size">Number of bytes to enlarge max stack size.</param>
        </member>
        <member name="T:Aoite.Reflection.Flags">
            <summary>
            This class encapsulates common <see cref="T:System.Reflection.BindingFlags"/> combinations and provides various
            additional Aoite.Reflection-specific flags to further tailor the lookup experience.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.None">
            <summary>
            This value corresponds to the <see href="BindingFlags.Default"/> value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.IgnoreCase">
            <summary>
            This value corresponds to the <see href="BindingFlags.IgnoreCase"/> value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.DeclaredOnly">
            <summary>
            This value corresponds to the <see href="BindingFlags.DeclaredOnly"/> value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.ExactBinding">
            <summary>
            This value corresponds to the <see href="BindingFlags.ExactBinding"/> value. 
            Note that this value is respected even in cases where normal Reflection calls would ignore it.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.Public">
            <summary>
            This value corresponds to the <see href="BindingFlags.Public"/> value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.NonPublic">
            <summary>
            This value corresponds to the <see href="BindingFlags.NonPublic"/> value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.Instance">
            <summary>
            This value corresponds to the <see href="BindingFlags.Instance"/> value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.Static">
            <summary>
            This value corresponds to the <see href="BindingFlags.Static"/> value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.PartialNameMatch">
            <summary>
            If this option is specified the search for a named member will perform a partial match instead
            of an exact match. If <see href="TrimExplicitlyImplemented"/> is specified the trimmed name is
            used instead of the original member name. If <see href="IgnoreCase"/> is specified the 
            comparison uses <see href="StringComparison.OrginalIgnoreCase"/> and otherwise
            uses <see href="StringComparison.Ordinal"/>.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.TrimExplicitlyImplemented">
            <summary>
            If this option is specified the search for a named member will strip off the namespace and
            interface name from explicitly implemented interface members before applying any comparison
            operations.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.ExcludeExplicitlyImplemented">
            <summary>
            If this option is specified the search for members will exclude explicitly implemented
            interface members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.ExcludeBackingMembers">
            <summary>
            If this option is specified all members that are backers for another member, such as backing
            fields for automatic properties or get/set methods for properties, will be excluded from the 
            value.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.IgnoreParameterModifiers">
            <summary>
            If this option is specified the search for methods will avoid checking whether parameters
            have been declared as ref or out. This allows you to locate a method by its signature
            without supplying the exact details for every parameter.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.ExcludeHiddenMembers">
            <summary>
            If this option is specified all members that are have either an override or are being 
            shadowed/hidden (by another member declared using the new keyword) will be excluded from the 
            value. This is implemented by simple name matching of members, ensuring that only the first 
            member with a given name is included in the value. Note that this overlaps partially with
            the behavior of <see cref="F:Aoite.Reflection.Flags.ExcludeBackingMembers"/>, however, an implementation that excludes 
            members based on the presence of the new keyword does not seem to be possible and would
            in any case be much slower.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.AnyVisibility">
            <summary>
            Search criteria encompassing all public and non-public members, including base members.
            Note that you also need to specify either the Instance or Static flag.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.InstancePublic">
            <summary>
            Search criteria encompassing all public instance members, including base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.InstancePrivate">
            <summary>
            Search criteria encompassing all non-public instance members, including base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.InstanceAnyVisibility">
            <summary>
            Search criteria encompassing all public and non-public instance members, including base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.StaticPublic">
            <summary>
            Search criteria encompassing all public static members, including base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.StaticPrivate">
            <summary>
            Search criteria encompassing all non-public static members, including base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.StaticAnyVisibility">
            <summary>
            Search criteria encompassing all public and non-public static members, including base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.InstancePublicDeclaredOnly">
            <summary>
            Search criteria encompassing all public instance members, excluding base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.InstancePrivateDeclaredOnly">
            <summary>
            Search criteria encompassing all non-public instance members, excluding base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.InstanceAnyDeclaredOnly">
            <summary>
            Search criteria encompassing all public and non-public instance members, excluding base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.StaticPublicDeclaredOnly">
            <summary>
            Search criteria encompassing all public static members, excluding base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.StaticPrivateDeclaredOnly">
            <summary>
            Search criteria encompassing all non-public static members, excluding base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.StaticAnyDeclaredOnly">
            <summary>
            Search criteria encompassing all public and non-public static members, excluding base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.StaticInstanceAnyVisibility">
            <summary>
            Search criteria encompassing all members, including base and static members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.Default">
            <summary>
            Search criteria encompassing all public and non-public instance members, including base members.
            </summary>
        </member>
        <member name="F:Aoite.Reflection.Flags.AllMembers">
            <summary>
            Search criteria encompassing all members (public and non-public, instance and static), including base members.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.IsSet(System.Reflection.BindingFlags)">
            <summary>
            Returns true if all values in the given <paramref name="mask"/> are set in the current Flags instance.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.IsSet(Aoite.Reflection.Flags)">
            <summary>
            Returns true if all values in the given <paramref name="mask"/> are set in the current Flags instance.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.IsAnySet(System.Reflection.BindingFlags)">
            <summary>
            Returns true if at least one of the values in the given <paramref name="mask"/> are set in the current Flags instance.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.IsAnySet(Aoite.Reflection.Flags)">
            <summary>
            Returns true if at least one of the values in the given <paramref name="mask"/> are set in the current Flags instance.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.IsNotSet(System.Reflection.BindingFlags)">
            <summary>
            Returns true if all values in the given <paramref name="mask"/> are not set in the current Flags instance.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.IsNotSet(Aoite.Reflection.Flags)">
            <summary>
            Returns true if all values in the given <paramref name="mask"/> are not set in the current Flags instance.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.SetIf(Aoite.Reflection.Flags,Aoite.Reflection.Flags,System.Boolean)">
            <summary>
            Returns a new Flags instance with the union of the values from <paramref name="flags"/> and 
            <paramref name="mask"/> if <paramref name="condition"/> is true, and otherwise returns the
            supplied <paramref name="flags"/>.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.SetOnlyIf(Aoite.Reflection.Flags,Aoite.Reflection.Flags,System.Boolean)">
            <summary>
            Returns a new Flags instance with the union of the values from <paramref name="flags"/> and 
            <paramref name="mask"/> if <paramref name="condition"/> is true, and otherwise returns a new 
            Flags instance with the values from <paramref name="flags"/> that were not in <paramref name="mask"/>.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.ClearIf(Aoite.Reflection.Flags,Aoite.Reflection.Flags,System.Boolean)">
            <summary>
            Returns a new Flags instance returns a new Flags instance with the values from <paramref name="flags"/> 
            that were not in <paramref name="mask"/> if <paramref name="condition"/> is true, and otherwise returns
            the supplied <paramref name="flags"/>.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.Equals(System.Object)">
            <summary>
            Compares the current Flags instance to the given <paramref name="obj"/>.
            Returns true only if <paramref name="obj"/> is a Flags instance representing an identical selection.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.GetHashCode">
            <summary>
            Produces a unique hash code for the current Flags instance.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_Subtraction(Aoite.Reflection.Flags,Aoite.Reflection.Flags)">
            <summary>
            Produces a new Flags instance with the values from <paramref name="f1"/> that were not in <paramref name="f2"/>.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_BitwiseOr(Aoite.Reflection.Flags,Aoite.Reflection.Flags)">
            <summary>
            Produces a new Flags instance with the values from the union of <paramref name="f1"/> and <paramref name="f2"/>.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_BitwiseAnd(Aoite.Reflection.Flags,Aoite.Reflection.Flags)">
            <summary>
            Produces a new Flags instance with the values from the intersection of <paramref name="f1"/> and <paramref name="f2"/>.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_Equality(Aoite.Reflection.Flags,Aoite.Reflection.Flags)">
            <summary>
            Compares two Flags instances and returns true if they represent identical selections.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_Inequality(Aoite.Reflection.Flags,Aoite.Reflection.Flags)">
            <summary>
            Compares two Flags instances and returns true if they represent different selections.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_Implicit(System.Reflection.BindingFlags)~Aoite.Reflection.Flags">
            <summary>
            Converts from BindingFlags to Flags.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_Explicit(System.Int64)~Aoite.Reflection.Flags">
            <summary>
            Converts from long to Flags.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_Implicit(Aoite.Reflection.Flags)~System.Reflection.BindingFlags">
            <summary>
            Converts from Flags to BindingFlags.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.op_Implicit(Aoite.Reflection.Flags)~System.Int64">
            <summary>
            Converts from Flags to long.
            </summary>
        </member>
        <member name="M:Aoite.Reflection.Flags.ToString">
            <summary>
            Returns a string representation of the Flags values selected by the current instance.
            </summary>
        </member>
        <member name="T:CMD.CMDBase">
            <summary>
            表示一个实体命令模型的基类。
            </summary>
        </member>
        <member name="P:CMD.CMDBase.Tunnel">
            <summary>
            获取或设置用于个性化表名和命令的暗道，可以为 null 值。
            </summary>
        </member>
        <member name="T:CMD.CMDWhereBase">
            <summary>
            表示一个条件命令模型的基类。
            </summary>
        </member>
        <member name="P:CMD.CMDWhereBase.Where">
            <summary>
            获取或设置一个 WHERE 的条件参数。
            </summary>
        </member>
        <member name="T:CMD.Add`1">
            <summary>
            表示一个添加的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
        </member>
        <member name="P:CMD.Add`1.Entity">
            <summary>
            获取或设置要添加的实体，可以是匿名对象的部分成员（<see cref="P:CMD.Add`1.Entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
        </member>
        <member name="P:CMD.Add`1.Result">
            <summary>
            获取或设置受影响的行。
            </summary>
        </member>
        <member name="M:CMD.Add`1.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.Add`1"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.GetIdentity`1">
            <summary>
            表示一个获取当前上下文递增列值的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
        </member>
        <member name="P:CMD.GetIdentity`1.Result">
            <summary>
            获取或设置一个值，表示递增列值。
            </summary>
        </member>
        <member name="M:CMD.GetIdentity`1.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.GetIdentity`1"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.Modify`1">
            <summary>
            表示一个修改的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
        </member>
        <member name="P:CMD.Modify`1.Entity">
            <summary>
            获取或设置要修改的实体，可以是匿名对象的部分成员（<see cref="P:CMD.Modify`1.Entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
        </member>
        <member name="P:CMD.Modify`1.Result">
            <summary>
            获取或设置受影响的行。
            </summary>
        </member>
        <member name="M:CMD.Modify`1.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.Modify`1"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.Remove`1">
            <summary>
            表示一个移除的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
        </member>
        <member name="P:CMD.Remove`1.Result">
            <summary>
            获取或设置受影响的行。
            </summary>
        </member>
        <member name="M:CMD.Remove`1.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.Remove`1"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.FindOne`2">
            <summary>
            表示一个查找单项、返回结果为视图类型的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">实体的视图类型。</typeparam>
        </member>
        <member name="P:CMD.FindOne`2.Result">
            <summary>
            获取或设置一个实体。
            </summary>
        </member>
        <member name="P:CMD.FindOne`2.Select">
            <summary>
            获取或设置视图选择器。可以为 null 值，表示不采用匿名对象的方式。
            </summary>
        </member>
        <member name="M:CMD.FindOne`2.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.FindOne`2"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.FindAll`2">
            <summary>
            表示一个查找多项、返回结果为视图类型的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">实体的视图类型。</typeparam>
        </member>
        <member name="P:CMD.FindAll`2.Result">
            <summary>
            获取或设置一个实体的集合。
            </summary>
        </member>
        <member name="P:CMD.FindAll`2.Select">
            <summary>
            获取或设置视图选择器。可以为 null 值，表示不采用匿名对象的方式。
            </summary>
        </member>
        <member name="M:CMD.FindAll`2.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.FindAll`2"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.FindAllPage`2">
            <summary>
            表示一个以分页方式查找多项、返回结果为视图类型的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">实体的视图类型。</typeparam>
        </member>
        <member name="P:CMD.FindAllPage`2.Page">
            <summary>
            获取或设置分页的数据。
            </summary>
        </member>
        <member name="P:CMD.FindAllPage`2.Select">
            <summary>
            获取或设置视图选择器。可以为 null 值，表示不采用匿名对象的方式。
            </summary>
        </member>
        <member name="P:CMD.FindAllPage`2.Result">
            <summary>
            获取或设置一个实体的分页集合。
            </summary>
        </member>
        <member name="M:CMD.FindAllPage`2.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.FindAllPage`2"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.Exists`1">
            <summary>
            表示一个查询条件是否存在的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
        </member>
        <member name="P:CMD.Exists`1.Result">
            <summary>
            获取或设置一个值，指示数据是否存在。
            </summary>
        </member>
        <member name="M:CMD.Exists`1.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.Exists`1"/> 类的新实例。
            </summary>
        </member>
        <member name="T:CMD.RowCount`1">
            <summary>
            表示一个获取查询条件的数据表行数的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
        </member>
        <member name="P:CMD.RowCount`1.Result">
            <summary>
            获取或设置数据的行数。
            </summary>
        </member>
        <member name="M:CMD.RowCount`1.#ctor">
            <summary>
            初始化一个 <see cref="T:CMD.RowCount`1"/> 类的新实例。
            </summary>
        </member>
        <member name="T:System.IIocContainer">
            <summary>
            定义一个服务容器。
            </summary>
        </member>
        <member name="P:System.IIocContainer.Parent">
            <summary>
            获取父级服务容器。
            </summary>
        </member>
        <member name="M:System.IIocContainer.CreateChildContainer">
            <summary>
            创建基于当前服务容器的子服务容器。
            </summary>
            <returns>新的服务容器。</returns>
        </member>
        <member name="M:System.IIocContainer.Imports(System.Action{Aoite.DI.IServiceBuilder})">
            <summary>
            批量构建服务。
            </summary>
            <param name="callback">构建回调函数。</param>
            <returns>当前服务容器。</returns>
        </member>
        <member name="P:System.IIocContainer.DisabledAutoResolving">
            <summary>
            获取或设置一个值，表示是都禁用自动智能解析的功能。
            </summary>
        </member>
        <member name="M:System.IIocContainer.Add(System.Type,System.Boolean,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <param name="expectType">要添加的预期服务类型。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Add(System.Type,System.Type,System.Boolean,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <param name="expectType">要添加的预期服务类型。</param>
            <param name="actualType">实际的服务类型。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Add(System.Type,System.Object,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <param name="expectType">要添加的预期服务类型。</param>
            <param name="serviceInstance">要添加的服务的实例。 此对象必须实现 <paramref name="expectType"/> 参数所指示的类型或从其继承。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Add(System.Type,System.InstanceCreatorCallback,System.Boolean,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <param name="expectType">要添加的预期服务类型。</param>
            <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Add(System.String,System.Object,System.Boolean)">
            <summary>
            将指定的参数名和参数值添加到服务容器中。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Add(System.String,System.InstanceCreatorCallback,System.Boolean,System.Boolean)">
            <summary>
            将指定的参数名和参数值添加到服务容器中。
            </summary>
            <param name="name">参数名称。</param>
            <param name="callback">用于创建参数的回调对象。这允许将参数声明为可用，但将值的创建延迟到请求该参数之后。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Add(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            将指定的参数名和参数值添加到服务容器中，并绑定到关联的预期服务类型的构造函数。
            </summary>
            <param name="expectType">关联的预期服务类型。</param>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Add(System.Type,System.String,System.InstanceCreatorCallback,System.Boolean,System.Boolean)">
            <summary>
            将指定的参数名和参数值添加到服务容器中，并绑定到关联的预期服务类型的构造函数。
            </summary>
            <param name="expectType">关联的预期服务类型。</param>
            <param name="name">参数名称。</param>
            <param name="callback">用于创建参数的回调对象。这允许将参数声明为可用，但将值的创建延迟到请求该参数之后。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Get(System.Type,System.Object[])">
            <summary>
            获取指定类型的服务对象。
            </summary>
            <param name="expectType">一个对象，它指定要获取的服务对象的类型。</param>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns><paramref name="expectType"/> 类型的服务对象。- 或 -如果没有 <paramref name="expectType"/> 类型的服务对象，则为 null。</returns>
        </member>
        <member name="M:System.IIocContainer.GetFixed(System.Type,System.Object[])">
            <summary>
            从手工注册服务列表中，获取指定类型的服务对象。
            </summary>
            <param name="expectType">一个对象，它指定要获取的服务对象的类型。</param>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns><paramref name="expectType"/> 类型的服务对象。- 或 -如果没有 <paramref name="expectType"/> 类型的服务对象，则为 null。</returns>
        </member>
        <member name="M:System.IIocContainer.GetAll(System.Type,System.Object[])">
            <summary>
            获取指定类型的所有服务对象。
            </summary>
            <param name="expectType">一个对象，它指定要获取的服务对象的类型。</param>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns><paramref name="expectType"/> 类型的所有服务对象。</returns>
        </member>
        <member name="M:System.IIocContainer.Get(System.String,System.Object[])">
            <summary>
            获取指定参数名称的值。
            </summary>
            <param name="name">参数名称。</param>
            <param name="lastMappingValues">后期映射的参数值数组。</param>
            <returns>参数名称的值。- 或 -如果没有参数名称的值，则为 null 值。</returns>
        </member>
        <member name="M:System.IIocContainer.Get(System.Type,System.String,System.Object[])">
            <summary>
            获取指定关联的预期服务类型和参数名称的值。
            </summary>
            <param name="expectType">关联的预期服务类型。</param>
            <param name="name">参数名称。</param>
            <param name="lastMappingValues">后期映射的参数值数组。</param>
            <returns>参数名称的值。- 或 -如果没有参数名称的值，则为 null 值。</returns>
        </member>
        <member name="M:System.IIocContainer.Contains(System.Type,System.Boolean)">
            <summary>
            查找服务容器是否包含指定的预期服务类型。
            </summary>
            <param name="expectType">要查找的预期服务类型。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>如果存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.IIocContainer.Contains(System.String,System.Boolean)">
            <summary>
            查找服务容器是否包含指定的参数。
            </summary>
            <param name="name">要查找的参数名称。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>如果存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.IIocContainer.Contains(System.Type,System.String,System.Boolean)">
            <summary>
            查找服务容器是否包含指定关联的预期服务类型指定的参数。
            </summary>
            <param name="expectType">关联的预期服务类型。</param>
            <param name="name">要查找的参数名称。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>如果存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.IIocContainer.Remove(System.Type,System.Boolean)">
            <summary>
            从服务容器中移除指定的预期服务类型。
            </summary>
            <param name="expectType">要移除的预期服务类型。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Remove(System.String,System.Boolean)">
            <summary>
            从服务容器中移除指定的参数。
            </summary>
            <param name="name">要移除的参数名称。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.Remove(System.Type,System.String,System.Boolean)">
            <summary>
            从服务容器中移除指定关联的预期服务类型的参数。
            </summary>
            <param name="expectType">关联的预期服务类型。</param>
            <param name="name">要移除的参数名称。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
        </member>
        <member name="M:System.IIocContainer.DestroyAll">
            <summary>
            销毁所有的映射。
            </summary>
        </member>
        <member name="T:System.ServiceLifetimeAttribute">
            <summary>
            表示服务生命周期的特性。
            </summary>
        </member>
        <member name="P:System.ServiceLifetimeAttribute.Lifetime">
            <summary>
            获取服务的生命周期。
            </summary>
        </member>
        <member name="M:System.ServiceLifetimeAttribute.#ctor(Aoite.DI.ServiceLifetime)">
            <summary>
            提供服务的生命周期，初始化一个 <see cref="T:System.ServiceLifetimeAttribute"/> 类的新实例。
            </summary>
            <param name="lifetime">服务的生命周期。</param>
        </member>
        <member name="T:System.SingletonMappingAttribute">
            <summary>
            表示依赖注入采用单例模式的特性。
            </summary>
        </member>
        <member name="M:System.SingletonMappingAttribute.#ctor">
            <summary>
            初始化一个 <see cref="T:System.SingletonMappingAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="T:System.ScopedMappingAttribute">
            <summary>
            表示依赖注入采用范围模式的特性。
            </summary>
        </member>
        <member name="M:System.ScopedMappingAttribute.#ctor">
            <summary>
            初始化一个 <see cref="T:System.ScopedMappingAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="T:System.OrderMappingAttribute">
            <summary>
            表示依赖注入构造函数的解析排序。
            </summary>
        </member>
        <member name="P:System.OrderMappingAttribute.Order">
            <summary>
            获取或设置一个值，表示构造函数解析排序。数值越小优先解析。默认为 1。
            </summary>
        </member>
        <member name="T:System.DefaultMappingAttribute">
            <summary>
            表示一个默认映射的实际服务类型的特性。
            </summary>
        </member>
        <member name="P:System.DefaultMappingAttribute.ActualType">
            <summary>
            获取默认映射的实际数据类型。
            </summary>
        </member>
        <member name="M:System.DefaultMappingAttribute.#ctor(System.Type)">
            <summary>
            初始化一个 <see cref="T:System.DefaultMappingAttribute"/> 类的新实例。
            </summary>
            <param name="actualType">默认映射的实际数据类型。</param>
        </member>
        <member name="T:System.LastMappingAttribute">
            <summary>
            表示依赖注入后期映射的特性，如果后期依赖元素在非 <see cref="F:System.AttributeTargets.Parameter"/>，而又考虑忽略，可以采用 <see cref="T:System.IgnoreAttribute"/> 对其进行忽略后期绑定。
            </summary>
        </member>
        <member name="T:System.IActualTypeFactory">
            <summary>
            定义一个预期类型工厂。
            </summary>
        </member>
        <member name="M:System.IActualTypeFactory.GetAllActualType(System.Type)">
            <summary>
            获取指定预期服务类型的实际类型名称集合。
            </summary>
            <param name="expectType">预期服务类型。</param>
            <returns>实际类型名称集合。</returns>
        </member>
        <member name="M:System.IocContainer.FindActualType(System.Type)">
            <summary>
            查找指定预期服务类型的实际服务类型。
            </summary>
            <param name="expectType">预期服务类型。</param>
            <returns>找到匹配的实际服务类型，或一个 null 值。</returns>
        </member>
        <member name="M:System.IocContainer.CreateCallback(System.Type,System.Type)">
            <summary>
            指定预期和实际服务类型，创建一个实例构造器的回调函数。
            </summary>
            <param name="expectType">预期服务类型。</param>
            <param name="actualType">实际服务类型。</param>
            <returns>实例构造器委托。</returns>
        </member>
        <member name="M:System.IocContainer.AutoResolving(System.Type,System.Type,System.Boolean)">
            <summary>
            自动解析指定预期和实际服务类型，创建一个服务调用点。
            </summary>
            <param name="expectType">预期服务类型。</param>
            <param name="actualType">实际服务类型。可以是一个 null 值。</param>
            <param name="force">指示一个值，当 <paramref name="actualType"/> 是一个 null 值，并且通过 <paramref name="expectType"/> 找不到实际服务类型时是否抛出异常。</param>
            <returns>服务调用点。</returns>
        </member>
        <member name="M:System.IocContainer.DestroyAll">
            <summary>
            销毁所有的映射。
            </summary>
        </member>
        <member name="F:System.IocContainer.CacheTypeName">
            <summary>
            表示一个缓存列表，映射到指定类型的构造函数的参数名称的实例盒。
            </summary>
        </member>
        <member name="F:System.IocContainer.CacheType">
            <summary>
            表示一个缓存列表，映射对应类型的实例盒。
            </summary>
        </member>
        <member name="T:System.CommandBusExtensions">
            <summary>
            表示 <see cref="T:Aoite.CommandModel.ICommandBus"/> 的扩展方法。
            </summary>
        </member>
        <member name="M:System.CommandBusExtensions.AddAsync``1(Aoite.CommandModel.ICommandBus,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个添加的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.AddAnonymousAsync``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个添加的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.GetIdentityAsync``1(Aoite.CommandModel.ICommandBus,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个获取递增列值的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>递增列值。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.ModifyAsync``1(Aoite.CommandModel.ICommandBus,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个修改的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.ModifyAnonymousAsync``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个修改的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.RemoveAsync``1(Aoite.CommandModel.ICommandBus,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个移除的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例对象，在删除命令中 <paramref name="entity"/> 可以是主键的值（表只有一个主键，值允许是一个数组，表示删除多条记录），也可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.RemoveAnonymousAsync``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个移除的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entityOrPKValues">实体的实例对象，在删除命令中 <paramref name="entityOrPKValues"/> 可以是主键的值（表只有一个主键，值允许是一个数组，表示删除多条记录），也可以是匿名对象的部分成员（<paramref name="entityOrPKValues"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOneAsync``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOneAsync``1(Aoite.CommandModel.ICommandBus,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOneAsync``2(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOneAsync``2(Aoite.CommandModel.ICommandBus,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOneAsync``2(Aoite.CommandModel.ICommandBus,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOneAsync``2(Aoite.CommandModel.ICommandBus,System.String,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.ExistsAsync``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查询主键是否存在的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.ExistsAsync``1(Aoite.CommandModel.ICommandBus,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个查询主键是否存在的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.RowCountAsync``1(Aoite.CommandModel.ICommandBus,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个获取查询条件的数据表行数的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>数据的行数。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Add``1(Aoite.CommandModel.ICommandBus,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个添加的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.AddAnonymous``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个添加的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.GetIdentity``1(Aoite.CommandModel.ICommandBus,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个获取递增列值的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>递增列值。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Modify``1(Aoite.CommandModel.ICommandBus,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个修改的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.ModifyAnonymous``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个修改的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Remove``1(Aoite.CommandModel.ICommandBus,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个移除的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entity">实体的实例对象，在删除命令中 <paramref name="entity"/> 可以是主键的值（表只有一个主键，值允许是一个数组，表示删除多条记录），也可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.RemoveAnonymous``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个移除的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="entityOrPKValues">实体的实例对象，在删除命令中 <paramref name="entityOrPKValues"/> 可以是主键的值（表只有一个主键，值允许是一个数组，表示删除多条记录），也可以是匿名对象的部分成员（<paramref name="entityOrPKValues"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOne``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOne``1(Aoite.CommandModel.ICommandBus,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOne``2(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOne``2(Aoite.CommandModel.ICommandBus,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOne``2(Aoite.CommandModel.ICommandBus,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.FindOne``2(Aoite.CommandModel.ICommandBus,System.String,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查找单项的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Exists``1(Aoite.CommandModel.ICommandBus,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查询主键是否存在的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Exists``1(Aoite.CommandModel.ICommandBus,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个查询主键是否存在的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="keyName">主键的列名。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.RowCount``1(Aoite.CommandModel.ICommandBus,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个一个获取查询条件的数据表行数的命令模型。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>数据的行数。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Filter(Aoite.CommandModel.ICommandBus)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="bus">命令总线。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Filter(Aoite.CommandModel.ICommandBus,System.Object,System.String)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="bus">命令总线。</param>
            <param name="objectInstance">匿名参数集合实例。</param>
            <param name="binary">二元运算符。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Filter(Aoite.CommandModel.ICommandBus,System.Object[])">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="bus">命令总线。</param>
            <param name="keysAndValues">应当是 <see cref="T:System.String"/> / <see cref="T:System.Object"/> 的字典集合。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Filter(Aoite.CommandModel.ICommandBus,Aoite.Data.ExecuteParameterCollection,System.String)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="bus">命令总线。</param>
            <param name="ps">参数集合实例。</param>
            <param name="binary">二元运算符。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Filter(Aoite.CommandModel.ICommandBus,System.Action{Aoite.Data.IWhere})">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="bus">命令总线。</param>
            <param name="whereCallback">一个创建查询条件的回调方法。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Filter(Aoite.CommandModel.ICommandBus,System.String,Aoite.Data.ExecuteParameterCollection)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="bus">命令总线。</param>
            <param name="where">条件表达式。</param>
            <param name="ps">参数集合实例。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Filter(Aoite.CommandModel.ICommandBus,System.WhereParameters)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="bus">命令总线。</param>
            <param name="where">条件参数。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.Call``1(Aoite.CommandModel.ICommandBus,Aoite.CommandModel.ICommand{``0},Aoite.CommandModel.CommandExecutingHandler{Aoite.CommandModel.ICommand{``0}},Aoite.CommandModel.CommandExecutedHandler{Aoite.CommandModel.ICommand{``0}})">
            <summary>
            调用一个命令模型，并返回命令模型执行的值。
            </summary>
            <typeparam name="TResult">返回值的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>命令模型的值。</returns>
        </member>
        <member name="M:System.CommandBusExtensions.CallAsync``1(Aoite.CommandModel.ICommandBus,Aoite.CommandModel.ICommand{``0},Aoite.CommandModel.CommandExecutingHandler{Aoite.CommandModel.ICommand{``0}},Aoite.CommandModel.CommandExecutedHandler{Aoite.CommandModel.ICommand{``0}})">
            <summary>
            以异步的方式调用一个命令模型，并返回命令模型执行的值的异步操作。
            </summary>
            <typeparam name="TResult">返回值的数据类型。</typeparam>
            <param name="bus">命令总线。</param>
            <param name="command">命令模型。</param>
            <param name="executing">命令模型执行前发生的方法。</param>
            <param name="executed">命令模型执行后发生的方法。</param>
            <returns>异步操作。</returns>
        </member>
        <member name="T:System.Db">
            <summary>
            有关于数据的上下文。
            </summary>
        </member>
        <member name="P:System.Db.Engine">
            <summary>
            获取当前运行环境的数据源查询与交互引擎的实例。
            </summary>
        </member>
        <member name="P:System.Db.IsThreadContext">
            <summary>
            获取一个值，指示当前上下文在线程中是否已创建。
            </summary>
        </member>
        <member name="P:System.Db.Context">
            <summary>
            创建并返回一个 <see cref="T:Aoite.Data.DbContext"/>。返回当前线程上下文包含的 <see cref="T:Aoite.Data.DbContext"/> 或创建一个新的  <see cref="T:Aoite.Data.DbContext"/>。
            <para>当释放一个 <see cref="T:Aoite.Data.DbContext"/> 后，下一次调用获取将会重新创建上下文。</para>
            </summary>
        </member>
        <member name="P:System.Db.ContextTransaction">
            <summary>
            创建并返回一个事务性 <see cref="T:Aoite.Data.DbContext"/>。返回当前线程上下文包含的 <see cref="T:Aoite.Data.DbContext"/> 或创建一个新的  <see cref="T:Aoite.Data.DbContext"/>。
            <para>当释放一个 <see cref="T:Aoite.Data.DbContext"/> 后，下一次调用获取将会重新创建上下文。</para>
            </summary>
        </member>
        <member name="M:System.Db.ResetContext">
            <summary>
            释放并关闭当前线程上下文的 <see cref="P:System.Db.Context"/>。
            </summary>
        </member>
        <member name="M:System.Db.SetEngine(Aoite.Data.DbEngine)">
            <summary>
            设置当前运行环境的数据源查询与交互引擎的实例。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
        </member>
        <member name="T:System.IPagination">
            <summary>
            提供分页接口的实现。
            </summary>
        </member>
        <member name="P:System.IPagination.PageNumber">
            <summary>
            获取或设置以 1 起始的页码。
            </summary>
        </member>
        <member name="P:System.IPagination.PageSize">
            <summary>
            获取或设置分页大小。默认为 10。
            </summary>
        </member>
        <member name="T:System.Data.PageTable">
            <summary>
            表示内存中数据的一个分页表。
            </summary>
        </member>
        <member name="M:System.Data.PageTable.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Data.PageTable"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.Data.PageTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用 <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 和 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 初始化一个 <see cref="T:System.Data.PageTable"/> 类的新实例。
            </summary>
            <param name="info">将对象序列化或反序列化所需的数据。</param>
            <param name="context">给定序列化流的源和目的地。</param>
        </member>
        <member name="P:System.Data.PageTable.Total">
            <summary>
            获取数据的总行数。
            </summary>
        </member>
        <member name="M:System.Data.PageTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化 <see cref="T:System.Data.PageTable"/> 所需的数据填充序列化信息对象。
            </summary>
            <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 对象，它包含与 <see cref="T:System.Data.PageTable"/> 关联的序列化数据。</param>
            <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 对象，它包含与 <see cref="T:System.Data.PageTable"/> 关联的序列化流的源和目标。</param>
        </member>
        <member name="T:System.Pagination">
            <summary>
            基于页码的分页实现。
            </summary>
        </member>
        <member name="P:System.Pagination.PageNumber">
            <summary>
            获取或设置以 1 起始的页码。
            </summary>
        </member>
        <member name="P:System.Pagination.PageSize">
            <summary>
            获取或设置分页大小。默认为 10。
            </summary>
        </member>
        <member name="M:System.Pagination.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Pagination"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.Pagination.#ctor(System.Int32)">
            <summary>
            初始化一个 <see cref="T:System.Pagination"/> 类的新实例。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
        </member>
        <member name="M:System.Pagination.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个 <see cref="T:System.Pagination"/> 类的新实例。
            </summary>
            <param name="pageNumber">以 1 起始的页码。</param>
            <param name="pageSize">分页大小。</param>
        </member>
        <member name="T:System.RedisExpireTimeUnit">
            <summary>
            表示 Redis 生存时间单位。
            </summary>
        </member>
        <member name="F:System.RedisExpireTimeUnit.EX">
            <summary>
            表示以秒为单位的生存时间。
            </summary>
        </member>
        <member name="F:System.RedisExpireTimeUnit.PX">
            <summary>
            表示以毫秒为单位的生存时间。
            </summary>
        </member>
        <member name="T:System.RedisKeyBehavior">
            <summary>
            表示 Redis 键的行为。
            </summary>
        </member>
        <member name="F:System.RedisKeyBehavior.None">
            <summary>
            表示采用默认行为。
            </summary>
        </member>
        <member name="F:System.RedisKeyBehavior.NX">
            <summary>
            表示只在键不存在时，才对键进行操作。
            </summary>
        </member>
        <member name="F:System.RedisKeyBehavior.XX">
            <summary>
            只在键已经存在时，才对键进行操作。
            </summary>
        </member>
        <member name="T:System.RedisInsertPosition">
            <summary>
            表示 Redis 的插入位置。
            </summary>
        </member>
        <member name="F:System.RedisInsertPosition.Before">
            <summary>
            表示在指定的元素前插入。
            </summary>
        </member>
        <member name="F:System.RedisInsertPosition.After">
            <summary>
            表示在指定的元素后插入。
            </summary>
        </member>
        <member name="T:System.RedisAggregate">
            <summary>
            表示 Redis 的聚合方式。
            </summary>
        </member>
        <member name="F:System.RedisAggregate.Sum">
            <summary>
            表示“和”聚合。
            </summary>
        </member>
        <member name="F:System.RedisAggregate.Min">
            <summary>
            表示“最小值”聚合。
            </summary>
        </member>
        <member name="F:System.RedisAggregate.Max">
            <summary>
            表示“最大值”聚合。
            </summary>
        </member>
        <member name="T:System.RedisSort">
            <summary>
            表示 Redis 的排序规则。
            </summary>
        </member>
        <member name="F:System.RedisSort.Asc">
            <summary>
            表示正序 (a-z)。
            </summary>
        </member>
        <member name="F:System.RedisSort.Desc">
            <summary>
            表示逆序 (z-a)。
            </summary>
        </member>
        <member name="T:System.RedisConnectionExtensions">
            <summary>
            表示 Redis 的 Connection 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisConnectionExtensions.Ping(Aoite.Redis.IRedisClient)">
            <summary>
            使用客户端向 Redis 服务器发送一个 PING。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisConnectionExtensions.Quit(Aoite.Redis.IRedisClient)">
            <summary>
            请求服务器关闭与当前客户端的连接。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisConnectionExtensions.Select(Aoite.Redis.IRedisClient,System.Int32)">
            <summary>
            切换到指定的数据库，数据库索引号 <paramref name="index"/> 用数字值指定。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="index">以 0 作为起始索引值。</param>
            <returns>结果。</returns>
        </member>
        <member name="T:System.RedisExtensions">
            <summary>
            表示 Redis 的扩展方法。
            </summary>
        </member>
        <member name="F:System.RedisExtensions.DefaultLockTimeout">
            <summary>
            获取或设置默认的锁超时间隔。
            </summary>
        </member>
        <member name="M:System.RedisExtensions.Lock(Aoite.Redis.IRedisClient,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            实现一个 Redis 锁的功能。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">锁的键名。</param>
            <param name="timeout">锁的超时设定。</param>
            <returns>释放时解除占用的锁。</returns>
            <exception cref="T:System.TimeoutException">获取锁超时。</exception>
        </member>
        <member name="T:System.RedisHashExtensions">
            <summary>
            表示 Redis 的 Hash 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisHashExtensions.HDel(Aoite.Redis.IRedisClient,System.String,System.String[])">
            <summary>
            删除哈希表 <paramref name="key"/> 中的一个或多个指定域，不存在的域将被忽略。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="fields">哈希表域的数组。</param>
            <returns>键成功被删除域的数量。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HExists(Aoite.Redis.IRedisClient,System.String,System.String)">
            <summary>
            检查给定哈希表 <paramref name="key"/> 的域是否存在。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="field">键的域。</param>
            <returns>如果 <paramref name="key"/> 的域存在，那么返回 true。否则返回 false。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HGet(Aoite.Redis.IRedisClient,System.String,System.String)">
            <summary>
            返回哈希表 <paramref name="key"/> 所关联域的值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="field">键的域。</param>
            <returns>当 <paramref name="key"/> 的域不存在时，返回 null ，否则返回 <paramref name="key"/> 的域值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HGetAll(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回哈希表 <paramref name="key"/> 中所有的域和值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <returns> <paramref name="key"/> 所有的域和值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HGetAll``1(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回哈希表 <paramref name="key"/> 中所有的域和值，并转换为指定的 <typeparamref name="T"/> 的新实例。
            </summary>
            <typeparam name="T">实体的数据类型。</typeparam>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <returns> <paramref name="key"/> 所有的域和值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HIncrBy(Aoite.Redis.IRedisClient,System.String,System.String,System.Int64)">
            <summary>
            将哈希表 <paramref name="key"/> 中储存给定的域 <paramref name="field"/> 的数字值递增指定的 <paramref name="increment"/> 数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="field">键的域。</param>
            <param name="increment">递增量。</param>
            <returns>递增 <paramref name="increment"/> 之后 <paramref name="key"/> 的域 <paramref name="field"/> 的值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HIncrByFloat(Aoite.Redis.IRedisClient,System.String,System.String,System.Double)">
            <summary>
            将 <paramref name="key"/> 中储存给定的域 <paramref name="field"/> 的数字值递增指定的 <paramref name="increment"/> 浮点数数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="field">键的域。</param>
            <param name="increment">浮点数递增量。</param>
            <returns>递增浮点数 <paramref name="increment"/> 之后 <paramref name="key"/> 的域 <paramref name="field"/> 的值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HDecrBy(Aoite.Redis.IRedisClient,System.String,System.String,System.Int64)">
            <summary>
            将哈希表 <paramref name="key"/> 中储存给定的域 <paramref name="field"/> 的数字值递减指定的 <paramref name="decrement"/> 数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="field">键的域。</param>
            <param name="decrement">递减量。</param>
            <returns>递减 <paramref name="decrement"/> 之后 <paramref name="key"/> 的域 <paramref name="field"/> 的值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HDecrByFloat(Aoite.Redis.IRedisClient,System.String,System.String,System.Double)">
            <summary>
            将 <paramref name="key"/> 中储存给定的域 <paramref name="field"/> 的数字值递减指定的 <paramref name="decrement"/> 浮点数数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="field">键的域。</param>
            <param name="decrement">浮点数递减量。</param>
            <returns>递减浮点数 <paramref name="decrement"/> 之后 <paramref name="key"/> 的域 <paramref name="field"/> 的值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HKeys(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            查找哈希表 <paramref name="key"/> 所有的域名。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <returns> <paramref name="key"/> 所有的域名。当 <paramref name="key"/> 不存在时，返回一个空数组。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HLen(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回哈希表 <paramref name="key"/> 中域的数量。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <returns>哈希表中域的数量。当 <paramref name="key"/> 不存在时返回 0。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HMGet(Aoite.Redis.IRedisClient,System.String,System.String[])">
            <summary>
            返回哈希表 <paramref name="key"/> 中一个或多个域的值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <param name="fields">哈希表域的数组。</param>
            <returns>值的数组。如果给定的域里面，有某个域不存在，那么这个域对应的值为 null 值。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HMSet(Aoite.Redis.IRedisClient,System.String,Aoite.Redis.RedisDictionary)">
            <summary>
            同时设置哈希表 <paramref name="key"/> 中一个或多个域值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <param name="fieldValues">域值的字典。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HMSet(Aoite.Redis.IRedisClient,System.String,Aoite.Redis.RedisFieldItem[])">
            <summary>
            同时设置哈希表 <paramref name="key"/> 中一个或多个域值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <param name="fieldValues">域值的匿名对象。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HMSet(Aoite.Redis.IRedisClient,System.String,System.Object)">
            <summary>
            同时设置哈希表 <paramref name="key"/> 中一个或多个域值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <param name="fieldValues">域值的匿名对象。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HSet(Aoite.Redis.IRedisClient,System.String,System.String,System.BinaryValue,System.Boolean)">
            <summary>
            设置设置哈希表 <paramref name="key"/> 中一个域值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">哈希表的键名。</param>
            <param name="field">键的域。</param>
            <param name="value">域的值。</param>
            <param name="nx">为 true 表示仅当域 <paramref name="field"/> 不存在时设置。</param>
            <returns>设置成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HVals(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            查找哈希表 <paramref name="key"/> 所有的域值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <returns> <paramref name="key"/> 所有的域值。当 <paramref name="key"/> 不存在时，返回一个空数组。</returns>
        </member>
        <member name="M:System.RedisHashExtensions.HScan(Aoite.Redis.IRedisClient,System.String,System.Int64,System.String,System.Int64)">
            <summary>
            哈希表 <paramref name="key"/> 增量地迭代（incrementally iterate）一集元素（a collection of elements）。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <param name="cursor">起始游标，0 表示开始一次新的迭代。</param>
            <param name="pattern">给定模式相匹配的元素。匹配语法可以参考 <seealso cref="M:System.RedisKeyExtensions.Keys(Aoite.Redis.IRedisClient,System.String)"/> 方法。</param>
            <param name="count">每次迭代所返回的元素数量。</param>
            <returns>支持迭代的枚举。</returns>
        </member>
        <member name="T:System.RedisHyperLogLogExtensions">
            <summary>
            表示 Redis 的 HyperLogLog 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisHyperLogLogExtensions.PFAdd(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            将任意数量的元素添加到指定的 HyperLogLog 里面。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">HyperLogLog 的键名。</param>
            <param name="elements">元素的数组。</param>
            <returns>如果 HyperLogLog 的内部储存被修改了，那么返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:System.RedisHyperLogLogExtensions.PFCount(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            返回储存在给定键（或给定键数组的并集）的 HyperLogLog 的近似基数。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keys">HyperLogLog 的键名数组。</param>
            <returns>给定单个键时，返回储存在给定键的 HyperLogLog 的近似基数。给定多个键时，返回所有给定 HyperLogLog 的并集的近似基数，这个近似基数是通过将所有给定 HyperLogLog 合并至一个临时 HyperLogLog 来计算得出的。</returns>
        </member>
        <member name="M:System.RedisHyperLogLogExtensions.PFMerge(Aoite.Redis.IRedisClient,System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并（merge）为一个 HyperLogLog， 合并后的 HyperLogLog 的基数接近于所有输入 HyperLogLog 的可见集合（observed set）的并集。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="destKey">目标键名。合并得出的 HyperLogLog 会被储存在 <paramref name="destKey"/> 键里面，如果该键并不存在，那么命令在执行之前，会先为该键创建一个空的 HyperLogLog。</param>
            <param name="sourceKeys">源键名列表。</param>
            <returns>结果。</returns>
        </member>
        <member name="T:System.RedisKeyExtensions">
            <summary>
            表示 Redis 的 Key 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisKeyExtensions.Del(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            删除给定的一个或多个键。不存在的键会被忽略。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keys">键的数组。</param>
            <returns>被删除键的数量。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Exists(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            检查给定 <paramref name="key"/> 是否存在。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <returns>如果 <paramref name="key"/> 存在，那么返回 true。否则返回 false。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Expire(Aoite.Redis.IRedisClient,System.String,System.TimeSpan,System.RedisExpireTimeUnit)">
            <summary>
            为给定 <paramref name="key"/> 设置生存时间，当 <paramref name="key"/> 过期时(生存时间为 0 )，它会被自动删除。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="expiration">生存时间。</param>
            <param name="timeUnit">定位生存时间的单位。</param>
            <returns>设置成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Expire(Aoite.Redis.IRedisClient,System.String,System.Int64,System.RedisExpireTimeUnit)">
            <summary>
            为给定 <paramref name="key"/> 设置生存时间，当 <paramref name="key"/> 过期时(生存时间为 0 )，它会被自动删除。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="expiration">生存时间。</param>
            <param name="timeUnit">定位生存时间的单位。</param>
            <returns>如果设置生存时间成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.ExpireAt(Aoite.Redis.IRedisClient,System.String,System.DateTime,System.RedisExpireTimeUnit)">
            <summary>
            为给定 <paramref name="key"/> 设置生存时间，当 <paramref name="key"/> 过期时(生存时间为 0 )，它会被自动删除。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="expirationDate">到期时间。</param>
            <param name="timeUnit">定位生存时间的单位。</param>
            <returns>如果设置生存时间成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.ExpireAt(Aoite.Redis.IRedisClient,System.String,System.Int64,System.RedisExpireTimeUnit)">
            <summary>
            为给定 <paramref name="key"/> 设置生存时间，当 <paramref name="key"/> 过期时(生存时间为 0 )，它会被自动删除。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="timestamp">UNIX 时间戳(unix timestamp)。</param>
            <param name="timeUnit">定位生存时间的单位。</param>
            <returns>如果设置生存时间成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Ttl(Aoite.Redis.IRedisClient,System.String,System.RedisExpireTimeUnit)">
            <summary>
            返回给定 <paramref name="key"/> 的剩余生存时间。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="timeUnit">定位生存时间的单位。</param>
            <returns>当 key 不存在时，返回 -2 。当 <paramref name="key"/> 存在但没有设置剩余生存时间时，返回 -1 。否则，以秒为单位，返回 <paramref name="key"/> 的剩余生存时间。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Keys(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            查找所有符合给定模式 <paramref name="pattern"/> 的键 。
            <para>KEYS 的速度非常快，但在一个大的数据库中使用它仍然可能造成性能问题，如果你需要从一个数据集中查找特定的键，你最好还是用 Redis 的集合结构(set)来代替。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="pattern">模式表达式。
            <para>1、KEYS * 匹配数据库中所有 key 。</para>
            <para>2、KEYS h?llo 匹配 hello ，hallo 和 hxllo 等。</para>
            <para>3、KEYS h*llo 匹配 hllo 和 heeeeello 等。</para>
            <para>4、KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。</para>
            <para>5、特殊符号用 \ 隔开。</para>
            </param>
            <returns>符合给定模式的键列表。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Move(Aoite.Redis.IRedisClient,System.String,System.Int32)">
            <summary>
            将当前数据库的 <paramref name="key"/> 移动到给定的数据库 <paramref name="database"/> 当中。
            <para>1、若源数据库不存在 <paramref name="key"/>，移动将会失败。</para>
            <para>2、若目标数据库已存在 <paramref name="key"/>，移动将会失败。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="database">目标数据库索引。</param>
            <returns>如果移动成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Persist(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            移除给定 <paramref name="key"/> 的生存时间，将这个 <paramref name="key"/> 从『易失的』(带生存时间 <paramref name="key"/> )转换成『持久的』(一个不带生存时间、永不过期的 <paramref name="key"/> )。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <returns>如果生存时间移除成功，那么返回 true。否则返回 false。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.RandomKey(Aoite.Redis.IRedisClient)">
            <summary>
            从当前数据库中随机返回一个键 。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>当数据库不为空时，返回一个键。当数据库为空时，返回 null。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Rename(Aoite.Redis.IRedisClient,System.String,System.String)">
            <summary>
            将 <paramref name="key"/> 改名为 <paramref name="newKey"/>。
            <para>1、当 <paramref name="key"/> 和 <paramref name="newKey"/> 相同，或者 <paramref name="key"/> 不存在时，返回一个错误。</para>
            <para>2、当 <paramref name="newKey"/> 已经存在时，RENAME 命令将覆盖旧值。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="newKey">新的键名。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.RenameNx(Aoite.Redis.IRedisClient,System.String,System.String)">
            <summary>
            当 <paramref name="newKey"/> 不存在时，将 <paramref name="key"/> 改名为 <paramref name="newKey"/>。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="newKey">新的键名。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Type(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回 <paramref name="key"/> 所储存的值的类型。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <returns>储存的值的类型。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Scan(Aoite.Redis.IRedisClient,System.Int64,System.String,System.Int64)">
            <summary>
            增量地迭代（incrementally iterate）一集元素（a collection of elements）。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="cursor">起始游标，0 表示开始一次新的迭代。</param>
            <param name="pattern">给定模式相匹配的元素。匹配语法可以参考 <seealso cref="M:System.RedisKeyExtensions.Keys(Aoite.Redis.IRedisClient,System.String)"/> 方法。</param>
            <param name="count">每次迭代所返回的元素数量。</param>
            <returns>支持迭代的枚举。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.Sort(Aoite.Redis.IRedisClient,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.RedisSort},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="by">按其元素来排序。</param>
            <param name="offset">指定要跳过的元素数量。</param>
            <param name="count">指定跳过 <paramref name="offset"/> 个指定的元素之后，要返回多少个对象。</param>
            <param name="sort">排序方式。</param>
            <param name="alpha">表示对字符串进行排序。</param>
            <param name="get">根据排序的结果来取出相应的键值列表。</param>
            <returns>列表形式的排序结果。</returns>
        </member>
        <member name="M:System.RedisKeyExtensions.SortStore(Aoite.Redis.IRedisClient,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.RedisSort},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回保存给定列表、集合、有序集合 key 中经过排序的元素数量。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="destination">目标键名。</param>
            <param name="by">按其元素来排序。</param>
            <param name="offset">指定要跳过的元素数量。</param>
            <param name="count">指定跳过 <paramref name="offset"/> 个指定的元素之后，要返回多少个对象。</param>
            <param name="sort">排序方式。</param>
            <param name="alpha">表示对字符串进行排序。</param>
            <param name="get">根据排序的结果来取出相应的键值列表。</param>
            <returns>保存列表形式的排序结果的元素数量。</returns>
        </member>
        <member name="T:System.RedisListExtensions">
            <summary>
            表示 Redis 的 List 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisListExtensions.BLPop(Aoite.Redis.IRedisClient,System.Int64,System.String[])">
            <summary>
            阻塞式(blocking)移除并返回列表键的头元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="timeout">接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。</param>
            <param name="keys">按参数键的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。</param>
            <returns>在指定时间内，如果列表为空，返回一个 null。否则，返回一个含有键值的元素项。</returns>
        </member>
        <member name="M:System.RedisListExtensions.BLPop(Aoite.Redis.IRedisClient,System.TimeSpan,System.String[])">
            <summary>
            阻塞式(blocking)移除并返回列表键的头元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="timeout">接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。</param>
            <param name="keys">按参数键的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。</param>
            <returns>在指定时间内，如果列表为空，返回一个 null。否则，返回一个含有键值的元素项。</returns>
        </member>
        <member name="M:System.RedisListExtensions.BRPop(Aoite.Redis.IRedisClient,System.Int64,System.String[])">
            <summary>
            阻塞式(blocking)移除并返回列表键的尾元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="timeout">接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。</param>
            <param name="keys">按参数键的先后顺序依次检查各个列表，弹出第一个非空列表的尾元素。</param>
            <returns>在指定时间内，如果列表为空，返回一个 null。否则，返回一个含有键值的元素项。</returns>
        </member>
        <member name="M:System.RedisListExtensions.BRPop(Aoite.Redis.IRedisClient,System.TimeSpan,System.String[])">
            <summary>
            阻塞式(blocking)移除并返回列表键的尾元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="timeout">接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。</param>
            <param name="keys">按参数键的先后顺序依次检查各个列表，弹出第一个非空列表的尾元素。</param>
            <returns>在指定时间内，如果列表为空，返回一个 null。否则，返回一个含有键值的元素项。</returns>
        </member>
        <member name="M:System.RedisListExtensions.BRPopLPush(Aoite.Redis.IRedisClient,System.String,System.String,System.Int64)">
            <summary>
            阻塞式(blocking)将列表 <paramref name="source"/> 中的尾元素弹出，并返回给客户端。并将 <paramref name="source"/> 弹出的元素插入到列表 <paramref name="destination"/> ，作为 <paramref name="destination"/> 列表的的头元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="source">源列表。</param>
            <param name="destination">目标列表。</param>
            <param name="timeout">接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。</param>
            <returns>在指定时间内，如果列表为空，返回一个 null。否则，返回元素项的值。</returns>
        </member>
        <member name="M:System.RedisListExtensions.BRPopLPush(Aoite.Redis.IRedisClient,System.String,System.String,System.TimeSpan)">
            <summary>
            阻塞式(blocking)将列表 <paramref name="source"/> 中的尾元素弹出，并返回给客户端。并将 <paramref name="source"/> 弹出的元素插入到列表 <paramref name="destination"/> ，作为 <paramref name="destination"/> 列表的的头元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="source">源列表。</param>
            <param name="destination">目标列表。</param>
            <param name="timeout">接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。</param>
            <returns>在指定时间内，如果列表为空，返回一个 null。否则，返回元素项的值。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LIndex(Aoite.Redis.IRedisClient,System.String,System.Int64)">
            <summary>
            返回列表 <paramref name="key"/> 中，下标为 <paramref name="index"/> 的元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="index">下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。
            <para>也可以使用负数下标，以 -1 表示列表的最后一个元素，-2 表示列表的倒数第二个元素，以此类推。</para>
            </param>
            <returns>列表中下标为 <paramref name="index"/> 的元素。如果 <paramref name="index"/> 参数的值不在列表的区间范围内(out of range)，返回 null。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LInsert(Aoite.Redis.IRedisClient,System.String,System.RedisInsertPosition,System.String,System.BinaryValue)">
            <summary>
            将值 <paramref name="value"/> 插入到列表 <paramref name="key"/> 当中，位于值 <paramref name="pivot"/> 之前或之后。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="position">插入的位置。</param>
            <param name="pivot">定位的支点键名。</param>
            <param name="value">插入的值。</param>
            <returns>插入的结果。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LLen(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回列表 <paramref name="key"/> 的长度。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <returns>列表 <paramref name="key"/> 的长度。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LPop(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            移除并返回列表 <paramref name="key"/> 的头元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <returns>列表的头元素。当 <paramref name="key"/> 不存在时，返回 null。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LPush(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            将一个或多个值按从左到右的顺序依次插入到列表 <paramref name="key"/> 的表头。
            <para>如果 <paramref name="key"/> 不存在，一个空列表会被创建并执行 LPUSH 操作。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="values">值元素的数组。当数组长度为 0 时将会抛出异常。</param>
            <returns>执行命令列表的总长度。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LPushX(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            将一个或多个值按从左到右的顺序依次插入到列表 <paramref name="key"/> 的表头。
            <para>当 <paramref name="key"/> 不存在时，LPUSHX 命令什么也不做。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="values">值元素的数组。当数组长度为 0 时将会抛出异常。</param>
            <returns>执行命令列表的总长度。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LRange(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            返回列表 <paramref name="key"/> 中指定区间内的元素，区间以偏移量 <paramref name="start"/> 和 <paramref name="stop"/> 指定。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="stop">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>包含指定区间内的元素。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LRem(Aoite.Redis.IRedisClient,System.String,System.Int64,System.BinaryValue)">
            <summary>
            根据参数 <paramref name="count"/> 的值，移除列表中与参数 <paramref name="value"/> 相等的元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="count">移除的数量。
            <para>1、<paramref name="count"/> &gt; 0 : 从表头开始向表尾搜索，移除与 <paramref name="value"/> 相等的元素，数量为 <paramref name="count"/> 。</para>
            <para>2、<paramref name="count"/> &lt; 0 : 从表尾开始向表头搜索，移除与 <paramref name="value"/> 相等的元素，数量为 <paramref name="count"/> 的绝对值。</para>
            <para>3、<paramref name="count"/> = 0 : 移除表中所有与 <paramref name="value"/> 相等的值。</para>
            </param>
            <param name="value">匹配的元素值。</param>
            <returns>被移除元素的数量。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LSet(Aoite.Redis.IRedisClient,System.String,System.Int64,System.BinaryValue)">
            <summary>
            将列表 <paramref name="key"/> 下标为 <paramref name="index"/> 的元素的值设置为 <paramref name="value"/> 。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="index">设置的索引。
            <para>当 <paramref name="index"/> 参数超出范围，或对一个空列表( <paramref name="key"/> 不存在)进行 LSET 时，返回一个错误</para>
            </param>
            <param name="value">设置的元素值。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisListExtensions.LTrim(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪(trim)，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="stop">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisListExtensions.RPop(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            移除并返回列表 <paramref name="key"/> 的尾元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <returns>列表的尾元素。当 <paramref name="key"/> 不存在时，返回 null。</returns>
        </member>
        <member name="M:System.RedisListExtensions.RPopLPush(Aoite.Redis.IRedisClient,System.String,System.String)">
            <summary>
            将列表 <paramref name="source"/> 中的尾元素弹出，并返回给客户端。并将 <paramref name="source"/> 弹出的元素插入到列表 <paramref name="destination"/> ，作为 <paramref name="destination"/> 列表的的头元素。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="source">源列表。</param>
            <param name="destination">目标列表。</param>
            <returns>如果列表为空，返回一个 null。否则，返回元素项的值。</returns>
        </member>
        <member name="M:System.RedisListExtensions.RPush(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            将一个或多个值按从左到右的顺序依次插入到列表 <paramref name="key"/> 的表尾。
            <para>如果 <paramref name="key"/> 不存在，一个空列表会被创建并执行 RPush 操作。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="values">值元素的数组。当数组长度为 0 时将会抛出异常。</param>
            <returns>执行命令列表的总长度。</returns>
        </member>
        <member name="M:System.RedisListExtensions.RPushX(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            将一个或多个值按从左到右的顺序依次插入到列表 <paramref name="key"/> 的表尾。
            <para>当 <paramref name="key"/> 不存在时，RPUSHX 命令什么也不做。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">列表的键名。</param>
            <param name="values">值元素的数组。当数组长度为 0 时将会抛出异常。</param>
            <returns>执行命令列表的总长度。</returns>
        </member>
        <member name="T:System.RedisScriptExtensions">
            <summary>
            表示 Redis 的 Script 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisScriptExtensions.Eval(Aoite.Redis.IRedisClient,System.String,Aoite.Redis.RedisDictionary)">
            <summary>
            执行 Lua 脚本进行求值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="script">Lua 脚本代码。</param>
            <param name="keyArgs">键名和参数值的字典。</param>
            <returns>执行脚本后的值。</returns>
        </member>
        <member name="M:System.RedisScriptExtensions.EvalSHA(Aoite.Redis.IRedisClient,System.String,Aoite.Redis.RedisDictionary)">
            <summary>
            根据给定的 sha1 校验码，对缓存在服务器中的脚本进行求值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="sha1">sha1 校验码。</param>
            <param name="keyArgs">键名和参数值的字典。</param>
            <returns>执行脚本后的值。</returns>
        </member>
        <member name="M:System.RedisScriptExtensions.ScriptExists(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            给定一个或多个脚本的 SHA1 校验和，表示校验和所指定的脚本是否已经被保存在缓存当中。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="scripts">sha1 校验码列表。</param>
            <returns>脚本已经被保存在缓存当中为 true，否则为 false 的数组。</returns>
        </member>
        <member name="M:System.RedisScriptExtensions.ScriptFlush(Aoite.Redis.IRedisClient)">
            <summary>
            清除所有 Lua 脚本缓存。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisScriptExtensions.ScriptKill(Aoite.Redis.IRedisClient)">
            <summary>
            杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。
            <para>这个命令主要用于终止运行时间过长的脚本，比如一个因为 BUG 而发生无限 loop 的脚本，诸如此类。</para>
            <para>SCRIPT KILL 执行之后，当前正在运行的脚本会被杀死，执行这个脚本的客户端会从 EVAL 命令的阻塞当中退出，并收到一个错误作为返回值。</para>
            <para>另一方面，假如当前正在运行的脚本已经执行过写操作，那么即使执行 SCRIPT KILL ，也无法将它杀死，因为这是违反 Lua 脚本的原子性执行原则的。在这种情况下，唯一可行的办法是使用 SHUTDOWN NOSAVE 命令，通过停止整个 Redis 进程来停止脚本的运行，并防止不完整(half-written)的信息被写入数据库中。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisScriptExtensions.ScriptLoad(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            将脚本 <paramref name="script"/> 添加到脚本缓存中，但并不立即执行这个脚本。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="script">Lua 脚本代码。</param>
            <returns>给定 <paramref name="script"/> 的 SHA1 校验和。</returns>
        </member>
        <member name="T:System.RedisServerExtensions">
            <summary>
            表示 Redis 的 Server 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisServerExtensions.BgRewriteAof(Aoite.Redis.IRedisClient)">
            <summary>
            执行一个 AOF文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。
            <para>即使 BGREWRITEAOF 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 BGREWRITEAOF 成功之前不会被修改。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.BgSave(Aoite.Redis.IRedisClient)">
            <summary>
            在后台异步保存当前数据库的数据到磁盘。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ClientGetName(Aoite.Redis.IRedisClient)">
            <summary>
            返回 CLIENT SETNAME 命令为连接设置的名字。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>如果连接没有设置名字，那么返回空白回复；如果有设置名字，那么返回名字。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ClientKill(Aoite.Redis.IRedisClient,System.String,System.Int32)">
            <summary>
            关闭地址为指定地址和端口的客户端。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="ip">客户端地址。</param>
            <param name="port">客户端端口。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ClientKill(Aoite.Redis.IRedisClient,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            With the new form it is possible to kill clients by different attributes instead of killing just by address.
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="addr">ip:port. This is exactly the same as the old three-arguments behavior.</param>
            <param name="id">client-id. Allows to kill a client by its unique ID field, which was introduced in the CLIENT LIST command starting from Redis 2.8.12.</param>
            <param name="type">type, where type is one of normal, slave, pubsub. This closes the connections of all the clients in the specified class. Note that clients blocked into the MONITOR command are considered to belong to the normal class.</param>
            <param name="skipMe">By default this option is set to yes, that is, the client calling the command will not get killed, however setting this option to no will have the effect of also killing the client calling the command.</param>
            <returns>Returns the number of clients killed.</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ClientList(Aoite.Redis.IRedisClient)">
            <summary>
            返回 CLIENT SETNAME 命令为连接设置的名字。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>如果连接没有设置名字，那么返回空白回复；如果有设置名字，那么返回名字。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ClientSetName(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            为当前连接分配一个名字。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="connectionName">用于识别当前正在与服务器进行连接的客户端名称。
            <para>要移除一个连接的名字， 可以将连接的名字设为空字符串 "" 。</para>
            </param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ConfigGet(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            取得运行中的 Redis 服务器的配置参数。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="parameter">搜索关键字，查找所有匹配的配置参数。</param>
            <returns>给定配置参数和值。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ConfigResetStat(Aoite.Redis.IRedisClient)">
            <summary>
            在后台异步保存当前数据库的数据到磁盘。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ConfigRewrite(Aoite.Redis.IRedisClient)">
            <summary>
            启动 Redis 服务器时所指定的 redis.conf 文件进行改写。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.ConfigSet(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            动态地调整 Redis 服务器的配置。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="parameter">配置参数。</param>
            <param name="value">参数的值。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.DbSize(Aoite.Redis.IRedisClient)">
            <summary>
            返回当前数据库的键的数量。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>当前数据库的键的数量。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.FlushAll(Aoite.Redis.IRedisClient)">
            <summary>
            清空整个 Redis 服务器的数据(删除所有数据库的所有键)。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.FlushDb(Aoite.Redis.IRedisClient)">
            <summary>
            清空当前数据库中的所有键。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.Info(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            以一种易于解释（parse）且易于阅读的格式，返回关于 Redis 服务器的各种信息和统计数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="section">节点。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.LastSave(Aoite.Redis.IRedisClient)">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间。
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>时间。</returns>
        </member>
        <member name="M:System.RedisServerExtensions.Save(Aoite.Redis.IRedisClient)">
            <summary>
            将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。
            <para>一般来说，在生产环境很少执行 SAVE 操作，因为它会阻塞所有客户端，保存数据库的任务通常由 BGSAVE 命令异步地执行。然而，如果负责保存数据的后台子进程不幸出现问题时， SAVE 可以作为保存数据的最后手段来使用。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="T:System.RedisSetExtensions">
            <summary>
            表示 Redis 的 Set 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisSetExtensions.SAdd(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            将一个或多个成员加入到集合 <paramref name="key"/> 当中，已经存在于集合的成员将被忽略。
            <para>假如 <paramref name="key"/> 不存在，则创建一个只包含成员作成员的集合。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <param name="members">成员的数组。</param>
            <returns>被添加到集合中的新成员的数量，不包括被忽略的成员。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SCard(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回集合 <paramref name="key"/> 的基数(集合中成员的数量)。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <returns>集合 <paramref name="key"/> 的基数。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SDiff(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            返回一个集合的全部成员，该集合是所有给定集合之间的差集。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keys">集合的键名数组。</param>
            <returns>包含差集成员列表。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SDiffStore(Aoite.Redis.IRedisClient,System.String,System.String[])">
            <summary>
            将所有给定集合之间的差集保存到 <paramref name="destination"/> 集合。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="destination">目标集合。</param>
            <param name="keys">集合的键名数组。</param>
            <returns>结果集中的成员数量。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SInter(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            返回一个集合的全部成员，该集合是所有给定集合之间的交集。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keys">集合的键名数组。</param>
            <returns>包含交集成员列表。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SInterStore(Aoite.Redis.IRedisClient,System.String,System.String[])">
            <summary>
            将所有给定集合之间的交集保存到 <paramref name="destination"/> 集合。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="destination">目标集合。</param>
            <param name="keys">集合的键名数组。</param>
            <returns>结果集中的成员数量。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SIsMember(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            判断 <paramref name="member"/> 是否集合 <paramref name="key"/> 的成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <param name="member">集合的成员。</param>
            <returns>存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SMembers(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回一个集合的全部成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <returns>集合的所有成员。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SMove(Aoite.Redis.IRedisClient,System.String,System.String,System.BinaryValue)">
            <summary>
            将 <paramref name="member"/> 从 <paramref name="source"/> 集合移动到 <paramref name="destination"/> 集合。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="source">源集合。</param>
            <param name="destination">目标集合。</param>
            <param name="member">移动的成员。</param>
            <returns>表示移动是否成功。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SPop(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            移除并返回集合中的一个随机成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <returns>被移除的随机成员。当 <paramref name="key"/> 不存在或 <paramref name="key"/> 是空集时，返回 null。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SRandMember(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回集合中的一个随机成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <returns>随机成员。当 <paramref name="key"/> 不存在或 <paramref name="key"/> 是空集时，返回 null。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SRandMember(Aoite.Redis.IRedisClient,System.String,System.Int64)">
            <summary>
            返回集合中的一组随机成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <param name="count">数组的长度。
            <para>1、如果 <paramref name="count"/> 为正数，且小于集合基数，那么命令返回一个包含 <paramref name="count"/> 个元素的数组，数组中的元素各不相同。如果 <paramref name="count"/> 大于等于集合基数，那么返回整个集合。</para>
            <para>2、如果 <paramref name="count"/> 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 <paramref name="count"/> 的绝对值。</para>
            </param>
            <returns>一组的随机成员。当 <paramref name="key"/> 不存在或 <paramref name="key"/> 是空集时，返回空数组。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SRem(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            移除集合 <paramref name="key"/> 中的一个或多成员，不存在的成员会被忽略。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <param name="members">成员的数组。</param>
            <returns>被成功移除的成员的数量，不包括被忽略的成员。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SUnion(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            返回一个集合的全部成员，该集合是所有给定集合之间的并集。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keys">集合的键名数组。</param>
            <returns>包含并集成员列表。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SUnionStore(Aoite.Redis.IRedisClient,System.String,System.String[])">
            <summary>
            将所有给定集合之间的并集保存到 <paramref name="destination"/> 集合。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="destination">目标集合。</param>
            <param name="keys">集合的键名数组。</param>
            <returns>结果集中的成员数量。</returns>
        </member>
        <member name="M:System.RedisSetExtensions.SScan(Aoite.Redis.IRedisClient,System.String,System.Int64,System.String,System.Int64)">
            <summary>
            集合 <paramref name="key"/> 增量地迭代（incrementally iterate）一集元素（a collection of elements）。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名</param>
            <param name="cursor">起始游标，0 表示开始一次新的迭代。</param>
            <param name="pattern">给定模式相匹配的元素。匹配语法可以参考 <seealso cref="M:System.RedisKeyExtensions.Keys(Aoite.Redis.IRedisClient,System.String)"/> 方法。</param>
            <param name="count">每次迭代所返回的元素数量。</param>
            <returns>支持迭代的枚举。</returns>
        </member>
        <member name="T:System.RedisSortedSetExtensions">
            <summary>
            表示 Redis 的 SortedSet 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZAdd(Aoite.Redis.IRedisClient,System.String,Aoite.Redis.RedisScoreItem[])">
            <summary>
            将一个或多个成员及其权重值加入到有序集 <paramref name="key"/> 当中。
            <para>如果某个成员已经是有序集的成员，那么更新这个成员的权重值，并通过重新插入这个成员，来保证该成员在正确的位置上。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="items">成员权重项的数组。</param>
            <returns>被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZCard(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回有序集 <paramref name="key"/> 的基数(集合中成员的数量)。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <returns>集合 <paramref name="key"/> 的基数。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZCount(Aoite.Redis.IRedisClient,System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            返回有序集 <paramref name="key"/> 中，权重值在 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员的数量。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="min">权重最小值。<paramref name="min"/> 可以是 <see cref="F:System.Double.MinValue"/> -或- <see cref="F:System.Double.NegativeInfinity"/>，表示有序集的最小值。</param>
            <param name="max">权重最大值。<paramref name="max"/> 可以是 <see cref="F:System.Double.MaxValue"/> -或- <see cref="F:System.Double.PositiveInfinity"/>，表示有序集的最高值。</param>
            <param name="exclusiveMin">指示最小值是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <returns>权重值包含指定区间的成员数量。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZIncrBy(Aoite.Redis.IRedisClient,System.String,System.Double,System.BinaryValue)">
            <summary>
            为有序集 <paramref name="key"/> 的成员 <paramref name="member"/> 的权重值加上增量 <paramref name="increment"/>。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="increment">递增量。可以通过传递一个负数值 <paramref name="increment"/> ，让权重减去相应的值。</param>
            <param name="member">有序集的成员。</param>
            <returns>递增 <paramref name="increment"/> 之后 <paramref name="key"/> 的 <paramref name="member"/> 的权重值。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRange(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集 <paramref name="key"/> 中，指定区间内的成员。
            <para>1、其中成员的位置按权重值递减(从小到大)来排列。</para>
            <para>2、具有相同权重值的成员按字典序(lexicographical order )来排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="stop">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>指定区间内的有序集成员的列表。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRangeWithScores(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集 <paramref name="key"/> 中，指定区间内的成员（含成员的权重值）。
            <para>1、其中成员的位置按权重值递减(从小到大)来排列。</para>
            <para>2、具有相同权重值的成员按字典序(lexicographical order )来排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="stop">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>指定区间内的有序集成员（含成员的权重值）的列表。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRangeByScore(Aoite.Redis.IRedisClient,System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集 <paramref name="key"/> 中，权重值在 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员。
            <para>1、其中成员的位置按权重值递减(从小到大)来排列。</para>
            <para>2、具有相同权重值的成员按字典序(lexicographical order )来排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="min">权重最小值。<paramref name="min"/> 可以是 <see cref="F:System.Double.MinValue"/> -或- <see cref="F:System.Double.NegativeInfinity"/>，表示有序集的最小值。</param>
            <param name="max">权重最大值。<paramref name="max"/> 可以是 <see cref="F:System.Double.MaxValue"/> -或- <see cref="F:System.Double.PositiveInfinity"/>，表示有序集的最高值。</param>
            <param name="exclusiveMin">指示最小值是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <param name="offset">返回结果的偏移量。</param>
            <param name="count">返回结果的数量。</param>
            <returns>权重值包含指定区间的成员。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRangeByScoreWithScores(Aoite.Redis.IRedisClient,System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集 <paramref name="key"/> 中，权重值在 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员（含成员的权重值）。
            <para>1、其中成员的位置按权重值递减(从小到大)来排列。</para>
            <para>2、具有相同权重值的成员按字典序(lexicographical order )来排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="min">权重最小值。<paramref name="min"/> 可以是 <see cref="F:System.Double.MinValue"/> -或- <see cref="F:System.Double.NegativeInfinity"/>，表示有序集的最小值。</param>
            <param name="max">权重最大值。<paramref name="max"/> 可以是 <see cref="F:System.Double.MaxValue"/> -或- <see cref="F:System.Double.PositiveInfinity"/>，表示有序集的最高值。</param>
            <param name="exclusiveMin">指示最小值是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <param name="offset">返回结果的偏移量。</param>
            <param name="count">返回结果的数量。</param>
            <returns>权重值包含指定区间的成员（含成员的权重值）。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRank(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            返回有序集 <paramref name="key"/> 中成员 <paramref name="member"/> 的排名。其中有序集成员按权重值递增(从小到大)顺序排列。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="member">有序集的成员。</param>
            <returns>如果 <paramref name="member"/> 是有序集 <paramref name="key"/> 的成员，返回 <paramref name="member"/> 的排名。否则返回 null 值。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRem(Aoite.Redis.IRedisClient,System.String,System.BinaryValue[])">
            <summary>
            移除有序集 <paramref name="key"/> 中的一个或多成员，不存在的成员会被忽略。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">集合的键名。</param>
            <param name="members">成员的数组。</param>
            <returns>被成功移除的成员的数量，不包括被忽略的成员。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRemRangeByRank(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集 <paramref name="key"/> 中，指定排名区间内的所有成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="stop">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>被移除成员的数量。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRemRangeByScore(Aoite.Redis.IRedisClient,System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            移除有序集 <paramref name="key"/> 中，权重值在 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="min">权重最小值。<paramref name="min"/> 可以是 <see cref="F:System.Double.MinValue"/> -或- <see cref="F:System.Double.NegativeInfinity"/>，表示有序集的最小值。</param>
            <param name="max">权重最大值。<paramref name="max"/> 可以是 <see cref="F:System.Double.MaxValue"/> -或- <see cref="F:System.Double.PositiveInfinity"/>，表示有序集的最高值。</param>
            <param name="exclusiveMin">指示最小值是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <returns>被移除成员的数量。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRevRange(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集 <paramref name="key"/> 中，指定区间内的成员。
            <para>1、其中成员的位置按权重值递减(从大到小)来排列。</para>
            <para>2、具有相同权重值的成员按字典序的逆序(reverse lexicographical order)排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="stop">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>指定区间内的有序集成员的列表。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRevRangeWithScores(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集 <paramref name="key"/> 中，指定区间内的成员（含成员的权重值）。
            <para>1、其中成员的位置按权重值递减(从大到小)来排列。</para>
            <para>2、具有相同权重值的成员按字典序的逆序(reverse lexicographical order)排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="stop">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>指定区间内的有序集成员（含成员的权重值）的列表。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRevRangeByScore(Aoite.Redis.IRedisClient,System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集 <paramref name="key"/> 中，权重值在 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员。
            <para>1、其中成员的位置按权重值递减(从大到小)来排列。</para>
            <para>2、具有相同权重值的成员按字典序的逆序(reverse lexicographical order)排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="min">权重最小值。<paramref name="min"/> 可以是 <see cref="F:System.Double.MinValue"/> -或- <see cref="F:System.Double.NegativeInfinity"/>，表示有序集的最小值。</param>
            <param name="max">权重最大值。<paramref name="max"/> 可以是 <see cref="F:System.Double.MaxValue"/> -或- <see cref="F:System.Double.PositiveInfinity"/>，表示有序集的最高值。</param>
            <param name="exclusiveMin">指示最小值是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <param name="offset">返回结果的偏移量。</param>
            <param name="count">返回结果的数量。</param>
            <returns>权重值包含指定区间的成员。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRevRangeByScoreWithScores(Aoite.Redis.IRedisClient,System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集 <paramref name="key"/> 中，权重值在 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员（含成员的权重值）。
            <para>1、其中成员的位置按权重值递减(从大到小)来排列。</para>
            <para>2、具有相同权重值的成员按字典序的逆序(reverse lexicographical order)排列。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="min">权重最小值。<paramref name="min"/> 可以是 <see cref="F:System.Double.MinValue"/> -或- <see cref="F:System.Double.NegativeInfinity"/>，表示有序集的最小值。</param>
            <param name="max">权重最大值。<paramref name="max"/> 可以是 <see cref="F:System.Double.MaxValue"/> -或- <see cref="F:System.Double.PositiveInfinity"/>，表示有序集的最高值。</param>
            <param name="exclusiveMin">指示最小值是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <param name="offset">返回结果的偏移量。</param>
            <param name="count">返回结果的数量。</param>
            <returns>权重值包含指定区间的成员（含成员的权重值）。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRevRank(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            返回有序集 <paramref name="key"/> 中成员 <paramref name="member"/> 的排名。其中有序集成员按权重值递减(从大到小)顺序排列。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="member">有序集的成员。</param>
            <returns>如果 <paramref name="member"/> 是有序集 <paramref name="key"/> 的成员，返回 <paramref name="member"/> 的排名。否则返回 null 值。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZScore(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            返回有序集 <paramref name="key"/> 中，成员 <paramref name="member"/> 的权重值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名。</param>
            <param name="member">有序集的成员。</param>
            <returns>如果 <paramref name="member"/> 是有序集 <paramref name="key"/> 的成员，返回 <paramref name="member"/> 的权重值。否则返回 null 值。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZInterStore(Aoite.Redis.IRedisClient,System.String,Aoite.Redis.RedisWeightDictionary,System.Nullable{System.RedisAggregate})">
            <summary>
            计算给定的一个或多个有序集的权限值交集，并将该并集(结果集)储存到 <paramref name="destination"/> 。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="destination">目标有序集的键名。如果有序集已存在，则会覆盖。</param>
            <param name="keyWeights">有序集键名和乘法因子的字典。</param>
            <param name="aggregate">聚合的方式。</param>
            <returns>保存到 <paramref name="destination"/> 的结果集的基数。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZUnionStore(Aoite.Redis.IRedisClient,System.String,Aoite.Redis.RedisWeightDictionary,System.Nullable{System.RedisAggregate})">
            <summary>
            计算给定的一个或多个有序集的权限值并集，并将该并集(结果集)储存到 <paramref name="destination"/> 。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="destination">目标有序集的键名。如果有序集已存在，则会覆盖。</param>
            <param name="keyWeights">有序集键名和乘法因子的字典。</param>
            <param name="aggregate">聚合的方式。</param>
            <returns>保存到 <paramref name="destination"/> 的结果集的基数。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZScan(Aoite.Redis.IRedisClient,System.String,System.Int64,System.String,System.Int64)">
            <summary>
            有序集 <paramref name="key"/> 增量地迭代（incrementally iterate）一集元素（a collection of elements）。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名</param>
            <param name="cursor">起始游标，0 表示开始一次新的迭代。</param>
            <param name="pattern">给定模式相匹配的元素。匹配语法可以参考 <seealso cref="M:System.RedisKeyExtensions.Keys(Aoite.Redis.IRedisClient,System.String)"/> 方法。</param>
            <param name="count">每次迭代所返回的元素数量。</param>
            <returns>支持迭代的枚举。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRangeByLex(Aoite.Redis.IRedisClient,System.String,System.BinaryValue,System.BinaryValue,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回给定的有序集合键 <paramref name="key"/> 中，值介于 <paramref name="min"/> 和 <paramref name="max"/> 之间从低到高的顺序的成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名</param>
            <param name="min">最小成员值。可以为 null 值，表示负无限。</param>
            <param name="max">最大成员值。可以为 null 值，表示正无限。</param>
            <param name="exclusiveMin">指示最小是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <param name="offset">返回结果的偏移量。</param>
            <param name="count">返回结果的数量。</param>
            <returns>从低到高的顺序列表，列表里面包含了有序集合在指定范围内的成员。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZLexCount(Aoite.Redis.IRedisClient,System.String,System.BinaryValue,System.BinaryValue,System.Boolean,System.Boolean)">
            <summary>
            返回给定的有序集合键 <paramref name="key"/> 中，值介于 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员数量。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名</param>
            <param name="min">最小成员值。可以为 null 值，表示负无限。</param>
            <param name="max">最大成员值。可以为 null 值，表示正无限。</param>
            <param name="exclusiveMin">指示最小是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <returns>包含了有序集合在指定范围内的成员数量。</returns>
        </member>
        <member name="M:System.RedisSortedSetExtensions.ZRemRangeByLex(Aoite.Redis.IRedisClient,System.String,System.BinaryValue,System.BinaryValue,System.Boolean,System.Boolean)">
            <summary>
            移除给定的有序集合键 <paramref name="key"/> 中，值介于 <paramref name="min"/> 和 <paramref name="max"/> 之间的成员。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">有序集的键名</param>
            <param name="min">最小成员值。可以为 null 值，表示负无限。</param>
            <param name="max">最大成员值。可以为 null 值，表示正无限。</param>
            <param name="exclusiveMin">指示最小是否为开区间（true 时表示不含最小值）。</param>
            <param name="exclusiveMax">指示最大值是否为开区间（true 时表示不含最大值）。</param>
            <returns>被移除的成员数量。</returns>
        </member>
        <member name="T:System.RedisStringExtensions">
            <summary>
            表示 Redis 的 String 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisStringExtensions.Append(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            将 <paramref name="value"/> 追加到 <paramref name="key"/> 原来的值的末尾。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="value">键值。</param>
            <returns>追加 <paramref name="value"/> 之后，<paramref name="key"/> 中的总字节长度。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.DecrBy(Aoite.Redis.IRedisClient,System.String,System.Int64)">
            <summary>
            将 <paramref name="key"/> 中储存的数字值递减指定的 <paramref name="decrement"/> 数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="decrement">递减量。</param>
            <returns>递减 <paramref name="decrement"/> 之后 <paramref name="key"/> 的值。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.DecrByFloat(Aoite.Redis.IRedisClient,System.String,System.Double)">
            <summary>
            将 <paramref name="key"/> 中储存的数字值递减指定的 <paramref name="decrement"/> 浮点数数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="decrement">浮点数递减量。</param>
            <returns>递减浮点数 <paramref name="decrement"/> 之后 <paramref name="key"/> 的值。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.Get(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回 <paramref name="key"/> 所关联的值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <returns>当 <paramref name="key"/> 不存在时，返回 null ，否则返回 <paramref name="key"/> 的值。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.GetRange(Aoite.Redis.IRedisClient,System.String,System.Int64,System.Int64)">
            <summary>
            返回 <paramref name="key"/> 中值的子值，值的截取范围由 <paramref name="start"/> 和 <paramref name="end"/> 两个偏移量决定(包括 <paramref name="start"/> 和 <paramref name="end"/> 在内)。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="start">开始索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <param name="end">结束索引（含）。负数偏移量表示从值最后开始计数，-1 表示最后一个，-2 表示倒数第二个，以此类推。</param>
            <returns>当 <paramref name="key"/> 不存在时，返回 null ，否则返回 <paramref name="key"/> 的值。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.GetSet(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            将给定 <paramref name="key"/> 的值设为 <paramref name="value"/> ，并返回 key 的旧值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="value">键值。</param>
            <returns>当 <paramref name="key"/> 不存在时，返回 null ，否则返回 <paramref name="key"/> 的旧值。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.IncrBy(Aoite.Redis.IRedisClient,System.String,System.Int64)">
            <summary>
            将 <paramref name="key"/> 中储存的数字值递增指定的 <paramref name="increment"/> 数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="increment">递增量。</param>
            <returns>递增 <paramref name="increment"/> 之后 <paramref name="key"/> 的值。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.IncrByFloat(Aoite.Redis.IRedisClient,System.String,System.Double)">
            <summary>
            将 <paramref name="key"/> 中储存的数字值递增指定的 <paramref name="increment"/> 浮点数数值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="increment">浮点数递增量。</param>
            <returns>递增浮点数 <paramref name="increment"/> 之后 <paramref name="key"/> 的值。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.MGet(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            返回一个或多个键的值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keys">键的数组。</param>
            <returns>值的数组。如果给定的键里面，有某个键不存在，那么这个键对应的值为 null 值 。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.MSet(Aoite.Redis.IRedisClient,Aoite.Redis.RedisDictionary)">
            <summary>
            同时设置一个或多个键值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keyValues">键值的字典。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.MSetNx(Aoite.Redis.IRedisClient,Aoite.Redis.RedisDictionary)">
            <summary>
            仅当所有给定键都不存在，同时设置一个或多个键值。即使只有一个给定键已存在，MSETNX 也会拒绝执行所有给定键的设置操作。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keyValues">键值的字典。</param>
            <returns>当所有键都成功设置返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.Set(Aoite.Redis.IRedisClient,System.String,System.BinaryValue)">
            <summary>
            设置键值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="value">键值。</param>
            <returns>设置成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.Set(Aoite.Redis.IRedisClient,System.String,System.BinaryValue,System.Nullable{System.TimeSpan},System.RedisExpireTimeUnit,System.RedisKeyBehavior)">
            <summary>
            设置键值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="value">键值。</param>
            <param name="expiration">生存时间。</param>
            <param name="timeUnit">定位生存时间的单位。</param>
            <param name="behavior">定位键的行为。</param>
            <returns>设置成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.Set(Aoite.Redis.IRedisClient,System.String,System.BinaryValue,System.Nullable{System.Int64},System.RedisExpireTimeUnit,System.RedisKeyBehavior)">
            <summary>
            设置键值。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="value">键值。</param>
            <param name="expiration">生存时间。</param>
            <param name="timeUnit">定位生存时间的单位。</param>
            <param name="behavior">定位键的行为。</param>
            <returns>设置成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.SetRange(Aoite.Redis.IRedisClient,System.String,System.Int64,System.BinaryValue)">
            <summary>
            用 <paramref name="value"/> 参数覆写(overwrite)给定 <paramref name="key"/> 所储存的值，从偏移量 <paramref name="offset"/> 开始。
            <para>不存在的 <paramref name="key"/> 当作空值处理。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <param name="offset">偏移量。</param>
            <param name="value">覆盖的键值。</param>
            <returns>修改之后的字节总长度。</returns>
        </member>
        <member name="M:System.RedisStringExtensions.StrLen(Aoite.Redis.IRedisClient,System.String)">
            <summary>
            返回 <paramref name="key"/> 所储存的值的长度。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="key">键名。</param>
            <returns>值的字节总长度。</returns>
        </member>
        <member name="T:System.RedisTransactionExtensions">
            <summary>
            表示 Redis 的 Transaction 扩展方法。
            </summary>
        </member>
        <member name="M:System.RedisTransactionExtensions.Watch(Aoite.Redis.IRedisClient,System.String[])">
            <summary>
            监视一个(或多个)键 ，如果在事务执行之前这个(或这些)键被其他命令所改动，那么事务将被打断。
            </summary>
            <param name="client">Redis 客户端。</param>
            <param name="keys">键的数组。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:System.RedisTransactionExtensions.Unwatch(Aoite.Redis.IRedisClient)">
            <summary>
            取消 WATCH 命令对所有键的监视。
            <para>如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</para>
            <para>因为 EXEC 命令会执行事务，因此 WATCH 命令的效果已经产生了；而 DISCARD 命令在取消事务的同时也会取消所有对 key 的监视，因此这两个命令执行之后，就没有必要执行 UNWATCH 了。</para>
            </summary>
            <param name="client">Redis 客户端。</param>
            <returns>结果。</returns>
        </member>
        <member name="T:System.DynamicMethodInvoker">
            <summary>
            表示一个动态方法调用的委托。
            </summary>
            <param name="instance">调用的实例。使用 null 值表示静态方法。</param>
            <param name="parameters">方法的参数列表。</param>
            <returns>方法执行的结果，如果方法是一个 void 签名则返回 null 值。</returns>
        </member>
        <member name="T:System.DynamicMemberGetter">
            <summary>
            表示一个动态成员的获取器委托。
            </summary>
            <param name="instance">调用的实例。使用 null 值表示静态成员。</param>
            <returns>成员的值。</returns>
        </member>
        <member name="T:System.DynamicMemberSetter">
            <summary>
            表示一个动态成员的设置器委托。
            </summary>
            <param name="instance">调用的实例。使用 null 值表示静态成员。</param>
            <param name="value">设置的值。</param>
        </member>
        <member name="T:System.DynamicConstructorHandler">
            <summary>
            表示动态创建实例的委托。
            </summary>
            <param name="parameters">构造函数的参数值集合。</param>
            <returns>动态创建的实例。</returns>
        </member>
        <member name="T:System.DynamicFactory">
            <summary>
            表示一个动态成员反射的工厂。
            </summary>
        </member>
        <member name="M:System.DynamicFactory.CreateFieldGetter(System.Reflection.FieldInfo)">
            <summary>
            创建字段的获取器委托。
            </summary>
            <param name="fieldInfo">字段元数据。</param>
            <returns>字段获取器的委托。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreateFieldSetter(System.Reflection.FieldInfo)">
            <summary>
            创建字段的设置器委托。
            </summary>
            <param name="fieldInfo">字段元数据。</param>
            <returns>字段获取器的委托。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreatePropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            创建属性的获取器委托。
            </summary>
            <param name="propertyInfo">属性元数据。</param>
            <returns>属性获取器的委托。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreatePropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            创建属性的设置器委托。
            </summary>
            <param name="propertyInfo">属性元数据。</param>
            <returns>属性获取器的委托。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreateMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            创建方法的调用委托。
            </summary>
            <param name="methodInfo">方法元数据。方法不能是一个尚未构造泛型参数的方法</param>
            <returns>方法调用的委托。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreateConstructorHandler(System.Reflection.ConstructorInfo)">
            <summary>
            创建指定 <paramref name="constructorInfo"/> 的动态构造函数。
            </summary>
            <param name="constructorInfo">构造函数的元数据。</param>
            <returns>绑定到实例构造函数的委托。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreateConstructorHandler(System.Type,System.Type[])">
            <summary>
            创建指定 <paramref name="type"/> 的动态构造函数。
            </summary>
            <param name="type">构造函数的定义类。</param>
            <param name="types">表示需要的构造函数的参数个数、顺序和类型的 <see cref="T:System.Type"/> 对象的数组。- 或 -<see cref="T:System.Type"/> 对象的空数组，用于获取不带参数的构造函数。这样的空数组由 static 字段 <see cref="F:System.Type.EmptyTypes"/> 提供。</param>
            <returns>绑定到实例构造函数的委托。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreateUninitializedInstance(System.Type)">
            <summary>
            创建指定类型的实例对象。
            </summary>
            <param name="type">创建实例的类型。</param>
            <returns><paramref name="type"/> 的新实例。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建指定类型的实例对象。
            </summary>
            <param name="type">创建实例的类型。</param>
            <param name="args">构造函数的参数。</param>
            <returns><paramref name="type"/> 的新实例。</returns>
        </member>
        <member name="M:System.DynamicFactory.CreateInstance``1(System.Object[])">
            <summary>
            创建指定类型的实例对象。
            </summary>
            <typeparam name="T">创建实例的类型。</typeparam>
            <param name="args">构造函数的参数。</param>
            <returns><typeparamref name="T"/> 的新实例。</returns>
        </member>
        <member name="T:System.DynamicInstance">
            <summary>
            表示一个反射的实例。
            </summary>
        </member>
        <member name="P:System.DynamicInstance.Type">
            <summary>
            获取反射的类。
            </summary>
        </member>
        <member name="P:System.DynamicInstance.Instance">
            <summary>
            获取反射的实例。当表示静态反射时为 null 值。
            </summary>
        </member>
        <member name="M:System.DynamicInstance.#ctor(System.Type)">
            <summary>
            指定静态方法的类型，初始化一个 <see cref="T:System.DynamicInstance"/> 类的新实例。
            </summary>
            <param name="type">反射的类。</param>
        </member>
        <member name="M:System.DynamicInstance.#ctor(System.Object)">
            <summary>
            指定一个实例，初始化一个 <see cref="T:System.DynamicInstance"/> 类的新实例。
            </summary>
            <param name="instance">反射的实例。</param>
        </member>
        <member name="M:System.DynamicInstance.#ctor(System.Object,System.Type)">
            <summary>
            指定反射的类型和实例，初始化一个 <see cref="T:System.DynamicInstance"/> 类的新实例。
            </summary>
            <param name="instance">反射的实例。</param>
            <param name="type">反射的类。</param>
        </member>
        <member name="M:System.DynamicInstance.Set(System.String,System.Object)">
            <summary>
            动态设置指定名称的成员的值。
            </summary>
            <param name="name">成员的名称，可以是一个属性或字段。</param>
            <param name="value">成员的值。</param>
        </member>
        <member name="M:System.DynamicInstance.Get(System.String)">
            <summary>
            动态获取指定名称的成员的值。
            </summary>
            <param name="name">成员的名称，可以是一个属性或字段。</param>
            <returns>成员的值。</returns>
        </member>
        <member name="M:System.DynamicInstance.Call(System.Type[],System.String,System.Object[])">
            <summary>
            动态调用指定名称的泛型方法。
            </summary>
            <param name="genericTypes">泛型</param>
            <param name="name">方法的名称。</param>
            <param name="args">方法的参数值。</param>
            <returns>方法执行的结果，如果方法是一个 void 签名则返回 null 值。</returns>
        </member>
        <member name="M:System.DynamicInstance.Call(System.String,System.Object[])">
            <summary>
            动态调用指定名称的方法。
            </summary>
            <param name="name">方法的名称。</param>
            <param name="args">方法的参数值。</param>
            <returns>方法执行的结果，如果方法是一个 void 签名则返回 null 值。</returns>
        </member>
        <member name="T:System.DynamicProperty">
            <summary>
            表示一个动态的属性。
            </summary>
        </member>
        <member name="P:System.DynamicProperty.Property">
            <summary>
            获取成员的属性元数据。
            </summary>
        </member>
        <member name="P:System.DynamicProperty.SetValueHandler">
            <summary>
            获取属性的设置器。
            </summary>
        </member>
        <member name="P:System.DynamicProperty.GetValueHandler">
            <summary>
            获取属性的读取器。
            </summary>
        </member>
        <member name="P:System.DynamicProperty.Populate">
            <summary>
            获取动态属性移植的特性。
            </summary>
        </member>
        <member name="M:System.DynamicProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            提供成员的属性元数据，初始化一个 <see cref="T:System.DynamicProperty"/> 类的新实例
            </summary>
            <param name="propertyInfo">成员的属性元数据。</param>
        </member>
        <member name="M:System.DynamicProperty.Validate(System.Object,System.Object)">
            <summary>
            检验指定实例的属性值。
            </summary>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <param name="value">属性的值。</param>
            <returns>返回属性值。</returns>
        </member>
        <member name="M:System.DynamicProperty.SetValue(System.Object,System.Object,System.Boolean)">
            <summary>
            指定一个实例，设置当前属性的值。
            </summary>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <param name="value">属性的值。</param>
            <param name="allowExtend">指示是否允许扩展的特性。</param>
        </member>
        <member name="M:System.DynamicProperty.GetValue(System.Object,System.Boolean)">
            <summary>
            指定一个实例，获取当前属性的值。
            </summary>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <param name="allowExtend">指示是否允许扩展的特性。</param>
            <returns>属性的值。</returns>
        </member>
        <member name="T:System.IPropertyPopulateAttribute">
            <summary>
            定义一个属性移植的特性。
            </summary>
        </member>
        <member name="M:System.IPropertyPopulateAttribute.GetValue(System.DynamicProperty,System.Object)">
            <summary>
            指定一个实例，获取指定属性的值。
            </summary>
            <param name="property">动态属性。</param>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <returns>属性的值。</returns>
        </member>
        <member name="M:System.IPropertyPopulateAttribute.SetValue(System.DynamicProperty,System.Object,System.Object)">
            <summary>
            指定一个实例，设置指定属性的值。
            </summary>
            <param name="property">动态属性。</param>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <param name="value">属性的值。</param>
        </member>
        <member name="T:System.Serializer">
            <summary>
            表示一个序列化器基类。
            </summary>
        </member>
        <member name="F:System.Serializer.Quickly">
            <summary>
            获取默认的快速二进制序列化器。
            </summary>
        </member>
        <member name="F:System.Serializer.Binary">
            <summary>
            获取默认的二进制序列化器。
            </summary>
        </member>
        <member name="F:System.Serializer.Xml">
            <summary>
            获取默认的 Xml 序列化器。
            </summary>
        </member>
        <member name="F:System.Serializer.Json">
            <summary>
            获取默认的 Json 序列化器。
            </summary>
        </member>
        <member name="M:System.Serializer.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Serializer"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.Serializer.#ctor(System.Text.Encoding)">
            <summary>
            初始化一个 <see cref="T:System.Serializer"/> 类的新实例。
            </summary>
            <param name="encoding">字符编码。</param>
        </member>
        <member name="E:System.Serializer.ReadFinish">
            <summary>
            表示读取后发生，其中 sender 参数是一个 <see cref="T:System.Result"/> 返回值。
            </summary>
        </member>
        <member name="E:System.Serializer.WriteFinish">
            <summary>
            表示写入后发生，其中 sender 参数是一个 <see cref="T:System.Result"/> 返回值。
            </summary>
        </member>
        <member name="P:System.Serializer.Encoding">
            <summary>
            获取或设置一个值，表示字符编码。
            </summary>
        </member>
        <member name="M:System.Serializer.Read``1(System.String)">
            <summary>
            读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="path">序列化的路径。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.Read(System.String)">
            <summary>
            读取对象。
            </summary>
            <param name="path">序列化的路径。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.Read``1(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.Read(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.ReadString``1(System.String,System.Text.Encoding)">
            <summary>
            读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="content">可序列化为对象的内容文本。</param>
            <param name="encoding">自定义字符编码。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.ReadString(System.String,System.Text.Encoding)">
            <summary>
            读取对象。
            </summary>
            <param name="content">可序列化为对象的内容文本。</param>
            <param name="encoding">自定义字符编码。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.ReadBytes``1(System.Byte[])">
            <summary>
            读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="bytes">可序列化为对象的二进制数组。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.ReadBytes(System.Byte[])">
            <summary>
            读取对象。
            </summary>
            <param name="bytes">可序列化为对象的二进制数组。</param>
            <returns>序列化对象的结果。</returns>
        </member>
        <member name="M:System.Serializer.FastReadBytes``1(System.Byte[])">
            <summary>
            快速读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="bytes">可序列化为对象的二进制数组。</param>
            <returns>序列化对象的对象。</returns>
        </member>
        <member name="M:System.Serializer.FastReadBytes(System.Byte[])">
            <summary>
            快速读取对象。
            </summary>
            <param name="bytes">可序列化为对象的二进制数组。</param>
            <returns>序列化对象的对象。</returns>
        </member>
        <member name="M:System.Serializer.Write``1(System.String,``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="path">序列化的路径。</param>
            <param name="data">可序列化的对象。</param>
            <returns>指示序列化是否成功。</returns>
        </member>
        <member name="M:System.Serializer.Write``1(System.IO.Stream,``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">可序列化的流。</param>
            <param name="data">可序列化的对象。</param>
            <returns>指示序列化是否成功。</returns>
        </member>
        <member name="M:System.Serializer.WriteString``1(``0,System.Text.Encoding)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="data">可序列化为字符串的对象。</param>
            <param name="encoding">自定义字符编码。</param>
            <returns>指示序列化是否成功。</returns>
        </member>
        <member name="M:System.Serializer.WriteBytes``1(``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="data">可序列化为字符串的对象。</param>
            <returns>指示序列化是否成功。</returns>
        </member>
        <member name="M:System.Serializer.FastWriteBytes``1(``0)">
            <summary>
            快速写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="data">可序列化为字符串的对象。</param>
            <returns>二进制数组。</returns>
        </member>
        <member name="M:System.Serializer.OnReadFinish(System.Object)">
            <summary>
            表示引发 <see cref="E:System.Serializer.ReadFinish"/> 事件。
            </summary>
            <param name="result">读取的返回值。</param>
        </member>
        <member name="M:System.Serializer.OnWriteFinish(System.Object)">
            <summary>
            表示引发 <see cref="E:System.Serializer.WriteFinish"/> 事件。
            </summary>
            <param name="result">写入的返回值。</param>
        </member>
        <member name="M:System.Serializer.Reading``1(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:System.Serializer.Reading(System.IO.Stream)">
            <summary>
            读取对象。
            </summary>
            <param name="stream">序列化的流。</param>
            <returns>序列化对象。</returns>
        </member>
        <member name="M:System.Serializer.Writing``1(System.IO.Stream,``0)">
            <summary>
            写入可序列化的对象。
            </summary>
            <typeparam name="TData">可序列化对象的类型。</typeparam>
            <param name="stream">可序列化的流。</param>
            <param name="data">可序列化的对象。</param>
        </member>
        <member name="T:System.AliasAttribute">
            <summary>
            表示一个具有别名的特性。
            </summary>
        </member>
        <member name="P:System.AliasAttribute.Name">
            <summary>
            获取或设置别名。
            </summary>
        </member>
        <member name="M:System.AliasAttribute.#ctor">
            <summary>
            初始化一个 <see cref="T:System.AliasAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.AliasAttribute.#ctor(System.String)">
            <summary>
            提供别名，初始化一个 <see cref="T:System.AliasAttribute"/> 类的新实例。
            </summary>
            <param name="name">别名。</param>
        </member>
        <member name="T:System.IAliasAttribute">
            <summary>
            表示一个具有别名的特性。
            </summary>
        </member>
        <member name="P:System.IAliasAttribute.Name">
            <summary>
            获取或设置别名。
            </summary>
        </member>
        <member name="T:System.IgnoreAttribute">
            <summary>
            表示一个具有忽略性的标识。
            </summary>
        </member>
        <member name="F:System.IgnoreAttribute.Type">
            <summary>
            忽略性标识的类型。
            </summary>
        </member>
        <member name="M:System.IgnoreAttribute.#ctor">
            <summary>
            初始化一个 <see cref="T:System.IgnoreAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="T:System.IKeyAttribute">
            <summary>
            表示一个或多个用于唯一标识实体的的特性。
            </summary>
        </member>
        <member name="P:System.IKeyAttribute.IsKey">
            <summary>
            获取或设置一个值，指示是否为唯一标识。
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ConsistentHash`1">
            <summary>
            表示一致性哈希算法的集合。
            </summary>
            <typeparam name="TNode">哈希节点的数据类型。</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ConsistentHash`1.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Collections.Generic.ConsistentHash`1"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ConsistentHash`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定默认节点的集合，初始化一个 <see cref="T:System.Collections.Generic.ConsistentHash`1"/> 类的新实例。
            </summary>
            <param name="nodes">默认节点的集合。</param>
        </member>
        <member name="M:System.Collections.Generic.ConsistentHash`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            指定默认节点的集合和权重值，初始化一个 <see cref="T:System.Collections.Generic.ConsistentHash`1"/> 类的新实例。
            </summary>
            <param name="nodes">默认节点的集合。</param>
            <param name="weight">节点权重值。</param>
        </member>
        <member name="M:System.Collections.Generic.ConsistentHash`1.Add(`0)">
            <summary>
            添加新的节点。
            </summary>
            <param name="node">节点。</param>
        </member>
        <member name="M:System.Collections.Generic.ConsistentHash`1.Remove(`0)">
            <summary>
            移除一个节点。
            </summary>
            <param name="node">节点。</param>
            <returns>成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.Collections.Generic.ConsistentHash`1.GetNode(System.String)">
            <summary>
            获取指定键的节点。
            </summary>
            <param name="key">键。</param>
            <returns>节点。</returns>
        </member>
        <member name="M:System.Collections.Generic.ConsistentHash`1.GetNode(System.Byte[])">
            <summary>
            获取指定键的节点。
            </summary>
            <param name="key">键。</param>
            <returns>节点。</returns>
        </member>
        <member name="T:System.Collections.Generic.CollectionsExtensions">
            <summary>
            提供用于集合的实用工具方法。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.ToGrid``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            将指定的集合转换为实体的数据集合。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="collection">集合。</param>
            <param name="totalCount">数据的总行数。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <typeparam name="TKey">字典中的键的类型。</typeparam>
            <typeparam name="TValue">字典中的值的类型。</typeparam>
            <param name="dict">字典。</param>
            <param name="key">字典的键。</param>
            <returns>如果字典包含具有指定键的元素则返回对应的值，否则返回默认值。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.EqualsBytes(System.Byte[],System.Byte[])">
            <summary>
            判定指定的字节数组是否匹配。
            </summary>
            <param name="b1">第一个字节数组。</param>
            <param name="b2">比较的字节数组。</param>
            <returns>如果匹配返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.RandomAny``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            随机取出指定枚举的一部分元素。
            </summary>
            <param name="e">枚举。</param>
            <param name="max">固定枚举元素数，为 0 则随机。</param>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.RandomOne``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            随机取出指定枚举的一个元素。
            </summary>
            <param name="e">枚举。</param>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String,System.String,System.Boolean)">
            <summary>
            把集合中的所有元素放入一个字符串。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="items">原集合。</param>
            <param name="callback">回调方法。</param>
            <param name="separator">分隔符。</param>
            <param name="start">起始文本。如果集合为空，不包含此数据。</param>
            <param name="end">结尾文本。如果集合为空，不包含此数据。</param>
            <param name="ignoreEmptyItem">指示是否忽略集合中为 null 或 <see cref="F:System.String.Empty"/> 值的项。</param>
            <returns>拼接后的字符串。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            把集合中的所有元素放入一个字符串。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="items">原集合。</param>
            <param name="separator">分隔符。</param>
            <param name="start">起始文本。如果集合为空，不包含此数据。</param>
            <param name="end">结尾文本。如果集合为空，不包含此数据。</param>
            <param name="ignoreEmptyItem">指示是否忽略集合中为 null 或 <see cref="F:System.String.Empty"/> 值的项。</param>
            <returns>拼接后的字符串。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.IList`1"/> 中第一个匹配项的索引。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="collection">要搜索的从零开始的 <see cref="T:System.Collections.Generic.IList`1"/>。</param>
            <param name="value">要在 <paramref name="collection"/> 中查找的对象。</param>
            <param name="comparer">一个对值进行比较的相等比较器。</param>
            <returns>如果在整个 <paramref name="collection"/> 中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.IList`1"/> 中从指定索引到最后一个元素这部分元素中第一个匹配项的索引。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="collection">要搜索的从零开始的 <see cref="T:System.Collections.Generic.IList`1"/>。</param>
            <param name="value">要在 <paramref name="collection"/> 中查找的对象。</param>
            <param name="startIndex">从零开始的搜索的起始索引。</param>
            <param name="comparer">一个对值进行比较的相等比较器。</param>
            <returns>如果在 <paramref name="collection"/> 中从 <paramref name="startIndex"/> 到最后一个元素这部分元素中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            搜索指定的对象，并返回 <see cref="T:System.Collections.Generic.IList`1"/> 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的索引。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="collection">要搜索的从零开始的 <see cref="T:System.Collections.Generic.IList`1"/>。</param>
            <param name="value">要在 <paramref name="collection"/> 中查找的对象。</param>
            <param name="startIndex">从零开始的搜索的起始索引。</param>
            <param name="count">要搜索的部分中的元素数。</param>
            <param name="comparer">一个对值进行比较的相等比较器。</param>
            <returns>如果在 <paramref name="collection"/> 中从 <paramref name="startIndex"/> 开始、包含 <paramref name="count"/> 所指定的元素个数的这部分元素中，找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.IndexOf``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            搜索指定的对象，并返回整个 <see cref="T:System.Array"/> 中第一个匹配项的索引。
            </summary>
            <typeparam name="T">数组元素的类型。</typeparam>
            <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
            <param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
            <param name="comparer">一个对值进行比较的相等比较器。</param>
            <returns>如果在整个 <paramref name="array"/> 中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.IndexOf``1(``0[],``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            搜索指定的对象，并返回 <see cref="T:System.Array"/> 中从指定索引到最后一个元素这部分元素中第一个匹配项的索引。
            </summary>
            <typeparam name="T">数组元素的类型。</typeparam>
            <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array"/>。</param>
            <param name="value">要在 <paramref name="array"/> 中查找的对象。</param>
            <param name="startIndex">从零开始的搜索的起始索引。</param>
            <param name="comparer">一个对值进行比较的相等比较器。</param>
            <returns>如果在 <paramref name="array"/> 中从 <paramref name="startIndex"/> 到最后一个元素这部分元素中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.IndexOf``1(``0[],``0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            搜索指定的对象，并返回 <see cref="T:System.Array"/> 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的索引。
            </summary>
            <typeparam name="T">数组元素的类型。</typeparam>
            <param name="array">要搜索的从零开始的一维<see cref="T:System.Array"/>。</param>
            <param name="value">要在<paramref name="array"/>中查找的对象。</param>
            <param name="startIndex">从零开始的搜索的起始索引。</param>
            <param name="count">要搜索的部分中的元素数。</param>
            <param name="comparer">一个对值进行比较的相等比较器。</param>
            <returns>如果在<paramref name="array"/>中从 <paramref name="startIndex"/> 开始、包含 <paramref name="count"/> 所指定的元素个数的这部分元素中，找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.IndexOf``1(``0[],``0)">
            <summary>
            搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.IList`1"/> 中第一个匹配项的索引。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="collection">要搜索的从零开始的 <see cref="T:System.Collections.Generic.IList`1"/>。</param>
            <param name="value">要在 <paramref name="collection"/> 中查找的对象。</param>
            <returns>如果在整个 <paramref name="collection"/> 中找到 <paramref name="value"/> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionsExtensions.Get``1(System.Collections.Specialized.NameValueCollection,System.String,``0)">
            <summary>
            获取与 <see cref="T:System.Collections.Specialized.NameValueCollection"/> 中的指定键关联的值，并将值转换为指定的类型。
            </summary>
            <typeparam name="T">值的数据类型。</typeparam>
            <param name="collection">可通过键或索引访问的关联 <see cref="T:System.String"/> 键和 <see cref="T:System.String"/> 值的集合。</param>
            <param name="name">项的 <see cref="T:System.String"/> 键，该项包含要获取的值。键可以是 null。</param>
            <param name="defaultValue">默认值。</param>
            <returns>如果找到，则为一个 <see cref="T:System.String"/>，包含与 <see cref="T:System.Collections.Specialized.NameValueCollection"/> 中的指定键关联的值的列表（此列表以逗号分隔）；否则为 null。</returns>
        </member>
        <member name="T:System.Ajob">
            <summary>
            表示异步操作的一系列扩展。
            </summary>
        </member>
        <member name="M:System.Ajob.Once(System.AsyncJobHandler,System.Double,System.Object)">
            <summary>
            指定 <paramref name="milliseconds"/> 毫秒后执行一次 <paramref name="job"/>。
            </summary>
            <param name="job">异步任务。</param>
            <param name="milliseconds">间隔的毫秒数，为 0 时表示立即执行。</param>
            <param name="state">自定义数据。</param>
            <returns>异步任务的标识</returns>
        </member>
        <member name="M:System.Ajob.Once(System.AsyncJobHandler,System.TimeSpan,System.Object)">
            <summary>
            指定间隔时间执行一次 <paramref name="job"/>。
            </summary>
            <param name="interval">间隔的时间。</param>
            <param name="job">异步任务。</param>
            <param name="state">自定义数据。</param>
            <returns>异步任务的标识</returns>
        </member>
        <member name="M:System.Ajob.Loop(System.AsyncJobHandler,System.Double,System.Object)">
            <summary>
            指定间隔 <paramref name="milliseconds"/> 毫秒后重复执行 <paramref name="job"/>。
            </summary>
            <param name="milliseconds">间隔的毫秒数，为 0 时表示立即执行。</param>
            <param name="job">异步任务。</param>
            <param name="state">自定义数据。</param>
            <returns>异步任务的标识</returns>
        </member>
        <member name="M:System.Ajob.Loop(System.AsyncJobHandler,System.TimeSpan,System.Object)">
            <summary>
            指定间隔时间重复执行 <paramref name="job"/>。
            </summary>
            <param name="interval">间隔的时间。</param>
            <param name="job">异步任务。</param>
            <param name="state">自定义数据。</param>
            <returns>异步任务的标识</returns>
        </member>
        <member name="M:System.Ajob.WaitAll(System.IAsyncJob[])">
            <summary>
            等待所有的异步任务完成。
            </summary>
            <param name="jobs">异步任务列表。</param>
        </member>
        <member name="M:System.Ajob.WaitAll(System.Collections.Generic.IEnumerable{System.IAsyncJob})">
            <summary>
            等待所有的异步任务完成。
            </summary>
            <param name="jobs">异步任务列表。</param>
        </member>
        <member name="T:System.AssemblyReflectionManager">
            <summary>
            程序集反射管理器。
            </summary>
        </member>
        <member name="M:System.AssemblyReflectionManager.#ctor">
            <summary>
            初始化一个 <see cref="T:System.AssemblyReflectionManager"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.AssemblyReflectionManager.LoadAssembly(System.String,System.String)">
            <summary>
            指定域的友好名称和程序集路径加载程序集。
            </summary>
            <param name="assemblyPath">程序集路径。</param>
            <param name="domainName">域的友好名称。</param>
            <returns>加载成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.AssemblyReflectionManager.UnloadAssembly(System.String)">
            <summary>
            卸载指定程序集路径的程序集。
            </summary>
            <param name="assemblyPath">程序集路径。</param>
            <returns>卸载成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.AssemblyReflectionManager.UnloadDomain(System.String)">
            <summary>
            卸载指定域的友好名称的程序集。
            </summary>
            <param name="domainName">域的友好名称。</param>
            <returns>卸载成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.AssemblyReflectionManager.Reflect``1(System.String,System.Func{System.Reflection.Assembly,``0})">
            <summary>
            反射调用指定程序集路径的程序集。
            </summary>
            <typeparam name="TResult">反射调用返回的结果类型。</typeparam>
            <param name="assemblyPath">程序集路径。</param>
            <param name="func">反射的方法委托。</param>
            <returns>反射调用返回的结果。</returns>
        </member>
        <member name="M:System.AssemblyReflectionManager.Dispose(System.Boolean)">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="T:System.BinaryValue">
            <summary>
            表示一个二进制的值。
            </summary>
        </member>
        <member name="P:System.BinaryValue.ByteArray">
            <summary>
            获取字节数组。
            </summary>
        </member>
        <member name="M:System.BinaryValue.#ctor(System.Object,System.Reflection.MemberInfo)">
            <summary>
            初始化一个 <see cref="T:System.BinaryValue"/> 类的新实例。
            </summary>
            <param name="value">待序列化的对象。可以为 null 值。</param>
            <param name="member">序列化的对象成员。</param>
        </member>
        <member name="M:System.BinaryValue.#ctor(System.Byte[])">
            <summary>
            初始化一个 <see cref="T:System.BinaryValue"/> 类的新实例。
            </summary>
            <param name="bytes">字节数组。可以为 null 值。</param>
        </member>
        <member name="M:System.BinaryValue.ToModel``1">
            <summary>
            将当前字节转换为对象实例。
            </summary>
            <typeparam name="TModel">对象的数据类型。</typeparam>
            <returns>对象实例。</returns>
        </member>
        <member name="M:System.BinaryValue.ToModel">
            <summary>
            将当前字节转换为对象实例。
            </summary>
            <returns>对象实例。</returns>
        </member>
        <member name="M:System.BinaryValue.Create(System.Object,System.Reflection.MemberInfo)">
            <summary>
            提供未知的数据类型，创建一个二进制值。
            </summary>
            <param name="value">一个未知类型的值。</param>
            <param name="member">序列化的对象成员。</param>
            <returns>二进制值。</returns>
        </member>
        <member name="M:System.BinaryValue.Parse(System.Type)">
            <summary>
            提供已知的数据类型，解析当前二进制值。
            </summary>
            <param name="type">值的数据类型。</param>
            <returns>二进制值解析后的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Byte[]">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Byte"/>[] 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Byte"/>[] 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Byte[])~System.BinaryValue">
            <summary>
            <see cref="T:System.Byte"/>[] 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Byte"/>[] 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Decimal">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Decimal"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Decimal"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Decimal)~System.BinaryValue">
            <summary>
            <see cref="T:System.Decimal"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Decimal"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Guid">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Guid"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns> <see cref="T:System.Guid"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Guid)~System.BinaryValue">
            <summary>
            <see cref="T:System.Guid"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Guid"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.String">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.String"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns> <see cref="T:System.String"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.String)~System.BinaryValue">
            <summary>
            <see cref="T:System.String"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.String"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.DateTime">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.DateTime"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns> <see cref="T:System.DateTime"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.DateTime)~System.BinaryValue">
            <summary>
            <see cref="T:System.DateTime"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.DateTime"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.DateTimeOffset">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.DateTimeOffset"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns> <see cref="T:System.DateTimeOffset"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.DateTimeOffset)~System.BinaryValue">
            <summary>
            <see cref="T:System.DateTimeOffset"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.DateTimeOffset"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.TimeSpan">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.TimeSpan"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns> <see cref="T:System.TimeSpan"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.TimeSpan)~System.BinaryValue">
            <summary>
            <see cref="T:System.TimeSpan"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.TimeSpan"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.ToString">
            <summary>
            返回当前值的 UTF8 编码字符串。
            </summary>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Boolean">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Boolean"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Boolean"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Boolean)~System.BinaryValue">
            <summary>
            <see cref="T:System.Boolean"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Boolean"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Char">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Char"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Char"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Char)~System.BinaryValue">
            <summary>
            <see cref="T:System.Char"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Char"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Double">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Double"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Double"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Double)~System.BinaryValue">
            <summary>
            <see cref="T:System.Double"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Double"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Int16">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Int16"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Int16"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Int16)~System.BinaryValue">
            <summary>
            <see cref="T:System.Int16"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Int16"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Int32">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Int32"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Int32"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Int32)~System.BinaryValue">
            <summary>
            <see cref="T:System.Int32"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Int32"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Int64">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Int64"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Int64"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Int64)~System.BinaryValue">
            <summary>
            <see cref="T:System.Int64"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Int64"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.Single">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.Single"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.Single"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.Single)~System.BinaryValue">
            <summary>
            <see cref="T:System.Single"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.Single"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.UInt16">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.UInt16"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.UInt16"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.UInt16)~System.BinaryValue">
            <summary>
            <see cref="T:System.UInt16"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.UInt16"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.UInt32">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.UInt32"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.UInt32"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.UInt32)~System.BinaryValue">
            <summary>
            <see cref="T:System.UInt32"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.UInt32"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.BinaryValue)~System.UInt64">
            <summary>
            <see cref="T:System.BinaryValue"/> 和 <see cref="T:System.UInt64"/> 的隐式转换。
            </summary>
            <param name="value">一个二进制的值。</param>
            <returns><see cref="T:System.UInt64"/> 的新实例。</returns>
        </member>
        <member name="M:System.BinaryValue.op_Implicit(System.UInt64)~System.BinaryValue">
            <summary>
            <see cref="T:System.UInt64"/> 和 <see cref="T:System.BinaryValue"/> 的隐式转换。
            </summary>
            <param name="value">一个 <see cref="T:System.UInt64"/> 的新实例。</param>
            <returns>二进制的值。</returns>
        </member>
        <member name="T:System.CodeTimer">
            <summary>
            代码性能计时器
            </summary>
            <remarks>参考了老赵（http://www.cnblogs.com/jeffreyzhao/archive/2009/03/10/codetimer.html）和eaglet（http://www.cnblogs.com/eaglet/archive/2009/03/10/1407791.html）两位的作品</remarks>
            <remarks>为了保证性能比较的公平性，采用了多种指标，并使用计时器重写等手段来避免各种不必要的损耗</remarks>
        </member>
        <member name="P:System.CodeTimer.Action">
            <summary>迭代方法，如不指定，则使用Time(int index)</summary>
        </member>
        <member name="P:System.CodeTimer.CpuCycles">
            <summary>CPU周期</summary>
        </member>
        <member name="P:System.CodeTimer.Elapsed">
            <summary>执行时间</summary>
        </member>
        <member name="P:System.CodeTimer.Gen">
            <summary>GC代数</summary>
        </member>
        <member name="P:System.CodeTimer.Index">
            <summary>进度</summary>
        </member>
        <member name="P:System.CodeTimer.ShowProgress">
            <summary>是否显示控制台进度</summary>
        </member>
        <member name="P:System.CodeTimer.ThreadTime">
            <summary>线程时间，单位是100ns，除以10000转为ms</summary>
        </member>
        <member name="P:System.CodeTimer.Times">
            <summary>次数</summary>
        </member>
        <member name="M:System.CodeTimer.Time(System.Int32,System.Action{System.Int32})">
            <summary>
            计时。
            </summary>
            <param name="times">次数。</param>
            <param name="action">测试项。</param>
            <returns></returns>
        </member>
        <member name="M:System.CodeTimer.TimeLine(System.String,System.Int32,System.Action{System.Int32})">
            <summary>
            计时，并用控制台输出行
            </summary>
            <param name="title">标题。</param>
            <param name="times">次数。</param>
            <param name="action">测试项。</param>
        </member>
        <member name="M:System.CodeTimer.Finish">
            <summary>
            迭代后执行，计算时间
            </summary>
        </member>
        <member name="M:System.CodeTimer.Init">
            <summary>
            迭代前执行，计算时间
            </summary>
        </member>
        <member name="M:System.CodeTimer.Time">
            <summary>
            计时核心方法，处理进程和线程优先级
            </summary>
        </member>
        <member name="M:System.CodeTimer.Time(System.Int32)">
            <summary>
            每一次迭代，计算时间
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:System.CodeTimer.TimeOne">
            <summary>
            执行一次迭代，预热所有方法
            </summary>
        </member>
        <member name="M:System.CodeTimer.ToString">
            <summary>
            已重载。输出依次分别是：执行时间、CPU线程时间、时钟周期、GC代数
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.CodeTimer.TimeTrue">
            <summary>
            真正的计时
            </summary>
        </member>
        <member name="T:System.DataSecurity">
            <summary>
            表示数据安全处理。
            </summary>
        </member>
        <member name="M:System.DataSecurity.Crypto(System.HashAlgorithms,System.String,System.Text.Encoding)">
            <summary>
            指定哈希算法，哈希指定的文本。
            </summary>
            <param name="alog">哈希算法。</param>
            <param name="text">需哈希的字符串。</param>
            <param name="encoding">编码方式。</param>
            <returns>哈希后的字符串。</returns>
        </member>
        <member name="M:System.DataSecurity.Crypto(System.HashAlgorithms,System.Byte[])">
            <summary>
            指定哈希算法，哈希指定的。
            </summary>
            <param name="alog">哈希算法。</param>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <returns>计算所得的哈希代码。</returns>
        </member>
        <member name="M:System.DataSecurity.GenerateSaltedHash(System.String,System.Guid@,System.Text.Encoding)">
            <summary>
            生产成指定字符串，生成 32位加盐值，并返回 44 位加盐散列后的文本。
            </summary>
            <param name="text">原始文本。</param>
            <param name="salt">加盐值。</param>
            <param name="encoding">编码方式。</param>
            <returns> 44 位加盐散列后的文本。</returns>
        </member>
        <member name="M:System.DataSecurity.GenerateSaltedHash(System.String,System.Guid,System.Text.Encoding)">
            <summary>
            生产成指定字符串和加盐值，并返回 44 位加盐散列后的文本。
            </summary>
            <param name="text">原始文本。</param>
            <param name="salt">加盐值。</param>
            <param name="encoding">编码方式。</param>
            <returns> 44 位加盐散列后的文本。</returns>
        </member>
        <member name="T:System.HashAlgorithms">
            <summary>
            表示安全哈希算法。
            </summary>
        </member>
        <member name="F:System.HashAlgorithms.SHA1">
            <summary>
            使用 <see cref="T:System.Security.Cryptography.SHA1"/> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。
            </summary>
        </member>
        <member name="F:System.HashAlgorithms.SHA256">
            <summary>
            使用 <see cref="T:System.Security.Cryptography.SHA256"/> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。
            </summary>
        </member>
        <member name="F:System.HashAlgorithms.SHA384">
            <summary>
            使用 <see cref="T:System.Security.Cryptography.SHA384"/> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。
            </summary>
        </member>
        <member name="F:System.HashAlgorithms.SHA512">
            <summary>
            使用 <see cref="T:System.Security.Cryptography.SHA512"/> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。
            </summary>
        </member>
        <member name="F:System.HashAlgorithms.MD5">
            <summary>
             提供 MD5（消息摘要 5）128 位哈希算法的实现。
            </summary>
        </member>
        <member name="T:System.PageData">
            <summary>
            表示一个表格数据源。
            </summary>
        </member>
        <member name="M:System.PageData.#ctor">
            <summary>
            初始化一个 <see cref="T:System.PageData`1"/> 类的新实例。
            </summary>
        </member>
        <member name="P:System.PageData.Total">
            <summary>
            获取或设置行的总数。
            </summary>
        </member>
        <member name="M:System.PageData.GetRows">
            <summary>
            获取行的数据。
            </summary>
            <returns>行的数据。</returns>
        </member>
        <member name="T:System.PageData`1">
            <summary>
            表示一个表格数据源。
            </summary>
            <typeparam name="TModel">数据源的行数据类型。</typeparam>
        </member>
        <member name="M:System.PageData`1.#ctor">
            <summary>
            初始化一个 <see cref="T:System.PageData`1"/> 类的新实例。
            </summary>
        </member>
        <member name="P:System.PageData`1.Item(System.Int32)">
            <summary>
            获取指定索引的数据。
            </summary>
            <param name="index">数据的索引。</param>
            <returns>数据。</returns>
        </member>
        <member name="P:System.PageData`1.Rows">
            <summary>
            获取或设置行的数据。
            </summary>
        </member>
        <member name="M:System.PageData`1.GetRows">
            <summary>
            获取行的数据。
            </summary>
            <returns>行的数据。</returns>
        </member>
        <member name="T:System.HeadersBase">
            <summary>
            包含头部信息的相关基类。
            </summary>
        </member>
        <member name="P:System.HeadersBase.Headers">
            <summary>
            获取或设置的头部信息。
            </summary>
        </member>
        <member name="P:System.HeadersBase.HasHeaders">
            <summary>
            获取一个值，该值指示当前是否包含头部信息。
            </summary>
        </member>
        <member name="M:System.HeadersBase.#ctor">
            <summary>
            初始化一个 <see cref="T:System.HeadersBase"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.HeadersBase.#ctor(System.Func{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}})">
            <summary>
            提供在需要时被调用以产生延迟初始化值的委托，初始化一个 <see cref="T:System.HeadersBase"/> 类的新实例。
            </summary>
            <param name="headersFactory">在需要时被调用以产生延迟初始化值的委托。</param>
        </member>
        <member name="T:System.AsyncJobHandler">
            <summary>
            表示一个异步任务的委托。
            </summary>
            <param name="job">异步任务。</param>
        </member>
        <member name="T:System.IAsyncJob">
            <summary>
            表示一个异步任务的标识。
            </summary>
        </member>
        <member name="P:System.IAsyncJob.State">
            <summary>
            获取自定义数据。
            </summary>
        </member>
        <member name="P:System.IAsyncJob.Task">
            <summary>
            获取关联的异步操作。
            </summary>
        </member>
        <member name="P:System.IAsyncJob.Interval">
            <summary>
            获取或设置一个值，表示间隔的时间。只有当循环的任务时，此值才有效。
            </summary>
        </member>
        <member name="P:System.IAsyncJob.IsCanceled">
            <summary>
            获取一个值，指示任务是否已取消。
            </summary>
        </member>
        <member name="P:System.IAsyncJob.IsFaulted">
            <summary>
            获取一个值，指示任务是否发生异常。
            </summary>
        </member>
        <member name="P:System.IAsyncJob.IsSuccessed">
            <summary>
            获取一个值，指示任务是否已成功完成。
            </summary>
        </member>
        <member name="P:System.IAsyncJob.IsRunning">
            <summary>
            获取一个值，指示任务是否正在进行。
            </summary>
        </member>
        <member name="M:System.IAsyncJob.Cancel">
            <summary>
            立即取消异步任务。
            </summary>
        </member>
        <member name="M:System.IAsyncJob.Wait(System.Int32)">
            <summary>
            等待完成执行过程。
            </summary>
            <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite"/>(-1)，表示无限期等待。</param>
            <returns>如果在分配的时间内完成执行，则为 true；否则为 false。</returns>
        </member>
        <member name="M:System.IAsyncJob.Delay(System.Int32)">
            <summary>
            延迟时间执行任务。
            </summary>
            <param name="millisecondsDelay">等待延迟的毫秒数。</param>
        </member>
        <member name="M:System.IAsyncJob.Delay(System.TimeSpan)">
            <summary>
            延迟时间执行任务。
            </summary>
            <param name="timeSpanDelay">等待延迟的间隔。</param>
        </member>
        <member name="T:System.Isolated`1">
            <summary>
            表示一个跨应用程序域孤立的对象。
            </summary>
            <typeparam name="T">对象的数据类型。</typeparam>
        </member>
        <member name="M:System.Isolated`1.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Isolated`1"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.Isolated`1.#ctor(System.String,System.String)">
            <summary>
            提供程序集的显示名称和类型的完全限定名称，初始化一个 <see cref="T:System.Isolated`1"/> 类的新实例。
            </summary>
            <param name="assemblyFullName">程序集的显示名称。</param>
            <param name="typeFullName">类型的完全限定名称，包含命名空间而不是程序集。</param>
        </member>
        <member name="P:System.Isolated`1.Instance">
            <summary>
            获取孤立的对象实例。
            </summary>
        </member>
        <member name="M:System.Isolated`1.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:System.IsolatedProxy">
            <summary>
            表示一个应用程序域孤立的代理。
            </summary>
        </member>
        <member name="M:System.IsolatedProxy.#ctor">
            <summary>
            初始化一个 <see cref="T:System.IsolatedProxy"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.IsolatedProxy.LoadAssembly(System.String)">
            <summary>
            加载指定路径的程序集。
            </summary>
            <param name="assemblyPath">包含程序集清单的文件的路径。</param>
        </member>
        <member name="M:System.IsolatedProxy.Callback(System.Action)">
            <summary>
            执行一个孤立的回调方法。
            </summary>
            <param name="callback">回调方法。</param>
        </member>
        <member name="M:System.IsolatedProxy.InitializeLifetimeService">
            <summary>
            获取控制此实例的生存期策略的生存期服务对象。
            </summary>
            <returns><see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> 类型的对象，用于控制此实例的生存期策略。这是此实例当前的生存期服务对象（如果存在）；否则为初始化为 <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> 属性的值的新生存期服务对象。</returns>
        </member>
        <member name="T:System.LockSlim">
            <summary>
            表示用于管理资源访问的锁定状态，可实现多线程读取或进行独占式写入访问。
            </summary>
        </member>
        <member name="P:System.LockSlim.Slim">
            <summary>
            获取实际的读写锁对象。
            </summary>
        </member>
        <member name="M:System.LockSlim.#ctor">
            <summary>
            初始化一个 <see cref="T:System.LockSlim"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.LockSlim.#ctor(System.Threading.LockRecursionPolicy)">
            <summary>
            提供锁定递归策略，初始化一个 <see cref="T:System.LockSlim"/> 类的新实例。
            </summary>
            <param name="recursionPolicy">锁定递归策略。</param>
        </member>
        <member name="M:System.LockSlim.Read">
            <summary>
            获取一个新的读取锁。
            </summary>
        </member>
        <member name="M:System.LockSlim.Write">
            <summary>
            获取一个新的写入锁。
            </summary>
        </member>
        <member name="M:System.LockSlim.UpgradeableRead">
            <summary>
            获取一个新的可更新的读取锁。
            </summary>
        </member>
        <member name="M:System.LockSlim.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:System.Log">
            <summary>
            表示一个日志的公共管理器。
            </summary>
        </member>
        <member name="P:System.Log.Logger">
            <summary>
            获取或设置日志的管理器。
            </summary>
        </member>
        <member name="P:System.Log.IsThreadContext">
            <summary>
            获取一个值，指示当前上下文在线程中是否已创建。
            </summary>
        </member>
        <member name="P:System.Log.Context">
            <summary>
            创建并返回一个 <see cref="T:System.LogContext"/>。返回当前线程上下文包含的 <see cref="T:System.LogContext"/> 或创建一个新的  <see cref="T:System.LogContext"/>。
            <para>当释放一个 <see cref="T:System.LogContext"/> 后，下一次调用获取将会重新创建上下文。</para>
            </summary>
        </member>
        <member name="M:System.Log.Info(System.String,System.Object[])">
            <summary>
            写入消息日志。
            </summary>
            <param name="message">日志的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.Log.Warn(System.String,System.Object[])">
            <summary>
            写入警告日志。
            </summary>
            <param name="message">日志的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.Log.Error(System.Exception)">
            <summary>
            写入错误日志。
            </summary>
            <param name="exception">日志的异常信息。</param>
        </member>
        <member name="M:System.Log.Error(System.String,System.Object[])">
            <summary>
            写入错误日志。
            </summary>
            <param name="message">日志的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="T:System.LogContext">
            <summary>
            表示一个日志的上下文。直至上下文释放后才会批量写入到日志。
            <para>通过日志上下文，可以保证日志在时间上的连贯性。</para>
            </summary>
        </member>
        <member name="P:System.LogContext.Items">
            <summary>
            获取当前上下文的所有日志项。
            </summary>
        </member>
        <member name="M:System.LogContext.Info(System.String,System.Object[])">
            <summary>
            写入消息日志。
            </summary>
            <param name="message">日志的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.LogContext.Warn(System.String,System.Object[])">
            <summary>
            写入警告日志。
            </summary>
            <param name="message">日志的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.LogContext.Error(System.Exception)">
            <summary>
            写入错误日志。
            </summary>
            <param name="exception">日志的异常信息。</param>
        </member>
        <member name="M:System.LogContext.Error(System.String,System.Object[])">
            <summary>
            写入错误日志。
            </summary>
            <param name="message">日志的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.LogContext.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:System.Mean`1">
            <summary>
            提供对延迟初始化的支持，并提供重新延迟初始化的支持。
            </summary>
            <typeparam name="T">指定正在延迟初始化的对象的类型。</typeparam>
        </member>
        <member name="M:System.Mean`1.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Mean`1"/> 类的新实例。发生延迟初始化时，使用目标类型的默认构造函数。
            </summary>
        </member>
        <member name="M:System.Mean`1.#ctor(System.Boolean)">
            <summary>
            初始化一个 <see cref="T:System.Mean`1"/> 类的新实例。发生延迟初始化时，使用目标类型的默认构造函数和指定的初始化模式。
            </summary>
            <param name="isThreadSafe">true 表示此示例可由多个线程同时使用；false 表示此实例一次只能由一个线程使用。</param>
        </member>
        <member name="M:System.Mean`1.#ctor(System.Func{`0})">
            <summary>
            初始化一个 <see cref="T:System.Mean`1"/> 类的新实例。发生延迟初始化时，使用指定的初始化函数。
            </summary>
            <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
        </member>
        <member name="M:System.Mean`1.#ctor(System.Threading.LazyThreadSafetyMode)">
            <summary>
            初始化一个 <see cref="T:System.Mean`1"/> 类的新实例，其中使用 T 的默认构造函数和指定的线程安全性模式。
            </summary>
            <param name="mode">线程安全性模式。</param>
        </member>
        <member name="M:System.Mean`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            初始化一个 <see cref="T:System.Mean`1"/> 类的新实例。发生延迟初始化时，使用指定的初始化函数和初始化模式。
            </summary>
            <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
            <param name="isThreadSafe">true 表示此示例可由多个线程同时使用；false 表示此实例一次只能由一个线程使用。</param>
        </member>
        <member name="M:System.Mean`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            初始化一个 <see cref="T:System.Mean`1"/> 类的新实例，其中使用指定的初始化函数和线程安全性模式。
            </summary>
            <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
            <param name="mode">线程安全性模式。</param>
        </member>
        <member name="P:System.Mean`1.IsValueCreated">
            <summary>
            获取一个值，该值指示是否已为此 <see cref="T:System.Mean`1"/> 实例创建一个值。
            </summary>
        </member>
        <member name="P:System.Mean`1.Value">
            <summary>
            获取当前 <see cref="T:System.Mean`1"/> 实例的延迟初始化值。
            </summary>
        </member>
        <member name="M:System.Mean`1.Reset">
            <summary>
            释放上一次初始化的值，并重置延迟初始化的值。
            </summary>
        </member>
        <member name="T:System.Types">
            <summary>
            基本数据类型的集合。
            </summary>
        </member>
        <member name="F:System.Types.IDbEngine">
            <summary>
            表示 <see cref="F:System.Types.IDbEngine"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GResult">
            <summary>
            表示 <see cref="T:System.Result`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Result">
            <summary>
            表示 <see cref="F:System.Types.Result"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.BinaryValue">
            <summary>
            表示 <see cref="F:System.Types.BinaryValue"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.ISerializable">
            <summary>
            表示 <see cref="T:Aoite.Serialization.ICustomSerializable"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Convert">
            <summary>
            表示 <see cref="F:System.Types.Convert"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Delegate">
            <summary>
            表示 <see cref="F:System.Types.Delegate"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Enum">
            <summary>
            表示 <see cref="F:System.Types.Enum"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Uri">
            <summary>
            表示 <see cref="F:System.Types.Uri"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Exception">
            <summary>
            表示 <see cref="F:System.Types.Exception"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.IConvertible">
            <summary>
            表示 <see cref="F:System.Types.IConvertible"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.IDisposable">
            <summary>
            表示 <see cref="F:System.Types.IDisposable"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.MemoryStream">
            <summary>
            表示 <see cref="T:System.IO.MemoryStream"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Stream">
            <summary>
            表示 <see cref="T:System.IO.Stream"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Nullable">
            <summary>
            表示 <see cref="T:System.Nullable`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Regex">
            <summary>
            表示 <see cref="T:System.Text.RegularExpressions.Regex"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Void">
            <summary>
            表示 void 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Type">
            <summary>
            表示 <see cref="F:System.Types.Type"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.TypeArray">
            <summary>
            表示 <see cref="F:System.Types.Type"/>[] 的类型。
            </summary>
        </member>
        <member name="F:System.Types.ArrayList">
            <summary>
            表示 <see cref="T:System.Collections.ArrayList"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Array">
            <summary>
            表示 <see cref="F:System.Types.Array"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.IEnumerator">
            <summary>
            表示 <see cref="T:System.Collections.IEnumerator"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.IEnumerable">
            <summary>
            表示 <see cref="T:System.Collections.IEnumerable"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.IGEnumerable">
            <summary>
            表示 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Hashtable">
            <summary>
            表示 <see cref="T:System.Collections.Hashtable"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GHashSet">
            <summary>
            表示 <see cref="T:System.Collections.Generic.HashSet`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GQueue">
            <summary>
            表示 <see cref="T:System.Collections.Generic.Queue`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GStack">
            <summary>
            表示 <see cref="T:System.Collections.Generic.Stack`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.HybridDictionary">
            <summary>
            表示 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GConcurrentDictionary">
            <summary>
            表示 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GDictionary">
            <summary>
            表示 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GIDictionary">
            <summary>
            表示 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GIList">
            <summary>
            表示 <see cref="T:System.Collections.Generic.IList`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GList">
            <summary>
            表示 <see cref="T:System.Collections.Generic.List`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.ICollection">
            <summary>
            表示 <see cref="T:System.Collections.ICollection"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.GCollection">
            <summary>
            表示 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.IDictionary">
            <summary>
            表示 <see cref="T:System.Collections.IDictionary"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.IList">
            <summary>
            表示 <see cref="T:System.Collections.IList"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.DataSet">
            <summary>
            表示 <see cref="F:System.Types.DataSet"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.DataTable">
            <summary>
            表示 <see cref="F:System.Types.DataTable"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.DataRow">
            <summary>
            表示 <see cref="F:System.Types.DataRow"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.DataColumn">
            <summary>
            表示 <see cref="F:System.Types.DataColumn"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Object">
            <summary>
            表示 <see cref="F:System.Types.Object"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.ObjectArray">
            <summary>
            表示 <see cref="F:System.Types.Object"/> 数组的类型。
            </summary>
        </member>
        <member name="F:System.Types.RefObject">
            <summary>
            表示 <see cref="F:System.Types.Object"/> 的类型（ref）。
            </summary>
        </member>
        <member name="F:System.Types.String">
            <summary>
            表示 <see cref="F:System.Types.String"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.StringBuilder">
            <summary>
            表示 <see cref="T:System.Text.StringBuilder"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.DBNull">
            <summary>
            表示 <see cref="F:System.Types.DBNull"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.ByteArray">
            <summary>
            表示 <see cref="F:System.Types.Byte"/> 数组的类型。
            </summary>
        </member>
        <member name="F:System.Types.CharArray">
            <summary>
            表示 <see cref="F:System.Types.Char"/> 数组数组的类型。
            </summary>
        </member>
        <member name="F:System.Types.Boolean">
            <summary>
            表示 <see cref="F:System.Types.Boolean"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Byte">
            <summary>
            表示 <see cref="F:System.Types.Byte"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Char">
            <summary>
            表示 <see cref="F:System.Types.Char"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.DateTime">
            <summary>
            表示 <see cref="F:System.Types.DateTime"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.DateTimeOffset">
            <summary>
            表示 <see cref="F:System.Types.DateTimeOffset"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Decimal">
            <summary>
            表示 <see cref="F:System.Types.Decimal"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Double">
            <summary>
            表示 <see cref="F:System.Types.Double"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Guid">
            <summary>
            表示 <see cref="F:System.Types.Guid"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.SqlGuid">
            <summary>
            表示 <see cref="T:System.Data.SqlTypes.SqlGuid"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Int16">
            <summary>
            表示 <see cref="F:System.Types.Int16"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Int32">
            <summary>
            表示 <see cref="F:System.Types.Int32"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Int64">
            <summary>
            表示 <see cref="F:System.Types.Int64"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.SByte">
            <summary>
            表示 <see cref="F:System.Types.SByte"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.Single">
            <summary>
            表示 <see cref="F:System.Types.Single"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.TimeSpan">
            <summary>
            表示 <see cref="F:System.Types.TimeSpan"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.UInt16">
            <summary>
            表示 <see cref="F:System.Types.UInt16"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.UInt32">
            <summary>
            表示 <see cref="F:System.Types.UInt32"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.UInt64">
            <summary>
            表示 <see cref="F:System.Types.UInt64"/> 的类型。
            </summary>
        </member>
        <member name="F:System.Types.TrueStrings">
            <summary>
            表示 True 的字符串形式。
            </summary>
        </member>
        <member name="F:System.Types.FlaseStrings">
            <summary>
            表示 Flase 的字符串形式。
            </summary>
        </member>
        <member name="F:System.Types.NumberFloatTypes">
            <summary>
            表示浮点数的数据类型集合。
            </summary>
        </member>
        <member name="F:System.Types.NumberTypes">
            <summary>
            表示数字的数据类型集合。
            </summary>
        </member>
        <member name="T:System.ValidCodeGenerator">
            <summary>
            表示图像验证码的生成器。
            </summary>
        </member>
        <member name="M:System.ValidCodeGenerator.Create(System.String,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.String)">
            <summary>
            生成指定宽、高、验证码的 GIF 格式图片。
            </summary>
            <param name="code">验证码。</param>
            <param name="width">图像的宽度，小于 1 则自动计算。</param>
            <param name="height">图像的高度，小于 1 则自动计算。默认为 22。</param>
            <param name="bgColor">默认背景颜色。</param>
            <param name="familyName">字体名称。</param>
            <returns>图像对象。</returns>
        </member>
        <member name="M:System.ValidCodeGenerator.ToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            将指定的图片转换成内存流。
            </summary>
            <param name="image">转换的图像。</param>
            <param name="format">转换的图像格式。</param>
            <returns>内存流对象。</returns>
        </member>
        <member name="T:System.VoidValue">
            <summary>
            表示一个没有返回的值。
            </summary>
        </member>
        <member name="T:System.WhereParameters">
            <summary>
            表示一个 WHERE 的条件参数。
            </summary>
        </member>
        <member name="P:System.WhereParameters.Where">
            <summary>
            获取或设置 WHERE 的语句。可以为 null 值。
            </summary>
        </member>
        <member name="P:System.WhereParameters.OrderBy">
            <summary>
            获取或设置 ORDER BY 的语句。可以为 null 值。
            </summary>
        </member>
        <member name="P:System.WhereParameters.Parameters">
            <summary>
            获取或设置 WHERE 的参数集合。可以为 null 值。
            </summary>
        </member>
        <member name="M:System.WhereParameters.#ctor">
            <summary>
            初始化一个 <see cref="T:System.WhereParameters"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.WhereParameters.#ctor(System.String,Aoite.Data.ExecuteParameterCollection)">
            <summary>
            初始化一个 <see cref="T:System.WhereParameters"/> 类的新实例。
            </summary>
            <param name="where">条件表达式。</param>
            <param name="ps">条件表达式的参数集合。</param>
        </member>
        <member name="M:System.WhereParameters.AppendTo(System.String)">
            <summary>
            将当前的 WHERE 语句拼接到 <paramref name="commandText"/>。
            </summary>
            <param name="commandText">命令文本。</param>
            <returns>拼接后的命令文本。如果存在 WHERE 条件则添加 WHERE 关键字和条件。</returns>
        </member>
        <member name="M:System.WhereParameters.Parse(Aoite.Data.IDbEngine,System.Object,System.String)">
            <summary>
            解析匿名对象参数集合，并用 AND 符拼接 WHERE 语句。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="objectInstance">匿名参数集合实例。</param>
            <param name="binary">二元运算符。</param>
        </member>
        <member name="M:System.WhereParameters.Parse(Aoite.Data.IDbEngine,Aoite.Data.ExecuteParameterCollection,System.String)">
            <summary>
            解析参数集合，并用 AND 符拼接 WHERE 语句。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="ps">参数集合。</param>
            <param name="binary">二元运算符。</param>
        </member>
        <member name="M:System.WhereParameters.ToString">
            <summary>
            返回一个模拟的 SQL 语句。
            </summary>
            <returns>返回 SQL 语句。</returns>
        </member>
        <member name="T:System.IObjectDisposable">
            <summary>
            定义一种对象释放分配的资源的方法。
            </summary>
        </member>
        <member name="P:System.IObjectDisposable.IsDisposed">
            <summary>
            指示当前对象是否已被释放。
            </summary>
        </member>
        <member name="T:System.ObjectDisposableBase">
            <summary>
            表示一个释放分配的资源的基类。
            </summary>
        </member>
        <member name="P:System.ObjectDisposableBase.IsDisposed">
            <summary>
            指示当前对象是否已被释放。
            </summary>
        </member>
        <member name="M:System.ObjectDisposableBase.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:System.ObjectDisposableBase.Dispose(System.Boolean)">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:System.ObjectDisposableBase.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:System.ObjectDisposableBase.DisposeUnmanaged">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:System.ObjectDisposableBase.ThrowIfDisposed">
            <summary>
            对已释放的对象执行操作时所引发的异常。
            </summary>
        </member>
        <member name="M:System.ObjectDisposableBase.Finalize">
            <summary>
            析构函数。
            </summary>
        </member>
        <member name="T:System.ExceptionEventHandler">
            <summary>
            表示异常信息的事件方法。
            </summary>
            <param name="sender">对象。</param>
            <param name="e">参数。</param>
        </member>
        <member name="T:System.ExceptionEventArgs">
            <summary>
            表示异常信息的事件参数。
            </summary>
        </member>
        <member name="P:System.ExceptionEventArgs.Exception">
            <summary>
            获取一个值，表示抛出的错误。
            </summary>
        </member>
        <member name="M:System.ExceptionEventArgs.#ctor">
            <summary>
            初始化一个 <see cref="T:System.ExceptionEventArgs"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            提供一个错误，初始化一个 <see cref="T:System.ExceptionEventArgs"/> 类的新实例。
            </summary>
            <param name="exception">一个错误。</param>
        </member>
        <member name="M:System.ExceptionEventArgs.#ctor(System.String)">
            <summary>
            提供错误的描述，初始化一个 <see cref="T:System.ExceptionEventArgs"/> 类的新实例。
            </summary>
            <param name="message">错误的描述。</param>
        </member>
        <member name="M:System.ExceptionEventArgs.ToString">
            <summary>
            创建并返回当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="T:System.CopyToStrategy">
            <summary>
            定义复制的策略。
            </summary>
        </member>
        <member name="F:System.CopyToStrategy.Default">
            <summary>
            默认方式。
            </summary>
        </member>
        <member name="F:System.CopyToStrategy.OnlyPrimaryKey">
            <summary>
            仅限主键方式。
            </summary>
        </member>
        <member name="F:System.CopyToStrategy.ExcludePrimaryKey">
            <summary>
            仅限非主键方式。
            </summary>
        </member>
        <member name="F:System.CopyToStrategy.OnlyChangeValues">
            <summary>
            仅限被修改过的值。
            </summary>
        </member>
        <member name="T:System.CommonExtensions">
            <summary>
            提供公共的实用工具方法。
            </summary>
        </member>
        <member name="M:System.CommonExtensions.CastTo``1(System.Object)">
            <summary>
            尝试将给定值转换为指定的数据类型。
            </summary>
            <typeparam name="T">要转换的数据类型。</typeparam>
            <param name="value">请求类型转换的值。</param>
            <returns>数据类型的值，或一个 null 值。</returns>
        </member>
        <member name="M:System.CommonExtensions.CastTo(System.Object,System.Type)">
            <summary>
            尝试将给定值转换为指定的数据类型。
            </summary>
            <param name="value">请求类型转换的值。</param>
            <param name="type">要转换的数据类型。</param>
            <returns>数据类型的值，或一个 null 值。</returns>
        </member>
        <member name="M:System.CommonExtensions.CopyFrom``2(``0,``1,System.CopyToStrategy)">
            <summary>
            将 <paramref name="target"/> 所有的属性值复制到当前对象。
            </summary>
            <typeparam name="TSource">源的数据类型。</typeparam>
            <typeparam name="TTarget">目标的数据类型。</typeparam>
            <param name="source">复制的源对象。</param>
            <param name="target">复制的目标对象。</param>
            <param name="targetStrategy">复制目标的策略。</param>
            <returns> <paramref name="source"/>。</returns>
        </member>
        <member name="M:System.CommonExtensions.CopyTo``1(System.Object,System.CopyToStrategy)">
            <summary>
            将当前对象所有的属性值复制成一个新的 <typeparamref name="TTarget"/> 实例。
            </summary>
            <typeparam name="TTarget">新的数据类型。</typeparam>
            <param name="source">复制的源对象。</param>
            <param name="targetStrategy">复制目标的策略。</param>
            <returns><typeparamref name="TTarget"/> 的心实例。</returns>
        </member>
        <member name="M:System.CommonExtensions.CopyTo``1(System.Object,``0,System.CopyToStrategy)">
            <summary>
            将当前对象所有的属性值复制到 <paramref name="target"/>。
            </summary>
            <typeparam name="TTarget">目标的数据类型。</typeparam>
            <param name="source">复制的源对象。</param>
            <param name="target">复制的目标对象。</param>
            <param name="targetStrategy">复制目标的策略。</param>
            <returns> <paramref name="target"/>。</returns>
        </member>
        <member name="M:System.CommonExtensions.ThrowIfExists(System.CompareResult)">
            <summary>
            抛出比较结果的错误。
            </summary>
            <param name="result">比较结果。</param>
        </member>
        <member name="M:System.CommonExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对当前集合的每个元素执行指定操作。
            </summary>
            <typeparam name="T">集合的数据类型。</typeparam>
            <param name="collection">当前集合。</param>
            <param name="action">执行的委托。</param>
        </member>
        <member name="M:System.CommonExtensions.Each``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            对当前集合的每个元素执行指定操作，并返回一个特定的结果集合。
            </summary>
            <typeparam name="T">集合的数据类型。</typeparam>
            <typeparam name="T2">返回的数据类型。</typeparam>
            <param name="collection">当前集合。</param>
            <param name="func">执行的委托。</param>
            <returns>集合。</returns>
        </member>
        <member name="M:System.CommonExtensions.ToStringOrEmpty(System.Object)">
            <summary>
            返回表示当前对象的 <see cref="T:System.String"/>，如果 <paramref name="obj"/> 是一个 null 值，将返回 <see cref="F:System.String.Empty"/>。
            </summary>
            <param name="obj">一个对象。</param>
            <returns> <paramref name="obj"/> 的 <see cref="T:System.String"/> 或 <see cref="F:System.String.Empty"/>。</returns>
        </member>
        <member name="M:System.CommonExtensions.TryDispose(System.IDisposable)">
            <summary>
            尝试释放当前对象使用的所有资源
            </summary>
            <param name="obj">释放的对象。</param>
        </member>
        <member name="M:System.CommonExtensions.HasValue(System.BinaryValue)">
            <summary>
            判定指定的二进制值是否包含有效的值。
            </summary>
            <param name="value">一个二进制值。</param>
            <returns>如果包含返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.CommonExtensions.ToChinese(System.Decimal)">
            <summary>
            将指定的金额转换为中文表示。
            </summary>
            <param name="money">数字表示的金额。</param>
            <returns>中文表示的金额。</returns>
        </member>
        <member name="T:System.DbExtensions">
            <summary>
            提供数据源操作的实用工具方法。
            </summary>
        </member>
        <member name="F:System.DbExtensions.DefaultKeyName">
            <summary>
            数据源表主键的默认字段名。
            </summary>
        </member>
        <member name="M:System.DbExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            添加一个参数。
            </summary>
            <param name="dbCommand">数据源命令。</param>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
        </member>
        <member name="M:System.DbExtensions.GetValue``1(System.Data.Common.DbCommand,System.Int32)">
            <summary>
            获取指定参数索引的值。
            </summary>
            <typeparam name="T">值的数据类型。</typeparam>
            <param name="dbCommand">数据源命令。</param>
            <param name="index">参数索引。</param>
            <returns>强类型的值。</returns>
        </member>
        <member name="M:System.DbExtensions.GetValue``1(System.Data.Common.DbCommand,System.String)">
            <summary>
            获取指定参数名称的值。
            </summary>
            <typeparam name="T">值的数据类型。</typeparam>
            <param name="dbCommand">数据源命令。</param>
            <param name="name">参数名称。</param>
            <returns>强类型的值。</returns>
        </member>
        <member name="M:System.DbExtensions.ToFullString(Aoite.Data.ExecuteCommand,System.Object)">
            <summary>
            将指定的执行命令转换成完整字符串形式。
            </summary>
            <param name="command">执行命令。</param>
            <param name="result">表示返回值。</param>
            <returns>完整执行命令的字符串形式。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntity``1(System.Data.Common.DbCommand)">
            <summary>
            执行查询，转换并返回结果换后的实体。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="dbCommand">数据源命令。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntity(System.Data.Common.DbCommand)">
            <summary>
            执行查询，转换并返回结果换后的实体。
            </summary>
            <param name="dbCommand">数据源命令。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntities``1(System.Data.Common.DbCommand)">
            <summary>
            执行查询，转换并返回结果集转换后的实体集合。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="dbCommand">数据源命令。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntities(System.Data.Common.DbCommand)">
            <summary>
            执行查询，转换并返回结果集转换后的实体集合。
            </summary>
            <param name="dbCommand">数据源命令。</param>
            <returns>实体的集合</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntityAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)">
            <summary>
            异步执行查询，转换并返回结果换后的实体。
            </summary>
            <param name="dbCommand">数据源命令。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntityAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)">
            <summary>
            异步执行查询，转换并返回结果换后的实体。
            </summary>
            <param name="dbCommand">数据源命令。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntitiesAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)">
            <summary>
            异步执行查询，转换并返回结果集转换后的实体集合。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="dbCommand">数据源命令。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteEntitiesAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)">
            <summary>
            异步执行查询，转换并返回结果集转换后的实体集合。
            </summary>
            <param name="dbCommand">数据源命令。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <returns>实体的集合</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteScalar``1(System.Data.Common.DbCommand)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列的强类型值。所有其他的列和行将被忽略。
            </summary>
            <typeparam name="TValue">值的数据类型。</typeparam>
            <param name="dbCommand">数据源命令。</param>
            <returns>结果集中第一行的第一列</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteTable(System.Data.Common.DbCommand,System.Data.Common.DbDataAdapter)">
            <summary>
            执行查询，并返回一张表。
            </summary>
            <param name="dbCommand">数据库命令。</param>
            <param name="dataAdpater">数据源适配器。</param>
            <returns>一张表。</returns>
        </member>
        <member name="M:System.DbExtensions.ExecuteDataSet``1(System.Data.Common.DbCommand,System.Data.Common.DbDataAdapter)">
            <summary>
            执行查询，并返回一个数据集。
            </summary>
            <typeparam name="TDataSet">数据集的数据类型。</typeparam>
            <param name="dbCommand">数据库命令。</param>
            <param name="dataAdpater">数据源适配器。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:System.DbExtensions.TryOpen(System.Data.Common.DbConnection)">
            <summary>
            当数据源的状态为关闭时，打开连接。
            </summary>
            <param name="connection">数据库的连接。</param>
        </member>
        <member name="M:System.DbExtensions.TryClose(System.Data.Common.DbConnection)">
            <summary>
            当数据源的状态为打开时，尝试关闭连接。该方法可以避免异常的抛出。
            </summary>
            <param name="connection">数据库的连接。</param>
        </member>
        <member name="M:System.DbExtensions.ToTable(Aoite.Data.IDbExecutor,System.IPagination)">
            <summary>
            执行分页查询命令，并返回表。
            </summary>
            <param name="executor">执行器。</param>
            <param name="page">一个分页的实现。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:System.DbExtensions.ToTableAsync(Aoite.Data.IDbExecutor,System.IPagination)">
            <summary>
            异步执行分页查询命令，并返回表。
            </summary>
            <param name="executor">执行器。</param>
            <param name="page">一个分页的实现。</param>
            <returns>一张包含总记录数的表。</returns>
        </member>
        <member name="M:System.DbExtensions.ToTableAsync(Aoite.Data.IDbExecutor,System.Threading.CancellationToken,System.IPagination)">
            <summary>
            异步执行分页查询命令，并返回表。
            </summary>
            <param name="executor">执行器。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="page">一个分页的实现。</param>
            <returns>包含总记录数的表。</returns>
        </member>
        <member name="M:System.DbExtensions.ToEntitiesAsync``1(Aoite.Data.IDbExecutor,System.IPagination)">
            <summary>
            异步执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="executor">执行器。</param>
            <param name="page">一个分页的实现。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.ToEntitiesAsync``1(Aoite.Data.IDbExecutor,System.Threading.CancellationToken,System.IPagination)">
            <summary>
            异步执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="executor">执行器。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="page">一个分页的实现。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.ToEntitiesAsync(Aoite.Data.IDbExecutor,System.IPagination)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="executor">执行器。</param>
            <param name="page">一个分页的实现。</param>
            <returns>包含总记录数的匿名实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.ToEntitiesAsync(Aoite.Data.IDbExecutor,System.Threading.CancellationToken,System.IPagination)">
            <summary>
            异步执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="executor">执行器。</param>
            <param name="cancellationToken">针对取消请求监视的标记。</param>
            <param name="page">一个分页的实现。</param>
            <returns>包含总记录数的匿名实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.ToEntities``1(Aoite.Data.IDbExecutor,System.IPagination)">
            <summary>
            执行分页查询命令，并返回实体的集合。
            </summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
            <param name="executor">执行器。</param>
            <param name="page">一个分页的实现。</param>
            <returns>包含总记录数的实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.ToEntities(Aoite.Data.IDbExecutor,System.IPagination)">
            <summary>
            执行分页查询命令，并返回匿名实体的集合。
            </summary>
            <param name="executor">执行器。</param>
            <param name="page">一个分页的实现。</param>
            <returns>包含总记录数的匿名实体的集合。</returns>
        </member>
        <member name="M:System.DbExtensions.Execute(Aoite.Data.IDbEngine,System.String)">
            <summary>
            生成执行数据源查询与交互的执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="commandText">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <returns>执行数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Execute(Aoite.Data.IDbEngine,System.String,Aoite.Data.ExecuteParameterCollection)">
            <summary>
            生成执行数据源查询与交互的执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="commandText">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="parameters">参数集合。</param>
            <returns>执行数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Execute(Aoite.Data.IDbEngine,System.String,System.Object[])">
            <summary>
            生成执行数据源查询与交互的执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="commandText">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="parameters">匹配 Name/Value 的参数集合或 数组。</param>
            <returns>执行数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Execute(Aoite.Data.IDbEngine,System.String,Aoite.Data.ExecuteParameter[])">
            <summary>
            生成执行数据源查询与交互的执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="commandText">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="parameters">参数集合。</param>
            <returns>执行数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Execute(Aoite.Data.IDbEngine,System.String,System.Object)">
            <summary>
            生成执行数据源查询与交互的执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="commandText">Transact-SQL 语句。第一个字符为“>”时，表示一个存储过程。</param>
            <param name="objectInstance">任意类型的实例。</param>
            <returns>执行数据源查询与交互的执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Add``1(Aoite.Data.IDbEngine,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个插入的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.AddAnonymous``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个插入的命令，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.Modify``1(Aoite.Data.IDbEngine,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个更新的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.ModifyAnonymous``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个更新的命令，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.Remove``1(Aoite.Data.IDbEngine,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个删除的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.RemoveAnonymous``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            执行一个删除的命令，在删除命令中 <paramref name="entityOrPKValues"/> 可以是主键的值（表只有一个主键），也可以是匿名对象的部分成员（<paramref name="entityOrPKValues"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entityOrPKValues">实体的实例对象，在删除命令中 <paramref name="entityOrPKValues"/> 可以是主键的值（表只有一个主键，值允许是一个数组，表示删除多条记录），也可以是匿名对象的部分成员（<paramref name="entityOrPKValues"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOne``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            获取指定 <paramref name="keyValue"/> 值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOne``1(Aoite.Data.IDbEngine,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            获取指定 <paramref name="keyName"/> 键值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOne``2(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            获取指定 <paramref name="keyValue"/> 值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOne``2(Aoite.Data.IDbEngine,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            获取指定 <paramref name="keyName"/> 键值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOne``2(Aoite.Data.IDbEngine,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            获取指定 <paramref name="keyValue"/> 值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOne``2(Aoite.Data.IDbEngine,System.String,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            获取指定 <paramref name="keyName"/> 键值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.Exists``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            判断指定的主键的列名的值是否已存在。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.DbExtensions.Exists``1(Aoite.Data.IDbEngine,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            判断指定的主键的列名的值是否已存在。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.DbExtensions.RowCount``1(Aoite.Data.IDbEngine,Aoite.Data.ICommandTunnel)">
            <summary>
            获取数据表的总行数。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>数据的行数。</returns>
        </member>
        <member name="M:System.DbExtensions.GetLastIdentity``1(Aoite.Data.IDbEngine,Aoite.Data.ICommandTunnel)">
            <summary>
            获取最后递增序列值。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>递增序列值。</returns>
        </member>
        <member name="M:System.DbExtensions.Select(Aoite.Data.IDbEngine,System.String[])">
            <summary>
            添加 SELECT 的字段。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="fields">字段的集合。</param>
            <returns> <see cref="T:Aoite.Data.ISelect"/> 的实例。</returns>
        </member>
        <member name="M:System.DbExtensions.Select``1(Aoite.Data.IDbEngine,System.String[])">
            <summary>
            添加 SELECT 的字段和 FORM 语句。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="fields">字段的集合。</param>
            <returns> <see cref="T:Aoite.Data.ISelect"/> 的实例。</returns>
        </member>
        <member name="M:System.DbExtensions.Filter(Aoite.Data.IDbEngine)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Filter(Aoite.Data.IDbEngine,System.Object,System.String)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="objectInstance">匿名参数集合实例。</param>
            <param name="binary">二元运算符。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Filter(Aoite.Data.IDbEngine,System.Object[])">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keysAndValues">应当是 <see cref="T:System.String"/> / <see cref="T:System.Object"/> 的字典集合。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Filter(Aoite.Data.IDbEngine,Aoite.Data.ExecuteParameterCollection,System.String)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="ps">参数集合实例。</param>
            <param name="binary">二元运算符。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Filter(Aoite.Data.IDbEngine,System.Action{Aoite.Data.IWhere})">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="whereCallback">一个创建查询条件的回调方法。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Filter(Aoite.Data.IDbEngine,System.String,Aoite.Data.ExecuteParameterCollection)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="where">条件表达式。</param>
            <param name="ps">参数集合实例。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.Filter(Aoite.Data.IDbEngine,System.WhereParameters)">
            <summary>
            创建一个筛选执行器。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="where">条件参数。</param>
            <returns>筛选执行器。</returns>
        </member>
        <member name="M:System.DbExtensions.CreateWhere(Aoite.Data.IDbEngine,Aoite.Data.ExecuteParameterCollection,System.String)">
            <summary>
            创建一个条件查询语句。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="ps">参数集合实例。</param>
            <param name="binary">二元运算符。</param>
            <returns>条件查询语句。</returns>
        </member>
        <member name="M:System.DbExtensions.AddAsync``1(Aoite.Data.IDbEngine,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个插入的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.AddAnonymousAsync``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个插入的命令，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.ModifyAsync``1(Aoite.Data.IDbEngine,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个更新的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.ModifyAnonymousAsync``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个更新的命令，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象，可以是匿名对象的部分成员（<paramref name="entity"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.RemoveAsync``1(Aoite.Data.IDbEngine,``0,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个删除的命令。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entity">实体的实例对象。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.RemoveAnonymousAsync``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步执行一个删除的命令，在删除命令中 <paramref name="entityOrPKValues"/> 可以是主键的值（表只有一个主键），也可以是匿名对象的部分成员（<paramref name="entityOrPKValues"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="entityOrPKValues">实体的实例对象，在删除命令中 <paramref name="entityOrPKValues"/> 可以是主键的值（表只有一个主键，值允许是一个数组，表示删除多条记录），也可以是匿名对象的部分成员（<paramref name="entityOrPKValues"/> 属性成员和 <typeparamref name="TEntity"/> 属性成员必须一致）。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>受影响的行。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOneAsync``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取指定 <paramref name="keyValue"/> 值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOneAsync``1(Aoite.Data.IDbEngine,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取指定 <paramref name="keyName"/> 键值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOneAsync``2(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取指定 <paramref name="keyValue"/> 值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOneAsync``2(Aoite.Data.IDbEngine,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取指定 <paramref name="keyName"/> 键值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOneAsync``2(Aoite.Data.IDbEngine,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取指定 <paramref name="keyValue"/> 值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.FindOneAsync``2(Aoite.Data.IDbEngine,System.String,System.Object,System.Func{``0,``1},Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取指定 <paramref name="keyName"/> 键值的数据源对象。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <typeparam name="TView">视图的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。可以为 null 值。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="select">视图选择器。可以为 null 值，表示不采用匿名对象的方式。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>实体。</returns>
        </member>
        <member name="M:System.DbExtensions.ExistsAsync``1(Aoite.Data.IDbEngine,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步判断指定的主键的列名的值是否已存在。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.DbExtensions.ExistsAsync``1(Aoite.Data.IDbEngine,System.String,System.Object,Aoite.Data.ICommandTunnel)">
            <summary>
            异步判断指定的主键的列名的值是否已存在。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="keyName">主键的列名。</param>
            <param name="keyValue">主键的列值。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>表示数据是否存在。</returns>
        </member>
        <member name="M:System.DbExtensions.RowCountAsync``1(Aoite.Data.IDbEngine,Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取数据表的总行数。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>数据的行数。</returns>
        </member>
        <member name="M:System.DbExtensions.GetLastIdentityAsync``1(Aoite.Data.IDbEngine,Aoite.Data.ICommandTunnel)">
            <summary>
            异步获取最后递增序列值。
            </summary>
            <param name="engine">数据源查询与交互引擎的实例。</param>
            <param name="tunnel">用于个性化表名和命令的暗道，可以为 null 值。</param>
            <returns>递增序列值。</returns>
        </member>
        <member name="T:System.IOExtensions">
            <summary>
            提供用于 System.IO 命名空间下的实用工具方法。
            </summary>
        </member>
        <member name="M:System.IOExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            从当前流中读取所有字节并将其写入到目标流中（使用指定的缓冲区大小）。
            </summary>
            <param name="stream">源流。</param>
            <param name="source">将包含当前流的内容的流。</param>
            <param name="startPosition">指定开始复制的流位置。</param>
            <param name="bufferSize">缓冲区的大小。此值必须大于零。默认大小为 4096。</param>
        </member>
        <member name="M:System.IOExtensions.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>
            向当前流写入字节序列。
            </summary>
            <param name="stream">当前流。</param>
            <param name="bytes">字节序列。</param>
        </member>
        <member name="M:System.IOExtensions.WriteBytes(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            向当前流写入字节序列。
            </summary>
            <param name="stream">当前流。</param>
            <param name="bytes">字节序列。</param>
            <param name="count">要写入当前流的字节数。</param>
        </member>
        <member name="T:System.MapperExtensions">
            <summary>
            表示一个映射器的扩展方法。
            </summary>
        </member>
        <member name="M:System.MapperExtensions.From(System.TypeMapper,System.Data.DataRow)">
            <summary>
            将指定的数据行填充到实体。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="row">数据行。</param>
            <returns>映射目标的新实例。</returns>
        </member>
        <member name="M:System.MapperExtensions.From(System.TypeMapper,System.Data.IDataReader)">
            <summary>
            将指定的数据读取器填充到实体。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="reader">数据读取器。</param>
            <returns>映射目标的新实例。</returns>
        </member>
        <member name="M:System.MapperExtensions.From(System.TypeMapper,System.Object)">
            <summary>
            将指定的实体填充到数据行。
            </summary>
            <param name="mapper">类型映射器。</param>
            <param name="entity">实体。</param>
            <returns>映射目标的新实例。</returns>
        </member>
        <member name="T:System.NetExtensions">
            <summary>
            提供用于 System.Net 的实用工具方法。
            </summary>
        </member>
        <member name="M:System.NetExtensions.Shutdown(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            强制停止。
            </summary>
            <param name="socket">一个 <see cref="T:System.Net.Sockets.Socket"/>。</param>
            <param name="disposing">指示是否释放 Socket 对象，并且不再使用。</param>
        </member>
        <member name="M:System.NetExtensions.ToIPEndPoint(Aoite.Net.IHostPort)">
            <summary>
            将指定主机地址转换为 <see cref="T:System.Net.IPAddress"/> 类的新实例，并创建一个 <see cref="T:System.Net.IPEndPoint"/> 类的新实例。
            </summary>
            <param name="hp">一个 <see cref="T:Aoite.Net.IHostPort"/> 类的实现。</param>
            <returns>新的 <see cref="T:System.Net.IPEndPoint"/> 实例。</returns>
        </member>
        <member name="M:System.NetExtensions.ToLoopback(System.Net.IPEndPoint)">
            <summary>
            将当前网络地址转换为环回地址。
            </summary>
            <param name="endPoint">网络地址。</param>
            <returns>当前实例。</returns>
        </member>
        <member name="M:System.NetExtensions.Connect(System.Net.Sockets.Socket,System.Net.EndPoint,System.TimeSpan)">
            <summary>
            开始一个对远程主机连接的异步请求。
            </summary>
            <param name="server">服务端。</param>
            <param name="endPoint">远程主机。</param>
            <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan"/>，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan"/>。</param>
        </member>
        <member name="M:System.NetExtensions.Connect(System.Net.Sockets.TcpClient,System.String,System.Int32,System.TimeSpan)">
            <summary>
            开始一个对远程主机连接的异步请求。
            </summary>
            <param name="server">服务端。</param>
            <param name="host">远程主机的名称。</param>
            <param name="port">远程主机的端口号。</param>
            <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan"/>，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan"/>。</param>
        </member>
        <member name="M:System.NetExtensions.Connect(System.Net.Sockets.TcpClient,System.Net.IPEndPoint,System.TimeSpan)">
            <summary>
            开始一个对远程主机连接的异步请求。
            </summary>
            <param name="server">服务端。</param>
            <param name="endPoint">打算连接到的 <see cref="T:System.Net.IPEndPoint"/>。</param>
            <param name="timeout">表示等待的毫秒数的 <see cref="T:System.TimeSpan"/>，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan"/>。</param>
        </member>
        <member name="M:System.NetExtensions.SetKeepAlive(System.Net.Sockets.Socket,System.UInt32)">
            <summary>
            设置以秒为单位的心跳侦测间隔。
            </summary>
            <param name="socket">套接字。</param>
            <param name="ms">心跳侦测间隔。</param>
        </member>
        <member name="T:System.ResultExtensions">
            <summary>
            表示 <see cref="T:System.Result"/> 的扩展。
            </summary>
        </member>
        <member name="M:System.ResultExtensions.ThrowIfFailded``1(``0)">
            <summary>
            如果结果出现异常则抛出错误，否则不做任何处理。
            </summary>
            <typeparam name="TResult">结果的数据类型。</typeparam>
            <param name="result"><see cref="T:System.Result"/> 的派生类实例。</param>
        </member>
        <member name="M:System.ResultExtensions.ToFailded``1(``0,System.Exception,System.Int32)">
            <summary>
            指定错误信息和状态码，将当前结果切换到失败状态。
            </summary>
            <typeparam name="TResult">结果的数据类型。</typeparam>
            <param name="result"><see cref="T:System.Result"/> 的派生类实例。</param>
            <param name="exception">引发异常的 <see cref="T:System.Exception"/>。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.ResultExtensions.ToFailded``1(``0,System.String,System.Int32)">
            <summary>
            指定错误信息和状态码，将当前结果切换到失败状态。
            </summary>
            <typeparam name="TResult">结果的数据类型。</typeparam>
            <param name="result"><see cref="T:System.Result"/> 的派生类实例。</param>
            <param name="message">描述错误的信息。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.ResultExtensions.ToSuccessed``1(``0)">
            <summary>
            将当前结果切换到成功状态，并且清除结果的错误信息。
            </summary>
            <typeparam name="TResult">结果的数据类型。</typeparam>
            <param name="result"><see cref="T:System.Result"/> 的派生类实例。</param>
        </member>
        <member name="M:System.ResultExtensions.ToSuccessed``2(``0,``1)">
            <summary>
            将当前结果切换到成功的状态，并且清除结果的错误信息。
            </summary>
            <typeparam name="TResult">结果的数据类型。</typeparam>
            <typeparam name="TValue">结果值的数据类型。</typeparam>
            <param name="result"><see cref="T:System.Result"/> 的派生类实例。</param>
            <param name="value">结果返回的值。</param>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            提供用于字符串值的实用工具方法。
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToMd5(System.String,System.Text.Encoding)">
            <summary>
            返回当前字符串的 MD5 哈希后小写形式的字符串。
            </summary>
            <param name="text">需哈希的字符串。</param>
            <param name="encoding">编码方式。</param>
            <returns>哈希后的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.ToMd5(System.Byte[])">
            <summary>
            返回当前字节数组的 MD5 哈希后小写形式的字符串。
            </summary>
            <param name="bytes">需哈希的字节数组。</param>
            <returns>哈希后的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            将当前字符串转换为智能小写模式。
            </summary>
            <param name="s">当前字符串。</param>
            <returns>新的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将当前字符串转换为指定编码的的字节组。
            </summary>
            <param name="value">当前字符串。</param>
            <param name="encoding">编码。为 null 值表示 UTF8 的编码。</param>
            <returns>字节组。</returns>
        </member>
        <member name="M:System.StringExtensions.iEquals(System.String,System.String)">
            <summary>
            忽略被比较字符串的大小写，确定两个指定的 <see cref="T:System.String"/> 实例是否具有同一值。
            </summary>
            <param name="a"><see cref="T:System.String"/>第一个 <see cref="T:System.String"/> 的实例。</param>
            <param name="b"><see cref="T:System.String"/>第二个 <see cref="T:System.String"/> 的实例。</param>
            <returns>如果 <paramref name="a"/> 参数的值等于 <paramref name="b"/> 参数的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:System.StringExtensions.iStartsWith(System.String,System.String)">
            <summary>
            忽略被比较字符串的大小写，确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。
            </summary>
            <param name="a"><see cref="T:System.String"/>第一个 <see cref="T:System.String"/> 的实例。</param>
            <param name="b"><see cref="T:System.String"/>第二个 <see cref="T:System.String"/> 的实例。</param>
            <returns>如果 <paramref name="b"/> 参数与此字符串的开头匹配，则为 true；否则为 false。 </returns>
        </member>
        <member name="M:System.StringExtensions.iEndsWith(System.String,System.String)">
            <summary>
            忽略被比较字符串的大小写，确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。
            </summary>
            <param name="a"><see cref="T:System.String"/>第一个 <see cref="T:System.String"/> 的实例。</param>
            <param name="b"><see cref="T:System.String"/>第二个 <see cref="T:System.String"/> 的实例。</param>
            <returns>如果 <paramref name="b"/> 参数与此字符串的结尾匹配，则为 true；否则为 false。 </returns>
        </member>
        <member name="M:System.StringExtensions.iContains(System.String,System.String)">
            <summary>
            忽略被比较字符串的大小写，返回一个值，该值指示指定的 <see cref="T:System.String"/> 对象是否出现在此字符串中。
            </summary>
            <param name="a"><see cref="T:System.String"/>第一个 <see cref="T:System.String"/> 的实例。</param>
            <param name="b"><see cref="T:System.String"/>第二个 <see cref="T:System.String"/> 的实例。</param>
            <returns>如果 <paramref name="b"/> 参数出现在此字符串中，或者 <paramref name="b"/> 为空字符串 ("")，则为 true；否则为 false。 </returns>
        </member>
        <member name="M:System.StringExtensions.ToLiking(System.String)">
            <summary>
            在当前字符串的前后增加“%”符号。
            </summary>
            <param name="input">当前字符串。</param>
            <returns>新的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.Fmt(System.String,System.Object[])">
            <summary>
            将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
            </summary>
            <param name="format">复合格式字符串。</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns><paramref name="format"/> 的副本，其中的格式项已替换为 <paramref name="args"/> 中相应对象的字符串表示形式。</returns>
        </member>
        <member name="M:System.StringExtensions.ToStringOrEmpty(System.String)">
            <summary>
            返回表示当前 <see cref="T:System.String"/>，如果 <paramref name="input"/> 是一个 null 值，将返回 <see cref="F:System.String.Empty"/>。
            </summary>
            <param name="input">一个字符串。</param>
            <returns> <paramref name="input"/> 的 <see cref="T:System.String"/> 或 <see cref="F:System.String.Empty"/>。</returns>
        </member>
        <member name="M:System.StringExtensions.IsNull(System.String)">
            <summary>
            判定当前字符串是否是一个空的字符串。
            </summary>
            <param name="input">当前字符串。</param>
            <returns>如果字符串为 null、空 或 空白，将返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.StringExtensions.IsNotNull(System.String)">
            <summary>
            判定当前字符串是否不是一个空的字符串。
            </summary>
            <param name="input">当前字符串。</param>
            <returns>如果字符串为 null、空 或 空白，将返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            将指定的字节数组转换成十六进制的字符串。
            </summary>
            <param name="source">一个字节数组。</param>
            <returns>由字节数组转换后的十六进制的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.CutString(System.String,System.Int32,System.String)">
            <summary>
            指定整串字符串的最大长度，剪裁字符串数据，超出部分将会在结尾添加“...”。
            </summary>
            <param name="input">一个字符串。</param>
            <param name="maxLength">字符串的最大长度（含）。</param>
            <param name="ellipsis">指定省略号的字符串，默认为“...”。</param>
            <returns>新的字符串 -或- 原字符串，该字符串的最大长度不超过 <paramref name="maxLength"/>。</returns>
        </member>
        <member name="M:System.StringExtensions.Starts(System.String,System.Int32)">
            <summary>
            截取字符串开头的内容。
            </summary>
            <param name="input">一个字符串。</param>
            <param name="length">获取的字符串长度。</param>
            <returns>新的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.Ends(System.String,System.Int32)">
            <summary>
            截取字符串结尾的内容。
            </summary>
            <param name="input">一个字符串。</param>
            <param name="length">获取的字符串长度。</param>
            <returns>新的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.RemoveStarts(System.String,System.Int32)">
            <summary>
            删除当前字符串的开头的字符串。
            </summary>
            <param name="val">目标字符串。</param>
            <param name="count">要删除的字长度。</param>
            <returns>删除后的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.RemoveEnds(System.String,System.Int32)">
            <summary>
            删除当前字符串的结尾的字符串。
            </summary>
            <param name="val">目标字符串。</param>
            <param name="count">要删除的字长度。</param>
            <returns>删除后的字符串。</returns>
        </member>
        <member name="M:System.StringExtensions.GetDataLength(System.String)">
            <summary>
            获取字符串的字节数。
            </summary>
            <param name="val">目标字符串。</param>
            <returns>字符串的字节数。</returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            基本数据类型的实用工具方法。
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>
            返回一个类型的默认值。
            </summary>
            <param name="type">值类型或引用类型。</param>
            <returns>类型的默认值。</returns>
        </member>
        <member name="M:System.TypeExtensions.IsDataType(System.Type)">
            <summary>
            判断一个类型是否为 <see cref="T:System.Data.DataTable"/> 或 <see cref="T:System.Data.DataSet"/> 的类型。
            </summary>
            <param name="type">数据类型。</param>
            <returns>如果类型为 <see cref="T:System.Data.DataTable"/> 或 <see cref="T:System.Data.DataSet"/>，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.TypeExtensions.IsAnonymous(System.Type)">
            <summary>
            判断类型是否为匿名类型。
            </summary>
            <param name="type">数据类型。</param>
            <returns>如果为匿名类型返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.TypeExtensions.IsNullable(System.Type)">
            <summary>
            判断一个类型是否为可空类型。
            </summary>
            <param name="type">需要判断的类型。</param>
            <returns>如果为 true 则是一个可空类型，否则为 false。</returns>
        </member>
        <member name="M:System.TypeExtensions.GetNullableType(System.Type)">
            <summary>
            尝试获取可空类型的真实类型。
            </summary>
            <param name="type">需要判断的类型。</param>
            <returns>可空类型的真实类型，若当前类型非可空类型则返回原始值。</returns>
        </member>
        <member name="M:System.TypeExtensions.HasStringConverter(System.Type)">
            <summary>
            判断当前类型是否可以从 <see cref="T:System.String"/> 类型进行转换。
            </summary>
            <param name="type">需要判断的类型。</param>
            <returns>如果可以转换返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.TypeExtensions.IsSimpleType(System.Type)">
            <summary>
            获取一个值，指示当前类型是否为简单类型。
            </summary>
            <param name="type">需要判断的类型。</param>
            <returns>如果为简单类型返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.TypeExtensions.IsNumber(System.Type)">
            <summary>
            判断一个类型是否为数字类型。
            </summary>
            <param name="type">数据类型。</param>
            <returns>如果类型为任意数字类型则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.TypeExtensions.IsNumberFloat(System.Type)">
            <summary>
            判断一个类型是否为浮点数类型。
            </summary>
            <param name="type">数据类型。</param>
            <returns>如果类型为 <see cref="T:System.Single"/>、<see cref="T:System.Double"/> 或 <see cref="T:System.Decimal"/> 则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.TypeExtensions.GetSimpleType(System.Type,System.Int16,System.Int16,System.Boolean)">
            <summary>
            获取指定类型的缩写。
            </summary>
            <param name="type">数据类型。</param>
            <param name="numericPrecision">数字长度。</param>
            <param name="numericScale">数字精度。</param>
            <param name="allowDBNull">是否允许为空。</param>
        </member>
        <member name="M:System.TypeExtensions.FindField(System.Type,System.String)">
            <summary>
            查找指定名称的字段（不区分大小写、静态、实例、公有和私有）。
            </summary>
            <param name="type">数据类型。</param>
            <param name="name">字段名称。</param>
            <returns>字段或一个 null 值。</returns>
        </member>
        <member name="M:System.TypeExtensions.FindProperty(System.Type,System.String)">
            <summary>
            查找指定名称的属性（不区分大小写、静态、实例、公有和私有）。
            </summary>
            <param name="type">数据类型。</param>
            <param name="name">属性名称。</param>
            <returns>属性或一个 null 值。</returns>
        </member>
        <member name="M:System.TypeExtensions.FindMethod(System.Type,System.String,System.Type[])">
            <summary>
            查找指定参数类型数组和名称的方法（不区分大小写、静态、实例、公有和私有）。
            </summary>
            <param name="type">数据类型。</param>
            <param name="name">方法名称。</param>
            <param name="types">方法的参数类型数组。</param>
            <returns>方法或一个 null 值。</returns>
        </member>
        <member name="M:System.TypeExtensions.FindConstructor(System.Type,System.Type[])">
            <summary>
            查找指定参数类型数组的构造函数。
            </summary>
            <param name="type">数据类型。</param>
            <param name="types">构造函数的参数类型数组。</param>
            <returns>构造函数或一个 null 值。</returns>
        </member>
        <member name="M:System.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            返回由 <typeparamref name="T"/> 标识的特性（包括继承链）。
            </summary>
            <typeparam name="T">特性的数据类型。</typeparam>
            <param name="member">成员。</param>
            <returns>如果存在标志，则返回这个值，否则返回一个默认值。</returns>
        </member>
        <member name="M:System.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            返回由 <typeparamref name="T"/> 标识的特性。
            </summary>
            <typeparam name="T">特性的数据类型。</typeparam>
            <param name="member">成员。</param>
            <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。</param>
            <returns>如果存在标志，则返回这个值，否则返回一个默认值。</returns>
        </member>
        <member name="M:System.TypeExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            返回由 <typeparamref name="T"/> 标识的特性（包括继承链）。
            </summary>
            <typeparam name="T">特性的数据类型。</typeparam>
            <param name="member">成员。</param>
            <returns>特性的集合枚举器。</returns>
        </member>
        <member name="M:System.TypeExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            返回由 <typeparamref name="T"/> 标识的特性的数组。
            </summary>
            <typeparam name="T">特性的数据类型。</typeparam>
            <param name="member">成员。</param>
            <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。</param>
            <returns>特性的集合枚举器。</returns>
        </member>
        <member name="M:System.TypeExtensions.ToEnumValue(System.Type,System.Object)">
            <summary>
            将指定的值转换为枚举类型。
            </summary>
            <param name="type">类型。</param>
            <param name="value">实例。</param>
            <returns>类型转换的实例。</returns>
        </member>
        <member name="M:System.TypeExtensions.ChangeType(System.Type,System.Object)">
            <summary>
            将指定的值转换为当前类型。
            </summary>
            <param name="type">类型。</param>
            <param name="value">实例。</param>
            <returns>类型转换的实例。</returns>
        </member>
        <member name="T:System.Web.WebExtensions">
            <summary>
            基于 Web 的扩展方法。
            </summary>
        </member>
        <member name="M:System.Web.WebExtensions.GetClientAddress(System.Web.HttpRequest)">
            <summary>
            获取请求客户端地址。
            </summary>
            <param name="request">当前 HTTP 请求。</param>
            <returns>客户端地址。</returns>
        </member>
        <member name="T:System.Web.IIdentityStore">
            <summary>
            定义一个客户端唯一标识的存储功能。
            </summary>
        </member>
        <member name="M:System.Web.IIdentityStore.Set(System.Object)">
            <summary>
            设置客户端唯一标识。
            </summary>
            <param name="identity">客户端的唯一标识。</param>
        </member>
        <member name="M:System.Web.IIdentityStore.Get">
            <summary>
            获取客户端的唯一标识。
            </summary>
            <returns>客户端唯一标识，或一个 null 值。</returns>
        </member>
        <member name="M:System.Web.IIdentityStore.Remove">
            <summary>
            移除客户端的唯一标识。
            </summary>
        </member>
        <member name="T:System.Web.IHttpAccessor">
            <summary>
            定义一个 HTPP 的存取器。
            </summary>
        </member>
        <member name="P:System.Web.IHttpAccessor.Item(System.String)">
            <summary>
            获取或设置指定名称的值。
            </summary>
            <param name="name">名称。</param>
            <returns>值。</returns>
        </member>
        <member name="M:System.Web.IHttpAccessor.Set(System.String,System.Object)">
            <summary>
            设置指定名称的值。
            </summary>
            <param name="name">名称。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:System.Web.IHttpAccessor.Get(System.String)">
            <summary>
            获取指定名称的值。
            </summary>
            <param name="name">名称。</param>
            <returns>值。</returns>
        </member>
        <member name="M:System.Web.IHttpAccessor.Remove(System.String)">
            <summary>
            移除指定名称的值。
            </summary>
            <param name="name">名称。</param>
        </member>
        <member name="M:System.Web.IHttpAccessor.Clear">
            <summary>
            清空存取器的所有项。
            </summary>
        </member>
        <member name="T:System.Web.IItemsAccessor">
            <summary>
            表示一个基于 <see cref="P:System.Web.HttpContext.Items"/> 的存取器。
            </summary>
        </member>
        <member name="T:System.Web.ISessionAccessor">
            <summary>
            表示一个基于 <see cref="P:System.Web.HttpContext.Session"/> 的存取器。
            </summary>
        </member>
        <member name="T:System.Web.ICookieAccessor">
            <summary>
            表示一个基于 Cookie 的存取器。
            </summary>
        </member>
        <member name="M:System.Web.ICookieAccessor.Set(System.String,System.String,System.String,System.Boolean)">
            <summary>
            新建或更新客户端的 Cookie。
            </summary>
            <param name="name">新 Cookie 的名称。</param>
            <param name="value">新 Cookie 的值。如果值为 null 值，则表示移除该项。</param>
            <param name="path">要与当前 Cookie 一起传输的虚拟路径。</param>
            <param name="httpOnly">指定 Cookie 是否可通过客户端脚本访问。</param>
        </member>
        <member name="M:System.Web.ICookieAccessor.Set(System.String,System.String,System.DateTime,System.String,System.Boolean)">
            <summary>
            新建或更新客户端的 Cookie。
            </summary>
            <param name="name">新 Cookie 的名称。</param>
            <param name="value">新 Cookie 的值。如果值为 null 值，则表示移除该项。</param>
            <param name="expires">此 Cookie 的过期日期和时间。</param>
            <param name="path">要与当前 Cookie 一起传输的虚拟路径。</param>
            <param name="httpOnly">指定 Cookie 是否可通过客户端脚本访问。</param>
        </member>
        <member name="T:System.Web.Webx">
            <summary>
            表示一个 Web Application 的增强功能。
            </summary>
        </member>
        <member name="M:System.Web.Webx.GetTemp``1(System.String)">
            <summary>
            指定一个名称，获取当前请求的临时数据。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="name">名称。</param>
            <returns>如果存在返回值，否则返回默认值。</returns>
        </member>
        <member name="M:System.Web.Webx.GetTemp``1(System.String,``0)">
            <summary>
            指定一个名称和默认值，获取当前请求的临时数据。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="name">名称。</param>
            <param name="defaultValue">自定义的默认值。</param>
            <returns>如果存在返回值，否则返回默认值。</returns>
        </member>
        <member name="M:System.Web.Webx.GetTemp``1(System.String,System.Func{``0})">
            <summary>
            指定一个名称和默认值回调方法，获取当前请求的临时数据。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="name">名称。</param>
            <param name="defaultValueCallback">自定义的默认值的回调方法。</param>
            <returns>如果存在返回值，否则执行回调方法并返回默认值。</returns>
        </member>
        <member name="M:System.Web.Webx.SetTemp``1(System.String,``0)">
            <summary>
            设置当前请求的临时数据。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="name">名称。</param>
            <param name="value">值。</param>
            <returns>设置的值。</returns>
        </member>
        <member name="M:System.Web.Webx.MapUrl(System.String)">
            <summary>
            返回一个包含内容 URL 的字符串。
            </summary>
            <param name="contentPath">内容路径。</param>
            <returns>包含内容 URL 的字符串。</returns>
        </member>
        <member name="M:System.Web.Webx.MapPath(System.String)">
            <summary>
            将虚拟路径映射到服务器上的物理路径。
            </summary>
            <param name="virtualPath">虚拟路径（绝对路径或相对路径）。</param>
            <returns>由 <paramref name="virtualPath"/> 指定的服务器物理路径。</returns>
        </member>
        <member name="M:System.Web.Webx.AppendScripts(System.String)">
            <summary>
            添加客户端脚本。
            </summary>
            <param name="scripts">脚本的内容。</param>
        </member>
        <member name="M:System.Web.Webx.ReaderScripts">
            <summary>
            呈现所有已添加的脚本，并清空脚本。
            </summary>
            <returns>脚本字符串。</returns>
        </member>
        <member name="P:System.Web.Webx.IsAjaxRequest">
            <summary>
            获取或设置一个值，确定指定的 HTTP 请求是否为 AJAX 请求。
            </summary>
        </member>
        <member name="P:System.Web.Webx.Items">
            <summary>
            获取一个基于 <see cref="P:System.Web.HttpContext.Items"/> 的存取器。
            </summary>
        </member>
        <member name="P:System.Web.Webx.Session">
            <summary>
            获取一个基于 <see cref="P:System.Web.HttpContext.Session"/> 的存取器。
            </summary>
        </member>
        <member name="P:System.Web.Webx.Cookie">
            <summary>
            获取一个基于 Cookie 的存取器。
            </summary>
        </member>
        <member name="P:System.Web.Webx.AppSettings">
            <summary>
            获取该网站的应用程序设置。
            </summary>
        </member>
        <member name="P:System.Web.Webx.Container">
            <summary>
            获取或设置用于 Webx 的服务容器。
            </summary>
        </member>
        <member name="P:System.Web.Webx.IsAuthorized">
            <summary>
            获取一个值，指示当前请求是否已通过授权。
            </summary>
        </member>
        <member name="P:System.Web.Webx.AllowAnonymous">
            <summary>
            获取或设置一个值，指示当前请求是否允许匿名访问。
            </summary>
        </member>
        <member name="P:System.Web.Webx.Identity">
            <summary>
             获取或设置客户端唯一标识，如果上下文缓存不存在，则尝试从当前请求中获取。
            </summary>
            <returns>客户端唯一标识。</returns>
        </member>
        <member name="T:System.Web.Webx.SessionIdentityStore">
            <summary>
            表示一个基于会话的客户端唯一标识的存储功能。
            </summary>
        </member>
        <member name="M:System.Web.Webx.SessionIdentityStore.#ctor(System.Web.ISessionAccessor)">
            <summary>
            初始化一个 <see cref="T:System.Web.Webx.SessionIdentityStore"/> 类的新实例。
            </summary>
            <param name="session">会话的存取器。</param>
        </member>
        <member name="M:System.Web.Webx.SessionIdentityStore.Set(System.Object)">
            <summary>
            设置客户端唯一标识。
            </summary>
            <param name="identity">客户端的唯一标识。</param>
        </member>
        <member name="M:System.Web.Webx.SessionIdentityStore.Get">
            <summary>
            获取客户端的唯一标识。
            </summary>
            <returns>客户端唯一标识，或一个 null 值。</returns>
        </member>
        <member name="M:System.Web.Webx.SessionIdentityStore.Remove">
            <summary>
            移除客户端的唯一标识。
            </summary>
        </member>
        <member name="M:System.Web.Webx.SessionIdentityStore.GetUser(System.IIocContainer)">
            <summary>
            获取执行命令模型的用户。
            </summary>
            <param name="container">服务容器。</param>
            <returns>客户端唯一标识，或一个 null 值。</returns>
        </member>
        <member name="T:System.CompareResult">
            <summary>
            表示两个对象的比较的结果。
            </summary>
        </member>
        <member name="P:System.CompareResult.Name">
            <summary>
            获取或设置对象的名称。
            </summary>
        </member>
        <member name="P:System.CompareResult.Value1">
            <summary>
            获取或设置第一个对象的值。
            </summary>
        </member>
        <member name="P:System.CompareResult.Value2">
            <summary>
            获取或设置第二个对象的值。
            </summary>
        </member>
        <member name="M:System.CompareResult.#ctor">
            <summary>
            初始化一个 <see cref="T:System.CompareResult"/> 类的新的实例。
            </summary>
        </member>
        <member name="M:System.CompareResult.ToString">
            <summary>
            返回比较结果的描述。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="T:System.GA">
            <summary>
            通用全局函数。
            </summary>
        </member>
        <member name="F:System.GA.UTF8">
            <summary>
            提供 Unicode 字节顺序标记的 UTF-8 编码。
            </summary>
        </member>
        <member name="F:System.GA.IsOldOS">
            <summary>
            获取应用程序当前的操作系统主版本是否少于 6（XP/2003 含以下的操作系统）。
            </summary>
        </member>
        <member name="F:System.GA.AppDirectory">
            <summary>
            获取包含该应用程序的目录的名称。该字符串结尾包含“\”。
            </summary>
        </member>
        <member name="F:System.GA.TempFolder">
            <summary>
            获取 Aoite 的临时目录。
            </summary>
        </member>
        <member name="E:System.GA.GlobalError">
            <summary>
            当要求抛出错误时的全局事件。
            </summary>
        </member>
        <member name="M:System.GA.OnGlobalError(System.Object,System.Exception)">
            <summary>
            当要求抛出错误时的全局事件委托。
            </summary>
            <param name="sender">事件的对象。允许为 null 值。</param>
            <param name="exception">抛出的异常。不允许为 null 值。</param>
        </member>
        <member name="M:System.GA.WriteUnhandledException(System.String,System.Object[])">
            <summary>
            写入未捕获的异常。该异常不记录到日志管理器，而是独立出一个 LogError{yyyy-MM-dd}.txt 文件。
            </summary>
            <param name="message">复合格式的错误消息。</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
        </member>
        <member name="M:System.GA.NewComb">
            <summary>
            初始化一个有顺序规则 <see cref="T:System.Guid"/> 的新实例。
            </summary>
            <returns><see cref="T:System.Guid"/> 的新实例。</returns>
        </member>
        <member name="M:System.GA.ToCommandLines(System.String)">
            <summary>
            将指定的命令行进行拆分。
            </summary>
            <param name="commandLine">命令行。</param>
            <returns>命令行。</returns>
        </member>
        <member name="P:System.GA.IsUnitTestRuntime">
            <summary>
            获取或设置一个值，指示当前是否为单元测试的运行环境。
            </summary>
        </member>
        <member name="P:System.GA.IsWebRuntime">
            <summary>
            获取一个值，指示当前线程是否为 Web 线程。
            </summary>
        </member>
        <member name="P:System.GA.IsAdministrator">
            <summary>
            获取一个值，该值指示当前应用程序是否以管理员权限的运行。
            </summary>
        </member>
        <member name="M:System.GA.RunAsAdministrator">
            <summary>
            以管理员权限重新运行当前应用程序。
            </summary>
        </member>
        <member name="M:System.GA.FullPath(System.String)">
            <summary>
            获取指定路径的完整路径。
            </summary>
            <param name="path">绝对路径或相对路径。</param>
            <returns>若 <paramref name="path"/> 是绝对路径，则返回本身，否则返回基于当前应用程序目录的绝对路径。</returns>
        </member>
        <member name="M:System.GA.FullPath(System.String[])">
            <summary>
            获取指定路径的完整路径。
            </summary>
            <param name="paths">绝对路径或相对路径数组。</param>
            <returns>基于当前应用程序目录的绝对路径。</returns>
        </member>
        <member name="M:System.GA.TraceError(System.String,System.Object[])">
            <summary>
            使用指定的对象数组和格式设置信息向 <see cref="P:System.Diagnostics.Trace.Listeners"/> 集合中的跟踪侦听器中写入错误消息。
            </summary>
            <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args"/> 数组中的对象相对应。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.GA.TraceWarning(System.String,System.Object[])">
            <summary>
            使用指定的对象数组和格式设置信息向 <see cref="P:System.Diagnostics.Trace.Listeners"/> 集合中的跟踪侦听器中写入警告信息。
            </summary>
            <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args"/> 数组中的对象相对应。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.GA.TraceInformation(System.String,System.Object[])">
            <summary>
            使用指定的对象数组和格式设置信息向 <see cref="P:System.Diagnostics.Trace.Listeners"/> 集合中的跟踪侦听器中写入信息性消息。
            </summary>
            <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args"/> 数组中的对象相对应。</param>
            <param name="args">包含零个或多个要格式化的对象的 <see cref="T:System.Object"/> 数组。</param>
        </member>
        <member name="M:System.GA.ResetContexts">
            <summary>
            释放并关闭所有线程上下文的上下文对象。非【主线程】的其他线程一单使用其下列对象，就应该的调用此方法进行释放:
            <para><see cref="P:System.Db.Context"/></para>
            <para><see cref="P:System.Log.Context"/></para>
            <para><see cref="P:Aoite.Redis.RedisManager.Context"/></para>
            </summary>
        </member>
        <member name="M:System.GA.LEquals(System.Int64@,System.Int64)">
            <summary>
            原子操作形式判断 <paramref name="localtion"/> 是否与 <paramref name="value"/> 匹配。
            </summary>
            <param name="localtion">要加载的 64 位值。</param>
            <param name="value">要判断的 64 位值。</param>
            <returns>如果匹配则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.GA.LRead(System.Int64@)">
            <summary>
            返回一个以原子操作形式加载的 64 位值。
            </summary>
            <param name="localtion">要加载的 64 位值。</param>
            <returns>加载的值。</returns>
        </member>
        <member name="M:System.GA.LWrite(System.Int64@,System.Int64)">
            <summary>
            以原子操作的形式，将 64 位值设置为指定的值并返回原始 64 位值。
            </summary>
            <param name="localtion">要设置为指定值的变量。</param>
            <param name="value">参数被设置为的值。</param>
            <returns>原始值。</returns>
        </member>
        <member name="M:System.GA.LIncrement(System.Int64@)">
            <summary>
            以原子操作的形式递增指定变量的值并存储结果。
            </summary>
            <param name="localtion">其值要递增的变量。</param>
            <returns>递增的值。</returns>
        </member>
        <member name="M:System.GA.Decrement(System.Int64@)">
            <summary>
            以原子操作的形式递减指定变量的值并存储结果。
            </summary>
            <param name="localtion">其值要递减的变量。</param>
            <returns>递减的值。</returns>
        </member>
        <member name="M:System.GA.Compare``1(``0,``0)">
            <summary>
            深度比较两个对象。
            </summary>
            <typeparam name="T">对象的数据类型。</typeparam>
            <param name="t1">第一个对象的实例。</param>
            <param name="t2">第二个对象的实例。</param>
            <returns>两个对象的比较结果。</returns>
        </member>
        <member name="M:System.GA.CompareThrown``1(``0,``0)">
            <summary>
            深度比较两个对象，如果发生不匹配则抛出异常。
            </summary>
            <typeparam name="T">对象的数据类型。</typeparam>
            <param name="t1">第一个对象的实例。</param>
            <param name="t2">第二个对象的实例。</param>
        </member>
        <member name="M:System.GA.Locking``1(``0)">
            <summary>
            采用默认的超时时间（1分钟），锁定指定种子。
            </summary>
            <typeparam name="TSeed">种子的数据类型。</typeparam>
            <param name="seed">生成锁对象实例的种子，将采用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 匹配种子。</param>
            <returns>可解锁的对象。</returns>
        </member>
        <member name="M:System.GA.Locking``1(``0,System.TimeSpan)">
            <summary>
            给定超时时间，锁定指定种子。
            </summary>
            <typeparam name="TSeed">种子的数据类型。</typeparam>
            <param name="seed">生成锁对象实例的种子，将采用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 匹配种子。</param>
            <param name="timeout">锁的超时时间。</param>
            <returns>可解锁的对象。</returns>
        </member>
        <member name="M:System.GA.TryLocking``1(``0)">
            <summary>
            采用默认的超时时间（1分钟），尝试锁定指定种子。
            </summary>
            <typeparam name="TSeed">种子的数据类型。</typeparam>
            <param name="seed">生成锁对象实例的种子，将采用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 匹配种子。</param>
            <returns>可解锁的对象。如果锁定失败，将会返回 null 值。</returns>
        </member>
        <member name="M:System.GA.TryLocking``1(``0,System.TimeSpan)">
            <summary>
            给定超时时间，尝试锁定指定种子。
            </summary>
            <typeparam name="TSeed">种子的数据类型。</typeparam>
            <param name="seed">生成锁对象实例的种子，将采用默认的 <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 匹配种子。</param>
            <param name="timeout">锁的超时时间。</param>
            <returns>可解锁的对象。如果锁定失败，将会返回 null 值。</returns>
        </member>
        <member name="M:System.GA.LoadAssemblies(System.String)">
            <summary>
            加载指定程序集列表的程序集（避免程序集的延迟加载）。
            </summary>
            <param name="assemblies">程序集列表。</param>
            <returns>已加载的程序集列表。</returns>
        </member>
        <member name="M:System.GA.CreateMockValue``1">
            <summary>
            创建一个指定常用数据类型的随机值。
            </summary>
            <typeparam name="TValue">常用的数据类型。</typeparam>
            <returns>如果返回默认值，表示不支持此类型的随机生成。</returns>
        </member>
        <member name="M:System.GA.CreateMockValue(System.Type)">
            <summary>
            创建一个指定常用数据类型的随机值。
            </summary>
            <param name="type">常用的数据类型。</param>
            <returns>如果返回 null 值，表示不支持此类型的随机生成。</returns>
        </member>
        <member name="M:System.GA.CreateMockModel``1">
            <summary>
            创建一个模拟对象。
            </summary>
            <typeparam name="TModel">对象的数据类型。</typeparam>
            <returns>要一个模拟的对象。</returns>
        </member>
        <member name="T:System.GA.IO">
            <summary>
            提供用于 System.IO 命名空间下的实用工具方法。
            </summary>
        </member>
        <member name="M:System.GA.IO.CreateDirectory(System.String)">
            <summary>
            尝试创建本地不存在的目录。如果目录已经存在，将被不会做任何事情。
            </summary>
            <param name="path">目录路径。</param>
            <returns>创建后的地址。</returns>
        </member>
        <member name="M:System.GA.IO.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            复制指定目录的所有数据到新的目录。
            </summary>
            <param name="sourceDirName">源目录路径。</param>
            <param name="destDirName">目标路径。</param>
            <param name="deleteSource">指示删除源目录。</param>
        </member>
        <member name="M:System.GA.IO.CopyDirectory(System.String,System.String)">
            <summary>
            复制指定目录的所有数据到新的目录。
            </summary>
            <param name="sourceDirName">源目录路径。</param>
            <param name="destDirName">目标路径。</param>
        </member>
        <member name="M:System.GA.IO.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            删除本地已存在的目录。
            </summary>
            <param name="path">目录路径。</param>
            <param name="recursive">若要移除 <paramref name="path"/> 中的目录、子目录和文件，则为 true；否则为 false。</param>
        </member>
        <member name="M:System.GA.IO.ShareReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            指定编码格式，以共享方式读取文件的所有行。
            </summary>
            <param name="filename">文件的路径。</param>
            <param name="encoding">编码格式。</param>
            <returns>文件的所有行。</returns>
        </member>
        <member name="M:System.GA.IO.ShareReadAllText(System.String,System.Text.Encoding)">
            <summary>
            指定编码格式，以共享方式读取文件。
            </summary>
            <param name="filename">文件的路径。</param>
            <param name="encoding">编码格式。</param>
            <returns>文件的所有文本内容。</returns>
        </member>
        <member name="M:System.GA.IO.IsValidName(System.String)">
            <summary>
             检查指定的文件名是否包含不允许在文件名中使用的字符。
            </summary>
            <param name="filename">文件名。</param>
            <returns>如果这是一个合法的路径，将会返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.GA.Delay(System.TimeSpan)">
            <summary>
            创建将在时间延迟后完成的任务。
            </summary>
            <param name="delay">完成返回任务的等待时间跨度。</param>
            <returns>表示时间延迟的任务。</returns>
        </member>
        <member name="M:System.GA.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            创建将在时间延迟后完成的任务。
            </summary>
            <param name="delay">完成返回任务的等待时间跨度。</param>
            <param name="cancellationToken">将在完成“已返回”任务之前选中的取消标记。</param>
            <returns>表示时间延迟的任务。</returns>
        </member>
        <member name="M:System.GA.Delay(System.Int32)">
            <summary>
            创建将在时间延迟后完成的任务。
            </summary>
            <param name="delay">在完成返回任务之前要等待的毫秒数。</param>
            <returns>表示时间延迟的任务。</returns>
        </member>
        <member name="M:System.GA.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            创建将在时间延迟后完成的任务。
            </summary>
            <param name="delay">在完成返回任务之前要等待的毫秒数。</param>
            <param name="cancellationToken">将在完成“已返回”任务之前选中的取消标记。</param>
            <returns>表示时间延迟的任务。</returns>
        </member>
        <member name="M:System.GA.FromResult``1(``0)">
            <summary>
            创建指定结果的、成功完成的 <see cref="T:System.Threading.Tasks.Task`1"/>。
            </summary>
            <typeparam name="T">任务返回的结果的类型。</typeparam>
            <param name="value">存储入已完成任务的结果。</param>
            <returns>已成功完成的任务。</returns>
        </member>
        <member name="T:System.GA.Net">
            <summary>
            提供用于 System.Net 的实用工具方法。
            </summary>
        </member>
        <member name="M:System.GA.Net.GetUsedIPEndPoint">
            <summary>
             获取本机已被使用的网络端点。
            </summary>
            <returns>本机所有网络端点。</returns>
        </member>
        <member name="M:System.GA.Net.IsUsedIPEndPoint(System.Int32)">
            <summary>
            判断指定的网络端点（只判断端口）是否被使用。
            </summary>
            <returns>如果端口已被占用，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.GA.Net.IsUsedIPEndPoint(System.String,System.Int32)">
            <summary>
            判断指定的网络端点（判断IP和端口）是否被使用
            </summary>
            <param name="host">主机地址。</param>
            <param name="port">主机端口。</param>
            <returns>如果地址和端口已被占用，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.GA.Net.CreateEndPoint(System.String,System.Int32)">
            <summary>
            将指定主机地址转换为 <see cref="T:System.Net.IPAddress"/> 类的新实例，并创建一个 <see cref="T:System.Net.IPEndPoint"/> 类的新实例。
            </summary>
            <param name="host">主机地址。</param>
            <param name="port">主机端口。</param>
            <returns>新的 <see cref="T:System.Net.IPEndPoint"/> 实例。</returns>
        </member>
        <member name="T:System.IJsonProvider">
            <summary>
            定义一个 JSON 序列化的提供程序。
            </summary>
        </member>
        <member name="M:System.IJsonProvider.Deserialize(System.String,System.Type)">
            <summary>
            将 JSON 格式字符串转换为指定类型的对象。
            </summary>
            <param name="input">要反序列化的 JSON 字符串。</param>
            <param name="targetType">所生成对象的类型。</param>
            <returns>反序列化的对象。</returns>
        </member>
        <member name="M:System.IJsonProvider.Serialize(System.Object)">
            <summary>
            将对象转换为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化的 JSON 字符串。</returns>
        </member>
        <member name="T:System.IContainerProvider">
            <summary>
            定义一个包含服务容器的提供程序。
            </summary>
        </member>
        <member name="P:System.IContainerProvider.Container">
            <summary>
            获取或设置服务容器。
            </summary>
        </member>
        <member name="T:System.IMapFilter">
            <summary>
            定义依赖注入与控制反转的映射筛选器。
            </summary>
        </member>
        <member name="P:System.IMapFilter.Rules">
            <summary>
            获取筛选器的命名空间规则列表。
            </summary>
        </member>
        <member name="P:System.IMapFilter.ActualTypeFullNameFormat">
            <summary>
            获取或设置筛选器的实际服务类型的完全限定名的格式项，例如“{0}.Default{1}”，索引 0 表示 - 预期定义接口 - 的命名空间，索引 1 表示 - 预期定义接口 - 的名称（已去 I）。
            </summary>
        </member>
        <member name="M:System.IMapFilter.NamespaceIsMatch(System.String)">
            <summary>
            判断指定命名空间是否匹配规则。
            </summary>
            <param name="namespace">一个命名空间。</param>
            <returns>如果匹配返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.IMapFilter.IsSingletonMode(System.Type,System.Type)">
            <summary>
            判断指定 <paramref name="expectType"/> 和 <paramref name="actualType"/> 是否开启单例模式。
            </summary>
            <param name="expectType">预期的服务类型。</param>
            <param name="actualType">实际的服务类型。</param>
            <returns>如果启用单例模式则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.IMapFilter.IsExpectType(System.Type)">
            <summary>
            判断指定 <paramref name="type"/> 是否是一个预期的服务类型。
            </summary>
            <param name="type">类型。</param>
            <returns>如果 <paramref name="type"/> 是一个预期的服务类型返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.IMapFilter.FindActualType(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.Type}},System.Type)">
            <summary>
            根据指定的 <paramref name="expectType"/> ，查找在 <paramref name="allTypes"/> 集合中对应的实际服务类型。
            </summary>
            <param name="allTypes">当前应用程序所有已加载的类型。</param>
            <param name="expectType">预期的服务类型。</param>
            <returns>如果找到返回一个 <see cref="T:System.Type"/> 的实例，否则返回 null 值。</returns>
        </member>
        <member name="T:System.MapFilter">
            <summary>
            默认实现依赖注入与控制反转的映射筛选器。
            </summary>
        </member>
        <member name="F:System.MapFilter.DefaultFormats">
            <summary>
            获取或设置筛选器的实际服务类型的完全限定名的格式项，例如“{0}.Default{1}”，索引 0 表示 - 预期定义接口 - 的命名空间，索引 1 表示 - 预期定义接口 - 的名称（已去 I）。
            </summary>
        </member>
        <member name="P:System.MapFilter.ActualTypeFullNameFormat">
            <summary>
            获取或设置筛选器的实际服务类型的完全限定名的格式项，例如“{0}.Default{1}”，索引 0 表示 - 预期定义接口 - 的命名空间，索引 1 表示 - 预期定义接口 - 的名称（已去 I）。
            </summary>
        </member>
        <member name="P:System.MapFilter.Rules">
            <summary>
            获取筛选器的命名空间规则列表。
            </summary>
        </member>
        <member name="M:System.MapFilter.#ctor(System.String)">
            <summary>
            指定筛选器的命名空间表达式，初始化一个 <see cref="T:System.MapFilter"/> 类的新实例。
            </summary>
            <param name="namespaceExpression">筛选器的命名空间表达式。可以是一个完整的命名空间，也可以是“*”起始，或者以“*”结尾。符号“*”只能出现一次。通过“|”可以同时包含多个命名空间。</param>
        </member>
        <member name="M:System.MapFilter.NamespaceIsMatch(System.String)">
            <summary>
            判断指定命名空间是否匹配规则。
            </summary>
            <param name="namespace">一个命名空间。</param>
            <returns>如果匹配返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.MapFilter.IsSingletonMode(System.Type,System.Type)">
            <summary>
            判断指定 <paramref name="expectType"/> 和 <paramref name="actualType"/> 是否开启单例模式。
            </summary>
            <param name="expectType">预期的服务类型。</param>
            <param name="actualType">实际的服务类型。</param>
            <returns>如果启用单例模式则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.MapFilter.IsExpectType(System.Type)">
            <summary>
            判断指定 <paramref name="type"/> 是否是一个预期的服务类型。
            </summary>
            <param name="type">类型。</param>
            <returns>如果 <paramref name="type"/> 是一个预期的服务类型返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.MapFilter.FindActualType(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.Type}},System.Type)">
            <summary>
            根据指定的 <paramref name="expectType"/> ，查找在 <paramref name="allTypes"/> 集合中对应的实际服务类型。
            </summary>
            <param name="allTypes">当前应用程序所有已加载的类型。</param>
            <param name="expectType">预期的服务类型。</param>
            <returns>如果找到返回一个 <see cref="T:System.Type"/> 的实例，否则返回 null 值。</returns>
        </member>
        <member name="T:System.MapResolveEventArgs">
            <summary>
            表示映射解析的事件参数。
            </summary>
        </member>
        <member name="P:System.MapResolveEventArgs.ExpectType">
            <summary>
            获取预期的服务类型。
            </summary>
        </member>
        <member name="P:System.MapResolveEventArgs.SingletonMode">
            <summary>
            获取或设置一个值，表示映射是否采用单例模式。
            </summary>
        </member>
        <member name="P:System.MapResolveEventArgs.Litetime">
            <summary>
            获取或设置服务的生命周期。
            </summary>
        </member>
        <member name="P:System.MapResolveEventArgs.Callback">
            <summary>
            实例的获取方式回调方法。
            </summary>
        </member>
        <member name="T:System.InstanceCreatorCallback">
            <summary>
            表示实例创建的委托。
            </summary>
            <param name="lastMappingValues">后期绑定的参数列表。</param>
            <returns>实例。</returns>
        </member>
        <member name="T:System.LastMappingValuesHandler">
            <summary>
            通过 <see cref="T:System.Object`1"/> 获取实例时，动态设置后期映射的参数值数组。
            </summary>
            <param name="type">当前依赖注入与控制反转的数据类型。</param>
            <returns>后期映射的参数值数组。</returns>
        </member>
        <member name="T:System.MapResolveEventHandler">
            <summary>
            表示映射解析的事件委托。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:System.NamesapceRule">
            <summary>
            表示一个命名空间的规则。
            </summary>
        </member>
        <member name="P:System.NamesapceRule.Expression">
            <summary>
            获取一个命名空间的规则表达式。
            </summary>
        </member>
        <member name="P:System.NamesapceRule.Mode">
            <summary>
            获取一个命名空间的规则模式。
            </summary>
        </member>
        <member name="T:System.NamesapceRuleMode">
            <summary>
            表示一个命名空间的规则模式。
            </summary>
        </member>
        <member name="F:System.NamesapceRuleMode.Equals">
            <summary>
            确定在使用指定的比较选项进行比较时此命名空间是否与指定的表达式完全匹配。
            </summary>
        </member>
        <member name="F:System.NamesapceRuleMode.StartsWith">
            <summary>
            确定在使用指定的比较选项进行比较时此命名空间的开头是否与指定的表达式匹配。
            </summary>
        </member>
        <member name="F:System.NamesapceRuleMode.EndsWith">
            <summary>
            确定在使用指定的比较选项进行比较时此命名空间的结尾是否与指定的表达式匹配。
            </summary>
        </member>
        <member name="T:System.ObjectFactory">
            <summary>
            一个依赖注入与控制反转的工厂对象。
            </summary>
        </member>
        <member name="E:System.ObjectFactory.MapResolve">
            <summary>
            表示解析映射类型时发生。
            </summary>
        </member>
        <member name="F:System.ObjectFactory.Global">
            <summary>
            获取默认的全局服务容器。
            </summary>
        </member>
        <member name="M:System.ObjectFactory.CreateContainer">
            <summary>
            创建一个新的服务容器。
            </summary>
            <returns>新的服务容器。</returns>
        </member>
        <member name="P:System.ObjectFactory.Context">
            <summary>
            获取基于当前上下文的服务容器。如果当前环境是 Web 环境将返回 <see cref="P:System.Web.Webx.Container"/>，否则返回 <see cref="F:System.ObjectFactory.Global"/>。
            </summary>
        </member>
        <member name="P:System.ObjectFactory.AllTypes">
            <summary>
            获取当前应用程序域的所有有效类型。
            </summary>
        </member>
        <member name="M:System.ObjectFactory.GetType(System.String)">
            <summary>
            获取指定 <see cref="T:System.Type"/> 的完全限定名，获取匹配的  <see cref="T:System.Type"/>。
            </summary>
            <param name="fullName">完全限定名。</param>
            <returns>匹配的  <see cref="T:System.Type"/>，或一个 null 值。</returns>
        </member>
        <member name="T:System.Object`1">
            <summary>
            一个依赖注入与控制反转的实例对象获取器，支持更高级的扩展。
            </summary>
            <typeparam name="T">类型。</typeparam>
        </member>
        <member name="E:System.Object`1.LastMapping">
            <summary>
            当获取 <typeparamref name="T"/> 实例，并且调用方没有指定后期映射的参数值数组时发生。
            </summary>
        </member>
        <member name="P:System.Object`1.Instance">
            <summary>
            获取或创建指定数据类型的实例。如果 <typeparamref name="T"/> 是一个接口、基类，将返回接口映射的实例；如果 <typeparamref name="T"/> 是一个普通的类型，将会自动创建新的映射，并返回实例。
            </summary>
        </member>
        <member name="M:System.Object`1.Create(System.Object[])">
            <summary>
            指定后期映射的参数值列表，获取或创建指定数据类型的实例。
            </summary>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns>如果 <typeparamref name="T"/> 是一个接口、基类，将返回接口映射的实例；如果 <typeparamref name="T"/> 是一个普通的类型，将会自动创建新的映射，并返回实例。</returns>
        </member>
        <member name="M:System.Object`1.Once(System.Action{`0},System.Object[])">
            <summary>
            执行一次性对象操作。
            </summary>
            <param name="callback">回调方法。</param>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
        </member>
        <member name="M:System.Object`1.Once``1(System.Func{`0,``0},System.Object[])">
            <summary>
            执行一次性对象操作，并返回指定的值。
            </summary>
            <typeparam name="V">值的数据类型</typeparam>
            <param name="callback">回调方法。</param>    
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns>指定的值。</returns>
        </member>
        <member name="T:System.PropertyMapper">
            <summary>
            表示一个属性的映射器。
            </summary>
        </member>
        <member name="P:System.PropertyMapper.Name">
            <summary>
            获取或设置映射器的名称。
            </summary>
        </member>
        <member name="P:System.PropertyMapper.IsKey">
            <summary>
            获取一个值，指示是否为唯一标识。
            </summary>
        </member>
        <member name="P:System.PropertyMapper.TypeMapper">
            <summary>
            获取属性所属的类型映射器。
            </summary>
        </member>
        <member name="P:System.PropertyMapper.IsIgnore">
            <summary>
            获取或设置一个值，该值指示当前成员是否已标识忽略标识。
            </summary>
        </member>
        <member name="P:System.PropertyMapper.TypeDefaultValue">
            <summary>
            获取类型的默认值。
            </summary>
        </member>
        <member name="P:System.PropertyMapper.Validators">
            <summary>
            获取属性验证器数组。
            </summary>
        </member>
        <member name="M:System.PropertyMapper.#ctor(System.TypeMapper,System.Reflection.PropertyInfo)">
            <summary>
            指定属性元数据，初始化一个 <see cref="T:System.PropertyMapper"/> 类的新实例。
            </summary>
            <param name="typeMapper">类型的映射器。</param>
            <param name="property">成员的属性元数据。</param>
        </member>
        <member name="M:System.PropertyMapper.Validate(System.Object,System.Object)">
            <summary>
            检验指定实例的属性值。
            </summary>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <param name="value">属性的值。</param>
            <returns>返回属性值。</returns>
        </member>
        <member name="T:System.IPropertyValidator">
            <summary>
            定义一个属性的验证器。
            </summary>
        </member>
        <member name="P:System.IPropertyValidator.Order">
            <summary>
            获取或设置一个值，指示属性检查的排序。排序越小排在越前面。
            </summary>
        </member>
        <member name="M:System.IPropertyValidator.Validate(System.TypeMapper,System.PropertyMapper,System.Object,System.Object)">
            <summary>
            验证指定属性的值。
            </summary>
            <param name="typeMapper">类型的映射器。</param>
            <param name="propertyMapper">属性的映射器。</param>
            <param name="instance">一个实例，null 值表示静态属性。</param>
            <param name="value">属性的值。</param>
            <returns>返回新的属性值。</returns>
        </member>
        <member name="T:System.TypeMapper">
            <summary>
            表示一个类型的映射器。
            </summary>
        </member>
        <member name="F:System.TypeMapper._Properties">
            <summary>
            实体的属性映射集合。
            </summary>
        </member>
        <member name="P:System.TypeMapper.Name">
            <summary>
            获取或设置映射器的名称。
            </summary>
        </member>
        <member name="P:System.TypeMapper.Type">
            <summary>
            获取实体的类型。
            </summary>
        </member>
        <member name="P:System.TypeMapper.Properties">
            <summary>
            获取实体的属性映射集合。
            </summary>
        </member>
        <member name="P:System.TypeMapper.KeyProperties">
            <summary>
            获取实体的主键属性映射集合。
            </summary>
        </member>
        <member name="P:System.TypeMapper.Item(System.String)">
            <summary>
            获取指定属性名称的属性映射。
            </summary>
            <param name="propertyName">属性名称。</param>
        </member>
        <member name="P:System.TypeMapper.Count">
            <summary>
            获取实体的属性映射集合的元素数。
            </summary>
        </member>
        <member name="M:System.TypeMapper.Contains(System.String)">
            <summary>
            指定属性名，判断指定的属性是否存在。
            </summary>
            <param name="propertyName">属性名称。</param>
            <returns>存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.TypeMapper.Create(System.Type)">
            <summary>
            指定实例的数据类型，创建或从缓存读取一个实体的映射器。
            </summary>
            <param name="type">实例的数据类型。</param>
            <returns>实体映射器。</returns>
        </member>
        <member name="T:System.TypeMapper.Instance`1">
            <summary>
            表示类型映射器泛型单例模式。
            </summary>
            <typeparam name="TEntity">实体的数据类型。</typeparam>
        </member>
        <member name="F:System.TypeMapper.Instance`1.Mapper">
            <summary>
            获取类型的映射器。
            </summary>
        </member>
        <member name="T:System.IObjectRelease">
            <summary>
            定义一个可重复使用的对象。
            </summary>
        </member>
        <member name="M:System.IObjectRelease.Release">
            <summary>
            对象在释放时发生。
            </summary>
        </member>
        <member name="T:System.ObjectPool`1">
            <summary>
            表示安全线程的可复用对象池。
            </summary>
            <typeparam name="T">对象的数据类型。</typeparam>
        </member>
        <member name="P:System.ObjectPool`1.MaxObjectCount">
            <summary>
            获取或设置一个值，指示最大的对象数。默认为 0，表示不做限制。
            </summary>
        </member>
        <member name="P:System.ObjectPool`1.InnerPool">
            <summary>
            获取当前内部池。
            </summary>
        </member>
        <member name="P:System.ObjectPool`1.Count">
            <summary>
            获取对象池的元素数。
            </summary>
        </member>
        <member name="M:System.ObjectPool`1.#ctor">
            <summary>
            初始化一个 <see cref="T:System.ObjectPool`1"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            提供在需要时被调用以产生延迟初始化值的委托，初始化一个 <see cref="T:System.ObjectPool`1"/> 类的新实例。
            </summary>
            <param name="objectFactory">在需要时被调用以产生延迟初始化值的委托。</param>
        </member>
        <member name="M:System.ObjectPool`1.OnCreateObject">
            <summary>
            创建对象时发生。 
            </summary>
            <returns>新的对象。</returns>
        </member>
        <member name="M:System.ObjectPool`1.Acquire">
            <summary>
            获取一个对象池的对象。
            </summary>
            <returns>已释放或新的对象。</returns>
        </member>
        <member name="M:System.ObjectPool`1.Release(`0)">
            <summary>
            释放一个对象，并将其放入对象池中。
            </summary>
            <param name="obj">对象池。</param>
        </member>
        <member name="M:System.ObjectPool`1.AcquireRelease(System.Action{`0})">
            <summary>
            获取一个对象池的对象，并执行 <paramref name="callback"/>，并将对象放回池中。
            </summary>
            <param name="callback">回调方法。</param>
        </member>
        <member name="M:System.ObjectPool`1.AcquireRelease``1(System.Func{`0,``0})">
            <summary>
            获取一个对象池的对象，并执行 <paramref name="callback"/>，并将对象放回池中。
            </summary>
            <typeparam name="TResult">返回的数据类型。</typeparam>
            <param name="callback">回调方法。</param>
            <returns>回调方法的返回值。</returns>
        </member>
        <member name="M:System.ObjectPool`1.DisposeItem(`0)">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
            <param name="item">当前对象。</param>
        </member>
        <member name="M:System.ObjectPool`1.DisposeManaged">
            <summary>
            执行与释放或重置托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:System.FastRandom">
            <summary>
            表示一个快速的随机数实现。
            </summary>
        </member>
        <member name="F:System.FastRandom.Instance">
            <summary>
            获取随机数的唯一实例。
            </summary>
        </member>
        <member name="M:System.FastRandom.#ctor">
            <summary>
            使用与时间相关的默认种子值，初始化一个 <see cref="T:System.FastRandom"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.FastRandom.#ctor(System.Int32)">
            <summary>
            使用指定的种子值初始化一个 <see cref="T:System.FastRandom"/> 类的新实例。
            </summary>
            <param name="seed">用来计算伪随机数序列起始值的数字。如果指定的是负数，则使用其绝对值。</param>
        </member>
        <member name="M:System.FastRandom.Reinitialise(System.Int32)">
            <summary>
            重新加载种子值。
            </summary>
            <param name="seed">用来计算伪随机数序列起始值的数字。如果指定的是负数，则使用其绝对值。</param>
        </member>
        <member name="M:System.FastRandom.Next">
            <summary>
            返回非负随机数。 
            </summary>
            <returns>大于等于零且小于 <see cref="F:System.Int32.MaxValue"/> 的 32 位带符号整数。</returns>
        </member>
        <member name="M:System.FastRandom.Next(System.Int32)">
            <summary>
            返回一个小于所指定最大值的非负随机数。
            </summary>
            <param name="maxValue">要生成的随机数的上限（随机数不能取该上限值）。<paramref name="maxValue"/> 必须大于或等于零。</param>
            <returns>大于等于零且小于 <paramref name="maxValue"/> 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 <paramref name="maxValue"/>。不过，如果 <paramref name="maxValue"/> 等于零，则返回 <paramref name="maxValue"/>。</returns>
        </member>
        <member name="M:System.FastRandom.Next(System.Int32,System.Int32)">
            <summary>
            返回一个指定范围内的随机数。
            </summary>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。<paramref name="maxValue"/> 必须大于或等于 <paramref name="minValue"/>。</param>
            <returns>大于等于 <paramref name="minValue"/> 且小于 <paramref name="maxValue"/> 的 32 位带符号整数，即：返回的值范围包括 <paramref name="minValue"/> 但不包括 <paramref name="maxValue"/>。如果 <paramref name="minValue"/> 等于 <paramref name="maxValue"/>，则返回 <paramref name="minValue"/>。</returns>
        </member>
        <member name="M:System.FastRandom.NextString(System.Int32,System.CharacterType)">
            <summary>
            返回一个固定长度随机字符串。
            </summary>
            <param name="length">随机字符串的长度。</param>
            <param name="type">随机字符串的类型。</param>
            <returns>固定长度的随机字符串。</returns>
        </member>
        <member name="M:System.FastRandom.NextString(System.Int32,System.Int32,System.CharacterType)">
            <summary>
            返回一个指定范围内长度的随机字符串。
            </summary>
            <param name="minLength">返回的随机字符串长度的下界（可取该下界值）。</param>
            <param name="maxLength">返回的随机字符串长度的上界（不能取该上界值）。<paramref name="maxLength"/> 必须大于或等于 <paramref name="minLength"/>。</param>
            <param name="type">随机字符串的类型。</param>
            <returns>字符串长度大于等于 <paramref name="minLength"/> 且小于 <paramref name="maxLength"/> 的字符串。</returns>
        </member>
        <member name="M:System.FastRandom.NextDouble">
            <summary>
            返回一个介于 0.0 和 1.0 之间的随机数。
            </summary>
            <returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
        </member>
        <member name="M:System.FastRandom.NextBytes(System.Byte[])">
            <summary>
            用随机数填充指定字节数组的元素。
            </summary>
            <param name="buffer">包含随机数的字节数组。</param>
        </member>
        <member name="M:System.FastRandom.NextBytesUnsafe(System.Byte[])">
            <summary>
            A version of NextBytes that uses a pointer to set 4 bytes of the byte buffer in one operation
            thus providing a nice speedup. The loop is also partially unrolled to allow out-of-order-execution,
            this results in about a x2 speedup on an AMD Athlon. Thus performance may vary wildly on different CPUs
            depending on the number of execution units available.
            
            Another significant speedup is obtained by setting the 4 bytes by indexing pDWord (e.g. pDWord[i++]=w)
            instead of adjusting it dereferencing it (e.g. *pDWord++=w).
            
            Note that this routine requires the unsafe compilation flag to be specified and so is commented out by default.
            </summary>
            <param name="buffer">包含随机数的字节数组。</param>
        </member>
        <member name="M:System.FastRandom.NextUInt">
            <summary>
            返回非负的 <see cref="F:System.UInt32.MaxValue"/> 随机数。 
            </summary>
            <returns>大于等于零且小于 <see cref="F:System.UInt32.MaxValue"/> 的 32 位无符号整数。</returns>
        </member>
        <member name="M:System.FastRandom.NextInt">
            <summary>
            返回非负的 <see cref="F:System.Int32.MaxValue"/> 随机数。 
            </summary>        
            <returns>大于等于零且小于 <see cref="F:System.Int32.MaxValue"/> 的 32 位有符号整数。</returns>  
        </member>
        <member name="M:System.FastRandom.NextBool">
            <summary>
            返回一个随机的布尔值。
            </summary>
            <returns><see cref="T:System.Boolean"/> 的随机值。</returns>
        </member>
        <member name="T:System.CharacterType">
            <summary>
            表示一个字符串的类型。
            </summary>
        </member>
        <member name="F:System.CharacterType.Default">
            <summary>
            默认类型。表示 A-Z 和 0-9。
            </summary>
        </member>
        <member name="F:System.CharacterType.UpperCase">
            <summary>
            大写字符。表示 A-Z。
            </summary>
        </member>
        <member name="F:System.CharacterType.LowerCase">
            <summary>
            小写字符。表示 a-z。
            </summary>
        </member>
        <member name="F:System.CharacterType.Numeric">
            <summary>
            数字字符。表示 0-9。
            </summary>
        </member>
        <member name="F:System.CharacterType.Special">
            <summary>
            特殊字符。表示“,.;:?!/@#$%^&amp;()=+*-_{}[]&lt;&gt;>|~”之一。
            </summary>
        </member>
        <member name="T:System.IResult">
            <summary>
            定义一个结果。
            </summary>
        </member>
        <member name="P:System.IResult.Message">
            <summary>
            获取或设置执行结果描述错误的信息。
            </summary>
        </member>
        <member name="P:System.IResult.Exception">
            <summary>
            获取或设置执行时发生的错误。
            </summary>
        </member>
        <member name="P:System.IResult.IsFailed">
            <summary>
            获取一个值，表示执行结果是否为失败。
            </summary>
        </member>
        <member name="P:System.IResult.IsSucceed">
            <summary>
            获取一个值，表示执行结果是否为成功。
            </summary>
        </member>
        <member name="P:System.IResult.Status">
            <summary>
            获取执行结果的状态码。
            </summary>
        </member>
        <member name="T:System.IResult`1">
            <summary>
            定义包含一个返回值的结果。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
        </member>
        <member name="P:System.IResult`1.Value">
            <summary>
            获取或设置结果的返回值。
            </summary>
        </member>
        <member name="T:System.IValueResult">
            <summary>
            定义一个可能具有返回值的结果。
            </summary>
        </member>
        <member name="M:System.IValueResult.GetValue">
            <summary>
            获取结果的值。如果当前结果没有值，将返回 null 值。
            </summary>
            <returns>结果的值或 null 值。</returns>
        </member>
        <member name="M:System.IValueResult.SetValue(System.Object)">
            <summary>
            设置结果的值，如果结果没有值，则不执行任何操作。如果值的类型不符合将会抛出异常。
            </summary>
            <param name="value">设置的值。</param>
        </member>
        <member name="T:System.Result">
            <summary>
            表示一个结果。
            </summary>
        </member>
        <member name="F:System.Result.Successfully">
            <summary>
            表示成功、且无法修改的结果。
            </summary>
        </member>
        <member name="P:System.Result.Message">
            <summary>
            获取或设置执行结果描述错误的信息。
            </summary>
        </member>
        <member name="P:System.Result.Exception">
            <summary>
            获取或设置执行时发生的错误。结果状态 <see cref="F:System.ResultStatus.Succeed"/> 时，该值为 null 值。
            </summary>
        </member>
        <member name="P:System.Result.IsFailed">
            <summary>
            获取一个值，表示执行结果是否为失败。
            </summary>
        </member>
        <member name="P:System.Result.IsSucceed">
            <summary>
            获取一个值，表示执行结果是否为成功。
            </summary>
        </member>
        <member name="P:System.Result.Status">
            <summary>
            获取执行的状态码。
            </summary>
        </member>
        <member name="M:System.Result.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Result"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.Result.#ctor(System.Exception,System.Int32)">
            <summary>
            指定引发的异常和状态码，初始化一个 <see cref="T:System.Result"/> 类的新实例。
            </summary>
            <param name="exception">引发异常的 <see cref="P:System.Result.Exception"/>。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.Result.#ctor(System.String,System.Int32)">
            <summary>
            指定描述错误的信息和状态码，初始化一个 <see cref="T:System.Result"/> 类的新实例。
            </summary>
            <param name="message">描述错误的信息。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.Result.ToString">
            <summary>
            返回以字符串形式描述的结果。
            </summary>
            <returns>如果这是一个成功的操作结果，将返回“执行成功！”，否则返回异常的描述信息。</returns>
        </member>
        <member name="M:System.Result.op_Implicit(System.Exception)~System.Result">
            <summary>
            <see cref="T:System.Result"/> 和 <see cref="P:System.Result.Exception"/> 的隐式转换。
            </summary>
            <param name="exception">引发异常的 <see cref="P:System.Result.Exception"/>。</param>
            <returns>表示一个异常的结果。</returns>
        </member>
        <member name="M:System.Result.op_Implicit(System.String)~System.Result">
            <summary>
            <see cref="T:System.Result"/> 和 <see cref="T:System.String"/> 的隐式转换。
            </summary>
            <param name="message">描述异常结果的信息。</param>
            <returns>表示一个异常的结果。</returns>
        </member>
        <member name="M:System.Result.op_Implicit(System.Result)~System.String">
            <summary>
            <see cref="T:System.String"/> 和 <see cref="T:System.Result"/> 的隐式转换。
            </summary>
            <param name="result">返回结果。</param>
            <returns>字符串形式的结果。如果该结果为 null 值，则返回 null 值。</returns>
        </member>
        <member name="M:System.Result.op_Implicit(System.Result)~System.Boolean">
            <summary>
            <see cref="T:System.Boolean"/> 和 <see cref="T:System.Result"/> 的隐式转换。
            </summary>
            <param name="result">返回结果。</param>
            <returns>如果结果非空并且状态为成功返回 true，否则返回 false。</returns>
        </member>
        <member name="M:System.Result.Success``1(``0)">
            <summary>
            指定结果的返回值，创建一个 <see cref="T:System.Result`1"/> 类的新实例。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="value">结果的返回值。</param>
            <returns>一个 <see cref="T:System.Result`1"/> 类的新实例。</returns>
        </member>
        <member name="M:System.Result.Faild(System.String,System.Int32)">
            <summary>
            指定描述错误的信息和状态码，创建一个 <see cref="T:System.Result"/> 类的新实例。
            </summary>
            <param name="message">描述错误的信息。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">结果的状态码。</param>
            <returns>一个 <see cref="T:System.Result"/> 类的新实例。</returns>
        </member>
        <member name="M:System.Result.Faild``1(System.String,System.Int32)">
            <summary>
            指定描述错误的信息和状态码，创建一个 <see cref="T:System.Result`1"/> 类的新实例。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="message">描述错误的信息。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">结果的状态码。</param>
            <returns>一个 <see cref="T:System.Result`1"/> 类的新实例。</returns>
        </member>
        <member name="M:System.Result.Faild(System.Exception,System.Int32)">
            <summary>
            指定引发的异常和状态码，初始化一个 <see cref="T:System.Result"/> 类的新实例。
            </summary>
            <param name="exception">引发异常的 <see cref="P:System.Result.Exception"/>。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">创建的状态码。</param>
            <returns>一个 <see cref="T:System.Result"/> 类的新实例。</returns>
        </member>
        <member name="M:System.Result.Faild``1(System.Exception,System.Int32)">
            <summary>
            指定引发的异常和状态码，初始化一个 <see cref="T:System.Result"/> 类的新实例。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <param name="exception">引发异常的 <see cref="P:System.Result.Exception"/>。如果为 null 值，将不会更改返回结果的状态。</param>
            <param name="status">创建的状态码。</param>
            <returns>一个 <see cref="T:System.Result`1"/> 类的新实例。</returns>
        </member>
        <member name="T:System.ResultException">
            <summary>
            表示一个 <see cref="T:System.Result"/> 的异常。
            </summary>
        </member>
        <member name="P:System.ResultException.Status">
            <summary>
            获取或设置执行的状态码。
            </summary>
        </member>
        <member name="M:System.ResultException.#ctor(System.Int32)">
            <summary>
            初始化一个 <see cref="T:System.ResultException"/> 类的新实例。
            </summary>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.ResultException.#ctor(System.String,System.Int32)">
            <summary>
            初始化一个 <see cref="T:System.ResultException"/> 类的新实例。
            </summary>
            <param name="message">描述错误的信息。</param>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.ResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化一个 <see cref="T:System.ResultException"/> 类的新实例。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:System.ResultException.ToResult">
            <summary>
            将当前错误转换为 <see cref="T:System.Result"/> 类的新实例。
            </summary>
            <returns><see cref="T:System.Result"/> 类的新实例。</returns>
        </member>
        <member name="M:System.ResultException.ToResult``1">
            <summary>
            将当前错误转换为 <see cref="T:System.Result`1"/> 类的新实例。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
            <returns><see cref="T:System.Result`1"/> 类的新实例。</returns>
        </member>
        <member name="M:System.ResultException.ToCustomResult``1">
            <summary>
            将当前错误转换为 <typeparamref name="TResult" /> 类的新实例。
            </summary>
            <typeparam name="TResult">结果的数据类型。</typeparam>
            <returns><typeparamref name="TResult" /> 类的新实例。</returns>
        </member>
        <member name="M:System.ResultException.ToCustomResult(System.Type)">
            <summary>
            将当前错误转换为 <paramref name="resultType"/> 类的新实例。
            </summary>
            <param name="resultType">结果的数据类型。</param>
            <returns><paramref name="resultType"/> 类的新实例。</returns>
        </member>
        <member name="T:System.ResultStatus">
            <summary>
            表示 <see cref="T:System.Result" /> 的状态。
            </summary>
        </member>
        <member name="F:System.ResultStatus.Succeed">
            <summary>
            成功的结果。
            </summary>
        </member>
        <member name="F:System.ResultStatus.Failed">
            <summary>
            失败的结果。
            </summary>
        </member>
        <member name="T:System.Result`1">
            <summary>
            表示包含一个返回值的结果。
            </summary>
            <typeparam name="TValue">返回值的数据类型。</typeparam>
        </member>
        <member name="F:System.Result`1.ValueType">
            <summary>
            表示一个操作结果返回值的类型。
            </summary>
        </member>
        <member name="F:System.Result`1._Value">
            <summary>
            获取或设置结果的返回值。
            </summary>
        </member>
        <member name="P:System.Result`1.Value">
            <summary>
            获取或设置结果的返回值。
            </summary>
        </member>
        <member name="P:System.Result`1.UnsafeValue">
            <summary>
            获取一个值，表示结果的返回值。若当前结果包含错误，将会抛出异常。
            </summary>
        </member>
        <member name="M:System.Result`1.#ctor">
            <summary>
            初始化一个 <see cref="T:System.Result`1"/> 类的新实例。
            </summary>
        </member>
        <member name="M:System.Result`1.#ctor(`0)">
            <summary>
            指定结果的返回值，初始化一个 <see cref="T:System.Result`1"/> 类的新实例。
            </summary>
            <param name="value">结果的返回值。</param>
        </member>
        <member name="M:System.Result`1.#ctor(System.Exception,System.Int32)">
            <summary>
            指定引发的异常和状态码，初始化一个 <see cref="T:System.Result`1"/> 类的新实例。
            </summary>
            <param name="exception">引发异常的 <see cref="T:System.Exception"/>。</param>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.Result`1.#ctor(System.String,System.Int32)">
            <summary>
            指定描述错误的信息和状态码，初始化一个 <see cref="T:System.Result`1"/> 类的新实例。
            </summary>
            <param name="message">描述错误的信息。</param>
            <param name="status">结果的状态码。</param>
        </member>
        <member name="M:System.Result`1.ToString">
            <summary>
            返回以字符串形式描述的结果。
            </summary>
            <returns>如果这是一个成功的操作结果，将返回字符串形式的值，否则返回异常的描述信息。</returns>
        </member>
        <member name="M:System.Result`1.op_Implicit(System.Exception)~System.Result{`0}">
            <summary>
            <see cref="T:System.Result`1"/> 和 <see cref="T:System.Exception"/> 的隐式转换。
            </summary>
            <param name="exception">引发异常的 <see cref="T:System.Exception"/>。</param>
            <returns>表示一个异常的结果。</returns>
        </member>
        <member name="M:System.Result`1.op_Implicit(System.String)~System.Result{`0}">
            <summary>
            <see cref="T:System.Result`1"/> 和 <see cref="T:System.String"/> 的隐式转换。
            </summary>
            <param name="message">描述错误的信息。</param>
            <returns>表示一个异常的结果。</returns>
        </member>
        <member name="M:System.Result`1.op_Implicit(`0)~System.Result{`0}">
            <summary>
            <see cref="T:System.Result`1"/> 和 <typeparamref name="TValue"/> 的隐式转换。
            </summary>
            <param name="value">结果的返回值。</param>
            <returns>表示包含返回值的结果。</returns>
        </member>
        <member name="T:IocExtensions">
            <summary>
            表示 <see cref="T:System.IIocContainer"/> 的扩展方法。
            </summary>
        </member>
        <member name="M:IocExtensions.Add``1(System.IIocContainer,System.Boolean,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Add``2(System.IIocContainer,System.Boolean,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <typeparam name="TActual">实际的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Add``1(System.IIocContainer,``0,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="serviceInstance">要添加的服务的实例。 此对象必须实现 <typeparamref name="TService"/> 参数所指示的类型或从其继承。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Add``1(System.IIocContainer,System.InstanceCreatorCallback,System.Boolean,System.Boolean)">
            <summary>
            将指定服务添加到服务容器中。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Remove``1(System.IIocContainer,System.Boolean)">
            <summary>
            从服务容器中移除指定的服务类型。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Get``1(System.IIocContainer,System.Object[])">
            <summary>
            获取指定类型的服务对象。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns><typeparamref name="TService"/> 类型的服务对象。- 或 -如果没有 <typeparamref name="TService"/>> 类型的服务对象，则为默认值。</returns>
        </member>
        <member name="M:IocExtensions.GetFixed``1(System.IIocContainer,System.Object[])">
            <summary>
            从手工注册服务列表中，获取指定类型的服务对象。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns><typeparamref name="TService"/> 类型的服务对象。- 或 -如果没有 <typeparamref name="TService"/>> 类型的服务对象，则为默认值。</returns>
        </member>
        <member name="M:IocExtensions.GetAll``1(System.IIocContainer,System.Object[])">
            <summary>
            获取指定类型的所有服务对象。
            </summary>
            <typeparam name="TService">一个对象，它指定要获取的服务对象的类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="lastMappingValues">后期映射的参数值数组。请保证数组顺序与构造函数的后期映射的参数顺序一致。</param>
            <returns><typeparamref name="TService"/> 类型的所有服务对象。</returns>
        </member>
        <member name="M:IocExtensions.Contains``1(System.IIocContainer,System.Boolean)">
            <summary>
            查找服务容器是否包含指定的服务类型。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>如果存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:IocExtensions.Add``1(System.IIocContainer,System.String,System.Object,System.Boolean)">
            <summary>
            将指定的参数名和参数值添加到服务容器中，并绑定到关联的服务类型的构造函数。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Add``1(System.IIocContainer,System.String,System.InstanceCreatorCallback,System.Boolean,System.Boolean)">
            <summary>
            将指定的参数名和参数值添加到服务容器中，并绑定到关联的服务类型的构造函数。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>>
            <param name="name">参数名称。</param>
            <param name="callback">用于创建参数的回调对象。这允许将参数声明为可用，但将值的创建延迟到请求该参数之后。</param>
            <param name="singletonMode">true，则启用单例模式；否则为 false。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Remove``1(System.IIocContainer,System.String,System.Boolean)">
            <summary>
            从服务容器中移除指定关联的服务类型的参数。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="name">要移除的参数名称。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.Get``1(System.IIocContainer,System.String,System.Object[])">
            <summary>
            获取指定关联的服务类型和参数名称的值。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="name">参数名称。</param>
            <param name="lastMappingValues">后期映射的参数值数组。</param>
            <returns>参数名称的值。- 或 -如果没有参数名称的值，则为 null 值。</returns>
        </member>
        <member name="M:IocExtensions.Contains``1(System.IIocContainer,System.String,System.Boolean)">
            <summary>
            查找服务容器是否包含指定关联的服务类型指定的参数。
            </summary>
            <typeparam name="TService">要添加的服务类型。</typeparam>
            <param name="container">服务容器。</param>
            <param name="name">要查找的参数名称。</param>
            <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
            <returns>如果存在返回 true，否则返回 false。</returns>
        </member>
        <member name="M:IocExtensions.Use``1(Aoite.DI.IServiceBuilder)">
            <summary>
            添加或覆盖一个预期服务类型。
            </summary>
            <typeparam name="TExpect">预期服务类型。</typeparam>
            <param name="binder">绑定器。</param>
            <returns>类型服务的绑定器。</returns>
        </member>
        <member name="M:IocExtensions.UseRange``1(Aoite.DI.IServiceBuilder)">
            <summary>
            添加一个预期服务类型。
            </summary>
            <typeparam name="TExpect">预期服务类型。</typeparam>
            <param name="binder">绑定器。</param>
            <returns>类型服务的绑定器。</returns>
        </member>
        <member name="M:IocExtensions.Use``1(Aoite.DI.IServiceBuilder,System.String)">
            <summary>
            添加或覆盖一个值服务。
            </summary>
            <typeparam name="TExpect">预期服务类型。</typeparam>
            <param name="binder">绑定器。</param>
            <param name="name">值服务的参数名称。</param>
            <returns>类型服务的绑定器。</returns>
        </member>
        <member name="M:IocExtensions.Transient``1(Aoite.DI.ITypeServiceBinder)">
            <summary>
            绑定为短暂模式的服务。
            </summary>
            <typeparam name="TActual">实际的服务类型。</typeparam>
            <param name="binder">绑定器。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:IocExtensions.Singleton``1(Aoite.DI.ITypeServiceBinder)">
            <summary>
            绑定为单例模式的服务。
            </summary>
            <typeparam name="TActual">实际的服务类型。</typeparam>
            <param name="binder">绑定器。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:IocExtensions.Scoped``1(Aoite.DI.ITypeServiceBinder)">
            <summary>
            绑定为范围模式的服务。
            </summary>
            <typeparam name="TActual">实际的服务类型。</typeparam>
            <param name="binder">绑定器。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:IocExtensions.As``1(Aoite.DI.ITypeServiceBinder)">
            <summary>
            绑定为智能模式的服务。根据 <see cref="P:Aoite.DI.IServiceBinder.ExpectType"/> 的特性创建不同模式的服务（默认为短暂模式）。
            </summary>
            <typeparam name="TActual">实际的服务类型。</typeparam>
            <param name="binder">绑定器。</param>
            <returns>服务构建器。</returns>
        </member>
        <member name="M:IocExtensions.AutoMap(System.IIocContainer,System.IMapFilter,System.Action{System.Type})">
            <summary>
            指定筛选器，自动映射类型。
            </summary>
            <param name="container">服务容器。</param>
            <param name="mapFilter">依赖注入与控制反转的映射筛选器。</param>
            <param name="expectTypeHandler">找到预期类型时发生。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.AutoMapFromConfig(System.IIocContainer,System.String)">
            <summary>
            指定配置文件“configuration/appSettings”的键，自定映射类型。
            </summary>
            <param name="container">服务容器。</param>
            <param name="appSettingKey">配置文件“configuration/appSettings”的键。</param>
            <returns>服务容器。</returns>
        </member>
        <member name="M:IocExtensions.AutoMap(System.IIocContainer,System.String,System.String)">
            <summary>
            指定命名空间表达式，自动映射类型。
            </summary>
            <param name="container">服务容器。</param>
            <param name="namespaceExpression">筛选器的命名空间表达式。可以是一个完整的命名空间，也可以是“*”起始，或者以“*”结尾。符号“*”只能出现一次。通过“|”可以同时包含多个命名空间。</param>
            <param name="actualTypeFullNameFormat">获取或设置筛选器的实际类型的完全限定名的格式项，例如“{0}.Default{1}”，索引 0 表示 - 预期定义接口 - 的命名空间，索引 1 表示 - 预期定义接口 - 的名称（已去 I）。</param>
            <returns>服务容器。</returns>
        </member>
    </members>
</doc>
